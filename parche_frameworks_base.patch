
project frameworks/base/
diff --git a/Android.mk b/Android.mk
index eae49ef..7a722a9 100644
--- a/Android.mk
+++ b/Android.mk
@@ -139,6 +139,7 @@ LOCAL_SRC_FILES += \
 	core/java/android/os/INetworkManagementService.aidl \
 	core/java/android/os/IPermissionController.aidl \
 	core/java/android/os/IPowerManager.aidl \
+    core/java/android/os/IDynamicPManager.aidl \
 	core/java/android/os/IRemoteCallback.aidl \
 	core/java/android/os/ISchedulingPolicyService.aidl \
 	core/java/android/os/IUpdateLock.aidl \
@@ -222,7 +223,8 @@ LOCAL_SRC_FILES += \
 	wifi/java/android/net/wifi/p2p/IWifiP2pManager.aidl \
 	voip/java/android/net/sip/ISipSession.aidl \
 	voip/java/android/net/sip/ISipSessionListener.aidl \
-	voip/java/android/net/sip/ISipService.aidl
+	voip/java/android/net/sip/ISipService.aidl \
+	ethernet/java/android/net/ethernet/IEthernetManager.aidl
 #
 
 
diff --git a/cmds/bootanimation/Android.mk b/cmds/bootanimation/Android.mk
index 8c46b21..76200db 100644
--- a/cmds/bootanimation/Android.mk
+++ b/cmds/bootanimation/Android.mk
@@ -16,7 +16,8 @@ LOCAL_SHARED_LIBRARIES := \
 	libskia \
     libEGL \
     libGLESv1_CM \
-    libgui
+    libgui \
+    libmedia
 
 LOCAL_C_INCLUDES := \
 	$(call include-path-for, corecg graphics)
diff --git a/cmds/bootanimation/BootAnimation.cpp b/cmds/bootanimation/BootAnimation.cpp
index 8511735..33b236f 100644
--- a/cmds/bootanimation/BootAnimation.cpp
+++ b/cmds/bootanimation/BootAnimation.cpp
@@ -85,6 +85,25 @@ sp<SurfaceComposerClient> BootAnimation::session() const {
     return mSession;
 }
 
+void BootAnimation::playBootMusic(const char* url)
+{
+    int index = 7;
+    audio_devices_t adev;
+
+    if((access(url, F_OK)) != -1) {
+        sp<MediaPlayer> mp = new MediaPlayer();
+        if (mp == NULL || url == NULL) {
+            ALOGE("BootMusic: create MediaPlayer failed");
+            return;
+        }
+        if (mp->setDataSource(url, NULL) == NO_ERROR) {
+            mp->setAudioStreamType(AUDIO_STREAM_ENFORCED_AUDIBLE);
+            mp->prepare();
+            mp->seekTo(0);
+            mp->start();
+        }
+    }
+}
 
 void BootAnimation::binderDied(const wp<IBinder>& who)
 {
diff --git a/cmds/bootanimation/BootAnimation.h b/cmds/bootanimation/BootAnimation.h
index fa908eb..c71bfa8 100644
--- a/cmds/bootanimation/BootAnimation.h
+++ b/cmds/bootanimation/BootAnimation.h
@@ -25,6 +25,7 @@
 
 #include <EGL/egl.h>
 #include <GLES/gl.h>
+#include <media/mediaplayer.h>
 
 class SkBitmap;
 
@@ -43,6 +44,7 @@ public:
     virtual     ~BootAnimation();
 
     sp<SurfaceComposerClient> session() const;
+    void playBootMusic(const char* url);
 
 private:
     virtual bool        threadLoop();
diff --git a/cmds/bootanimation/bootanimation_main.cpp b/cmds/bootanimation/bootanimation_main.cpp
index 417e138..e6ec974 100644
--- a/cmds/bootanimation/bootanimation_main.cpp
+++ b/cmds/bootanimation/bootanimation_main.cpp
@@ -53,7 +53,7 @@ int main(int argc, char** argv)
 
         // create the boot animation object
         sp<BootAnimation> boot = new BootAnimation();
-
+        boot->playBootMusic("/system/media/boot.wav");
         IPCThreadState::self()->joinThreadPool();
 
     }
diff --git a/cmds/pm/src/com/android/commands/pm/Pm.java b/cmds/pm/src/com/android/commands/pm/Pm.java
index 42c9d34..d0195e0 100644
--- a/cmds/pm/src/com/android/commands/pm/Pm.java
+++ b/cmds/pm/src/com/android/commands/pm/Pm.java
@@ -109,6 +109,10 @@ public final class Pm {
             runInstall();
             return;
         }
+        if ("preinstall".equals(op)) {
+        	preInstall();
+			return;
+        }
 
         if ("uninstall".equals(op)) {
             runUninstall();
@@ -763,7 +767,57 @@ public final class Pm {
             System.err.println(PM_NOT_RUNNING_ERR);
         }
     }
-
+	private void preInstall() {
+		 String path = nextArg();
+		 int i;
+		 
+		 System.out.println("\t preInstall path: " + path);
+		 if (path == null) {
+            System.err.println("Error: no package specified");
+            showUsage();
+            return;
+        }
+		File dir = new File(path);
+		if(!(dir.exists()&&dir.canRead())){
+			System.out.println("\t preInstall path: " + path + " donot exist or read");	
+			return;
+		}
+		 
+		File[] files = dir.listFiles();		
+		if(files.length<=0){
+			System.out.println("\t preInstall path: " + path + " donot hava files to preinstall");	
+			return;
+		}
+			
+		for(File apkFilePath : files) {
+			System.out.println("\t pkg: " + apkFilePath);
+			PackageInstallObserver obs = new PackageInstallObserver();			
+			try {
+            	mPm.installPackage(Uri.fromFile(apkFilePath), obs, 0,null);
+            	
+				synchronized (obs) {
+                	while (!obs.finished) {
+                    	try {                    		
+                        	obs.wait();                        	
+                    	} catch (InterruptedException e) {
+                    		System.err.println("\t " + e);
+                    	}
+                	}
+                	if (obs.result == PackageManager.INSTALL_SUCCEEDED) {
+                    	System.out.println("Success");
+               		} else {
+                    	System.err.println("Failure ["
+                            + installFailureToString(obs.result)
+                            + "]");
+                	}
+            	}
+        	} catch (RemoteException e) {
+            	System.err.println(e.toString());
+            	System.err.println(PM_NOT_RUNNING_ERR);
+        	}
+		}
+		System.out.println("\t preInstall path: " + path + " ok");	
+	}
     private void runInstall() {
         int installFlags = PackageManager.INSTALL_ALL_USERS;
         String installerPackageName = null;
diff --git a/core/java/android/app/ActivityManagerNative.java b/core/java/android/app/ActivityManagerNative.java
index 61b2067..b09639f 100644
--- a/core/java/android/app/ActivityManagerNative.java
+++ b/core/java/android/app/ActivityManagerNative.java
@@ -4053,6 +4053,17 @@ class ActivityManagerProxy implements IActivityManager
         reply.recycle();
     }
 
+    public void sendBootFastComplete() throws RemoteException {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        mRemote.transact(SEND_BOOT_FAST_COMPLETE_TRANSACTION, data, reply, 0);
+        reply.readException();
+        data.recycle();
+        reply.recycle();
+    }
+	
+
     public boolean targetTaskAffinityMatchesActivity(IBinder token, String destAffinity)
             throws RemoteException {
         Parcel data = Parcel.obtain();
diff --git a/core/java/android/app/AlarmManager.java b/core/java/android/app/AlarmManager.java
index 2fe682d..45760e7 100644
--- a/core/java/android/app/AlarmManager.java
+++ b/core/java/android/app/AlarmManager.java
@@ -80,6 +80,8 @@ public class AlarmManager
      */
     public static final int ELAPSED_REALTIME = 3;
 
+	public static final int RTC_SHUTDOWN_WAKEUP = 4;
+	
     private final IAlarmManager mService;
 
     /**
diff --git a/core/java/android/app/ContextImpl.java b/core/java/android/app/ContextImpl.java
index f895ccc..3ddf02d 100644
--- a/core/java/android/app/ContextImpl.java
+++ b/core/java/android/app/ContextImpl.java
@@ -451,7 +451,7 @@ class ContextImpl extends Context {
 
         registerService(SENSOR_SERVICE, new ServiceFetcher() {
                 public Object createService(ContextImpl ctx) {
-                    return new SystemSensorManager(ctx.mMainThread.getHandler().getLooper());
+                    return new SystemSensorManager(ctx.getOuterContext(),ctx.mMainThread.getHandler().getLooper());
                 }});
 
         registerService(STATUS_BAR_SERVICE, new ServiceFetcher() {
diff --git a/core/java/android/app/IActivityManager.java b/core/java/android/app/IActivityManager.java
index 8af17a4..8553199 100644
--- a/core/java/android/app/IActivityManager.java
+++ b/core/java/android/app/IActivityManager.java
@@ -351,6 +351,8 @@ public interface IActivityManager extends IInterface {
 
     public void dismissKeyguardOnNextActivity() throws RemoteException;
 
+	public void sendBootFastComplete() throws RemoteException;
+
     public boolean targetTaskAffinityMatchesActivity(IBinder token, String destAffinity)
             throws RemoteException;
 
@@ -624,4 +626,5 @@ public interface IActivityManager extends IInterface {
     int INPUT_DISPATCHING_TIMED_OUT_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+158;
     int CLEAR_PENDING_BACKUP_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+159;
     int GET_INTENT_FOR_INTENT_SENDER_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+160;
+	int SEND_BOOT_FAST_COMPLETE_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION + 161;
 }
diff --git a/core/java/android/content/Context.java b/core/java/android/content/Context.java
index 7aa2507..14afb5f 100644
--- a/core/java/android/content/Context.java
+++ b/core/java/android/content/Context.java
@@ -1805,6 +1805,8 @@ public abstract class Context {
      * @see android.net.ConnectivityManager
      * @see #WIFI_SERVICE
      * @see android.net.wifi.WifiManager
+     * @see #ETHERNET_SERVICE
+     * @see android.net.ethernet.EthernetManager
      * @see #AUDIO_SERVICE
      * @see android.media.AudioManager
      * @see #MEDIA_ROUTER_SERVICE
@@ -2051,6 +2053,16 @@ public abstract class Context {
 
     /**
      * Use with {@link #getSystemService} to retrieve a {@link
+     * android.net.ethernet.EthernetManager} for handling management of
+     * Ethernet access.
+     *
+     * @see #getSystemService
+     * @see android.net.ethernet.EthernetManager
+     */
+    public static final String ETHERNET_SERVICE = "ethernet";
+
+    /**
+     * Use with {@link #getSystemService} to retrieve a {@link
      * android.net.nsd.NsdManager} for handling management of network service
      * discovery
      *
diff --git a/core/java/android/content/Intent.java b/core/java/android/content/Intent.java
index cf0603e..1fa5b99 100644
--- a/core/java/android/content/Intent.java
+++ b/core/java/android/content/Intent.java
@@ -2465,6 +2465,9 @@ public class Intent implements Parcelable, Cloneable {
     public static final String ACTION_QUICK_CLOCK =
             "android.intent.action.QUICK_CLOCK";
 
+	public static final String ACTION_BOOT_FAST = 
+		    "android.intent.action.BOOT_FAST";
+
     // ---------------------------------------------------------------------
     // ---------------------------------------------------------------------
     // Standard intent categories (see addCategory()).
@@ -3031,6 +3034,10 @@ public class Intent implements Parcelable, Cloneable {
     public static final String EXTRA_USER_HANDLE =
             "android.intent.extra.user_handle";
 
+
+	public static final String EXTRA_BOOT_FAST = 
+		    "android.intent.extra.boot_fast";
+
     // ---------------------------------------------------------------------
     // ---------------------------------------------------------------------
     // Intent flags (see mFlags variable).
diff --git a/core/java/android/content/res/Configuration.java b/core/java/android/content/res/Configuration.java
index 86d6ee7..04b917b 100644
--- a/core/java/android/content/res/Configuration.java
+++ b/core/java/android/content/res/Configuration.java
@@ -19,6 +19,7 @@ package android.content.res;
 import android.content.pm.ActivityInfo;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.os.SystemProperties;
 import android.text.TextUtils;
 import android.view.View;
 
@@ -721,7 +722,8 @@ public final class Configuration implements Parcelable, Comparable<Configuration
      * Set this object to the system defaults.
      */
     public void setToDefaults() {
-        fontScale = 1;
+        /* add property to control the default value of font scale, 2013-5-6 21:12:34 */
+        fontScale = Float.parseFloat(SystemProperties.get("ro.font.scale", "1.0"));
         mcc = mnc = 0;
         locale = null;
         userSetLocale = false;
diff --git a/core/java/android/hardware/Camera.java b/core/java/android/hardware/Camera.java
index a300776..9b2abd7 100644
--- a/core/java/android/hardware/Camera.java
+++ b/core/java/android/hardware/Camera.java
@@ -35,6 +35,7 @@ import android.text.TextUtils;
 import android.view.Surface;
 import android.view.SurfaceHolder;
 
+import java.io.FileDescriptor;
 import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -144,6 +145,10 @@ public class Camera {
     private static final int CAMERA_MSG_RAW_IMAGE_NOTIFY = 0x200;
     private static final int CAMERA_MSG_PREVIEW_METADATA = 0x400;
     private static final int CAMERA_MSG_FOCUS_MOVE       = 0x800;
+	private static final int CAMERA_MSG_CONTINUOUSSNAP   = 0x1000;   //for continuous snap by fuqiang
+	private static final int CAMERA_MSG_SNAP             = 0x2000;   //for single snap by fuqiang
+	private static final int CAMERA_MSG_SNAP_THUMB       = 0x4000;   //for single snap by fuqiang
+	private static final int CAMERA_MSG_SNAP_FD       = 0x8000;   //for single and continuous snap by fuqiang
 
     private int mNativeContext; // accessed by native methods
     private EventHandler mEventHandler;
@@ -155,6 +160,10 @@ public class Camera {
     private AutoFocusCallback mAutoFocusCallback;
     private AutoFocusMoveCallback mAutoFocusMoveCallback;
     private OnZoomChangeListener mZoomListener;
+	private OnContinuousSnapChangeListener mContinuousSnapListener;
+	private OnSingleSnapChangeListener mSingleSnapListener;
+	private OnSingleSnapThumbChangeListener mSingleSnapThumbListener;
+	private OnSnapFdChangeListener mSnapFdListener;
     private FaceDetectionListener mFaceListener;
     private ErrorCallback mErrorCallback;
     private boolean mOneShot;
@@ -829,6 +838,34 @@ public class Camera {
                 }
                 return;
 
+			//this handles the continuoussnap message by fuqiang
+			//*******************************************************************************
+			case CAMERA_MSG_CONTINUOUSSNAP:   
+				if(mContinuousSnapListener != null) {
+					mContinuousSnapListener.onContinuousSnapChange(msg.arg1, msg.arg2 != 0, mCamera);
+				}
+				return;
+			//*******************************************************************************
+
+			//this handles the single snap message by fuqiang
+			//*******************************************************************************
+			case CAMERA_MSG_SNAP:   
+				if(mSingleSnapListener != null) {
+					mSingleSnapListener.onSingleSnapChange();
+				}
+				return;
+			case CAMERA_MSG_SNAP_THUMB:
+				if(mSingleSnapThumbListener != null) {
+					mSingleSnapThumbListener.onSingleSnapThumbChange((byte [])msg.obj, mCamera);
+				}
+				return;
+			case CAMERA_MSG_SNAP_FD:
+				if(mSnapFdListener != null) {
+					mSnapFdListener.onSnapFdChange((byte [])msg.obj, mCamera);
+				}
+				return;
+			//*******************************************************************************
+
             default:
                 Log.e(TAG, "Unknown message type " + msg.what);
                 return;
@@ -996,6 +1033,17 @@ public class Camera {
 
     private native void enableFocusMoveCallback(int enable);
 
+	 /**
+     * set file descriptor to camera HAL.
+     * add for r/w file in the HAL of android 4.2
+     * by fuqiang.
+     */
+    public void setFd(FileDescriptor filedescriptor) {
+        setFD(filedescriptor);
+    }
+
+    private native void setFD(FileDescriptor filedescriptor);
+
     /**
      * Callback interface used to signal the moment of actual image capture.
      *
@@ -1238,6 +1286,50 @@ public class Camera {
          */
         void onZoomChange(int zoomValue, boolean stopped, Camera camera);
     };
+	
+
+	//add interface for continuous snap by fuqiang
+	//***************************************************************************
+	public interface OnContinuousSnapChangeListener
+	{
+		/*Called when the continuous snap callback in the continuous mode.
+		*
+		*@param value the number of the callback picture.
+		*
+		*@param stoped whether continuous snap is stopped. If the value is true, this is the last callback.
+		*
+		*@param camera the Camera service object.
+		*/
+		void onContinuousSnapChange(int value, boolean stopped, Camera camera);
+	};
+	//***************************************************************************
+
+	//add interface for single snap by fuqiang
+	//***************************************************************************
+	public interface OnSingleSnapChangeListener
+	{
+		/*Called when the continuous snap callback in the continuous mode.
+		*
+		*@param value the number of the callback picture.
+		*
+		*@param stoped whether continuous snap is stopped. If the value is true, this is the last callback.
+		*
+		*@param camera the Camera service object.
+		*/
+		void onSingleSnapChange();
+	};
+	
+	public interface OnSingleSnapThumbChangeListener
+	{
+		void onSingleSnapThumbChange(byte[] data, Camera camera);
+	};
+	
+	public interface OnSnapFdChangeListener
+	{
+		void onSnapFdChange(byte[] data, Camera camera);
+	};
+	//***************************************************************************
+	
 
     /**
      * Registers a listener to be notified when the zoom value is updated by the
@@ -1250,6 +1342,43 @@ public class Camera {
     {
         mZoomListener = listener;
     }
+	
+
+	//for continuous snap by fuqiang
+	//*****************************************************************************************
+	/*
+	*Registers a listener to be notified when the continuous snap callback by the camera HAL.
+	*
+	*@param listener the listener to notify
+	*/
+	public final void setContinuousSnapChangeListener(OnContinuousSnapChangeListener listener)
+	{
+		mContinuousSnapListener = listener;
+	}
+	//*****************************************************************************************
+
+	//for single snap by fuqiang
+	//*****************************************************************************************
+	/*
+	*Registers a listener to be notified when the single snap callback by the camera HAL.
+	*
+	*@param listener the listener to notify
+	*/
+	public final void setSingleSnapChangeListener(OnSingleSnapChangeListener listener)
+	{
+		mSingleSnapListener = listener;
+	}
+	public final void setSingleSnapThumbChangeListener(OnSingleSnapThumbChangeListener listener)
+	{
+		mSingleSnapThumbListener = listener;
+	}
+
+	public final void setSnapFdChangeListener(OnSnapFdChangeListener listener)
+	{
+		mSnapFdListener = listener;
+	}
+	//*****************************************************************************************
+	
 
     /**
      * Callback interface for face detected in the preview frame.
diff --git a/core/java/android/hardware/SensorEvent.java b/core/java/android/hardware/SensorEvent.java
index 51a17c1..e693bd0 100644
--- a/core/java/android/hardware/SensorEvent.java
+++ b/core/java/android/hardware/SensorEvent.java
@@ -432,6 +432,7 @@ public class SensorEvent {
      */
 
     public final float[] values;
+    public final float[] originalValue;
 
     /**
      * The sensor that generated this event. See
@@ -454,5 +455,6 @@ public class SensorEvent {
 
     SensorEvent(int size) {
         values = new float[size];
+        originalValue = new float[size];
     }
 }
diff --git a/core/java/android/hardware/SystemSensorManager.java b/core/java/android/hardware/SystemSensorManager.java
index 0204e94..d985db0 100644
--- a/core/java/android/hardware/SystemSensorManager.java
+++ b/core/java/android/hardware/SystemSensorManager.java
@@ -20,6 +20,7 @@ import android.os.Looper;
 import android.os.Process;
 import android.os.Handler;
 import android.os.Message;
+import android.os.SystemProperties;
 import android.util.Log;
 import android.util.SparseArray;
 import android.util.SparseBooleanArray;
@@ -27,6 +28,8 @@ import android.util.SparseIntArray;
 
 import java.util.ArrayList;
 import java.util.List;
+import android.content.Context;
+import android.provider.Settings;
 
 /**
  * Sensor manager implementation that communicates with the built-in
@@ -53,6 +56,7 @@ public class SystemSensorManager extends SensorManager {
 
     // Looper associated with the context in which this instance was created.
     final Looper mMainLooper;
+    final Context mContext;
 
     /*-----------------------------------------------------------------------*/
 
@@ -103,6 +107,7 @@ public class SystemSensorManager extends SensorManager {
             public void run() {
                 //Log.d(TAG, "entering main sensor thread");
                 final float[] values = new float[3];
+                final float[] orignalvalues = new float[3];
                 final int[] status = new int[1];
                 final long timestamp[] = new long[1];
                 Process.setThreadPriority(Process.THREAD_PRIORITY_URGENT_DISPLAY);
@@ -119,7 +124,31 @@ public class SystemSensorManager extends SensorManager {
 
                 while (true) {
                     // wait for an event
-                    final int sensor = sensors_data_poll(sQueue, values, status, timestamp);
+                    final int sensor = sensors_data_poll(sQueue, orignalvalues, status, timestamp);
+                    int rotation = SystemProperties.getInt("ro.sf.rotation",0);
+                    switch(rotation) {
+                        case 90:
+                            values[0] = -orignalvalues[1];
+                            values[1] = orignalvalues[0];
+                            values[2] = orignalvalues[2];
+                            break;
+                        case 180:
+                            values[0] = -orignalvalues[0];
+                            values[1] = -orignalvalues[1];
+                            values[2] = orignalvalues[2];
+                            break;
+                        case 270:
+                            values[0] = orignalvalues[1];
+                            values[1] = -orignalvalues[0];
+                            values[2] = orignalvalues[2];
+                            break;
+                        case 0:
+                        default:
+                            values[0] = orignalvalues[0];
+                            values[1] = orignalvalues[1];
+                            values[2] = orignalvalues[2];
+                            break;
+                    }
 
                     int accuracy = status[0];
                     synchronized (sListeners) {
@@ -231,9 +260,22 @@ public class SystemSensorManager extends SensorManager {
         void onSensorChangedLocked(Sensor sensor, float[] values, long[] timestamp, int accuracy) {
             SensorEvent t = sPool.getFromPool();
             final float[] v = t.values;
-            v[0] = values[0];
-            v[1] = values[1];
-            v[2] = values[2];
+            String  str = Settings.System.getString(mContext.getContentResolver(), Settings.System.ACCELEROMETER_COORDINATE);
+            int stype = sensor.getType();
+            if(str!=null && str.equals("special")&&((stype == sensor.TYPE_ACCELEROMETER)||(stype == sensor.TYPE_GRAVITY)))
+            {
+                v[0] = values[1];
+                v[1] = -values[0];
+                v[2] = values[2];
+            }
+            else{
+                v[0] = values[0];
+                v[1] = values[1];
+                v[2] = values[2];
+            }
+            t.originalValue[0]	= values[0];
+            t.originalValue[1]	= values[1];
+            t.originalValue[2]	= values[2];
             t.timestamp = timestamp[0];
             t.accuracy = accuracy;
             t.sensor = sensor;
@@ -248,8 +290,9 @@ public class SystemSensorManager extends SensorManager {
     /**
      * {@hide}
      */
-    public SystemSensorManager(Looper mainLooper) {
+    public SystemSensorManager(Context context,Looper mainLooper) {
         mMainLooper = mainLooper;
+        mContext = context;
 
         synchronized(sListeners) {
             if (!sSensorModuleInitialized) {
diff --git a/core/java/android/hardware/display/DisplayManager.java b/core/java/android/hardware/display/DisplayManager.java
index 0a7a2e7..1ecc5a7 100644
--- a/core/java/android/hardware/display/DisplayManager.java
+++ b/core/java/android/hardware/display/DisplayManager.java
@@ -78,6 +78,14 @@ public final class DisplayManager {
     public static final String DISPLAY_CATEGORY_PRESENTATION =
             "android.hardware.display.category.PRESENTATION";
 
+    public static final int DISPLAY_2D_ORIGINAL = 0;
+    public static final int DISPLAY_2D_LEFT = 1;
+    public static final int DISPLAY_2D_TOP = 2;
+    public static final int DISPLAY_3D_LEFT_RIGHT_HDMI = 3;
+    public static final int DISPLAY_3D_TOP_BOTTOM_HDMI = 4;
+
+    private static final int DISPLAY_CMD_SET3DMODE = 0x01;
+
     /** @hide */
     public DisplayManager(Context context) {
         mContext = context;
@@ -301,4 +309,9 @@ public final class DisplayManager {
          */
         void onDisplayChanged(int displayId);
     }
+
+    public int setDisplay3DMode(int displaytype, int display3dMode) {
+        return mGlobal.setDisplayParameter(displaytype, DISPLAY_CMD_SET3DMODE,
+                display3dMode, 0, 0);
+    }
 }
diff --git a/core/java/android/hardware/display/DisplayManagerGlobal.java b/core/java/android/hardware/display/DisplayManagerGlobal.java
index a858681..1749079 100644
--- a/core/java/android/hardware/display/DisplayManagerGlobal.java
+++ b/core/java/android/hardware/display/DisplayManagerGlobal.java
@@ -357,4 +357,13 @@ public final class DisplayManagerGlobal {
             }
         }
     }
+
+    public int setDisplayParameter(int displaytype, int cmd, int para0, int para1, int para2) {
+        try {
+            return mDm.setDisplayParameter(displaytype, cmd, para0, para1, para2);
+        } catch (RemoteException ex) {
+            Log.e(TAG, "Failed to set display 3d mode.", ex);
+            return -1;
+        }
+    }
 }
diff --git a/core/java/android/hardware/display/IDisplayManager.aidl b/core/java/android/hardware/display/IDisplayManager.aidl
index 79aad78..e89af2a 100644
--- a/core/java/android/hardware/display/IDisplayManager.aidl
+++ b/core/java/android/hardware/display/IDisplayManager.aidl
@@ -46,4 +46,6 @@ interface IDisplayManager {
 
     // No permissions required.
     WifiDisplayStatus getWifiDisplayStatus();
+
+    int setDisplayParameter(int displaytype, int cmd, int para0, int para1, int para2);
 }
diff --git a/core/java/android/os/Build.java b/core/java/android/os/Build.java
index a7f39d5..5175e6a 100644
--- a/core/java/android/os/Build.java
+++ b/core/java/android/os/Build.java
@@ -34,6 +34,9 @@ public class Build {
     /** The name of the overall product. */
     public static final String PRODUCT = getString("ro.product.name");
 
+	/** The name of the firmware realse */
+	public static final String FIRMWARE = getString("ro.product.firmware");
+	
     /** The name of the industrial design. */
     public static final String DEVICE = getString("ro.product.device");
 
diff --git a/core/java/android/os/IPowerManager.aidl b/core/java/android/os/IPowerManager.aidl
index 6d6d147..b8d5404 100644
--- a/core/java/android/os/IPowerManager.aidl
+++ b/core/java/android/os/IPowerManager.aidl
@@ -51,4 +51,8 @@ interface IPowerManager
 
     // sets the attention light (used by phone app only)
     void setAttentionLight(boolean on, int color);
+    void goToBootFastSleep(long time);
+    void bootFastWake(long time);
+    boolean isBootFastStatus();
+    boolean isBootFastWakeFromStandby();
 }
diff --git a/core/java/android/os/PowerManager.java b/core/java/android/os/PowerManager.java
index 736762f..905898a 100644
--- a/core/java/android/os/PowerManager.java
+++ b/core/java/android/os/PowerManager.java
@@ -535,6 +535,37 @@ public final class PowerManager {
         }
     }
 
+	public void goToBootFastSleep(long time){
+		try{
+			mService.goToBootFastSleep(time);
+		}catch(RemoteException e){
+		}
+	}
+
+	public void bootFastWake(long time){
+		try{
+			mService.bootFastWake(time);
+		}catch(RemoteException e){
+		}
+	}
+
+	public boolean isBootFastStatus(){
+		boolean retValue = false;
+		try{
+			retValue = mService.isBootFastStatus();
+		}catch(RemoteException e){
+		}
+		return retValue;
+	}
+
+	public boolean isBootFastWakeFromStandby(){
+		boolean retValue = false;
+		try{
+			retValue = mService.isBootFastWakeFromStandby();
+		}catch(RemoteException e){
+		}
+		return retValue;
+	}
     /**
      * Sets the brightness of the backlights (screen, keyboard, button).
      * <p>
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 4dbc4b4..25128ac 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -233,6 +233,20 @@ public final class Settings {
             "android.settings.WIFI_DISPLAY_SETTINGS";
 
     /**
+     * Activity Action: Show settings to allow configuration of Ethernet.
+     * <p>
+     * In some cases, a matching Activity may not exist, so ensure you
+     * safeguard against this.
+     * <p>
+     * Input: Nothing.
+     * <p>
+     * Output: Nothing.
+     */
+    @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+    public static final String ACTION_ETHERNET_SETTINGS =
+            "android.settings.ETHERNET_SETTINGS";
+
+    /**
      * Activity Action: Show settings to allow configuration of date and time.
      * <p>
      * In some cases, a matching Activity may not exist, so ensure you
@@ -1773,6 +1787,12 @@ public final class Settings {
         public static final String VOLUME_VOICE = "volume_voice";
 
         /**
+         * FM volume. This is used internally, changing this value will
+         * not change the volume. See AudioManager.
+         */
+        public static final String VOLUME_FM = "volume_fm";
+
+        /**
          * Music/media/gaming volume. This is used internally, changing this
          * value will not change the volume. See AudioManager.
          */
@@ -1846,7 +1866,8 @@ public final class Settings {
          */
         public static final String[] VOLUME_SETTINGS = {
             VOLUME_VOICE, VOLUME_SYSTEM, VOLUME_RING, VOLUME_MUSIC,
-            VOLUME_ALARM, VOLUME_NOTIFICATION, VOLUME_BLUETOOTH_SCO
+            VOLUME_ALARM, VOLUME_NOTIFICATION, VOLUME_BLUETOOTH_SCO,
+	        "no volume","no volume",VOLUME_FM,VOLUME_FM 
         };
 
         /**
@@ -2275,6 +2296,47 @@ public final class Settings {
         public static final String POINTER_SPEED = "pointer_speed";
 
         /**
+         * To use default or special accelerometer coordinate system
+         * @hide
+         */
+
+        public static final String ACCELEROMETER_COORDINATE = "accelerometer_coordinate";
+
+        /**
+         * the display mode options.
+         * add by huanglong
+         * @hide
+         */
+        public static final String DISPLAY_ADAPTION_MODE = "display_adaption_mode";
+
+        /**
+         * enable the screen adaption.
+         * add by huanglong
+         * @hide
+         */
+        public static final String DISPLAY_ADAPTION_ENABLE = "display_adapter_enable";
+		/**
+		 * enable the boot fast mode
+		 *
+		 *
+		 */
+		public static final String BOOT_FAST_ENABLE = "boot_fast_enable"; 
+		/**
+		 * enable max power mode
+		 *
+		 * 
+		 */
+		public static final String CPU_FAST_ENABLE = "cpu_fast_enable";
+		
+        public static final String BRIGHT_SYSTEM_MODE = "bright_system_mode";
+
+        public static final String BRIGHTNESS_LIGHT_MODE = "brightness_light_mode";
+
+        public static final String HDMI_OUTPUT_MODE = "hdmi_output_mode";
+
+        public static final String HDMI_FULL_SCREEN = "hdmi_full_screen";
+		
+        /**
          * Settings to backup. This is here so that it's in the same place as the settings
          * keys and easy to update.
          *
@@ -2339,7 +2401,13 @@ public final class Settings {
             SIP_CALL_OPTIONS,
             SIP_RECEIVE_CALLS,
             POINTER_SPEED,
-            VIBRATE_WHEN_RINGING
+            VIBRATE_WHEN_RINGING,
+            BOOT_FAST_ENABLE,
+            CPU_FAST_ENABLE,
+            BRIGHT_SYSTEM_MODE,
+            BRIGHTNESS_LIGHT_MODE,
+            HDMI_OUTPUT_MODE,
+            HDMI_FULL_SCREEN
         };
 
         // Settings moved to Settings.Secure
@@ -2685,6 +2753,14 @@ public final class Settings {
             MOVED_TO_GLOBAL.add(Settings.Global.WIFI_SUSPEND_OPTIMIZATIONS_ENABLED);
             MOVED_TO_GLOBAL.add(Settings.Global.WIFI_WATCHDOG_ON);
             MOVED_TO_GLOBAL.add(Settings.Global.WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED);
+            MOVED_TO_GLOBAL.add(Settings.Global.ETHERNET_ON);
+            MOVED_TO_GLOBAL.add(Settings.Global.ETHERNET_MODE);
+            MOVED_TO_GLOBAL.add(Settings.Global.ETHERNET_IP);
+            MOVED_TO_GLOBAL.add(Settings.Global.ETHERNET_MASK);
+            MOVED_TO_GLOBAL.add(Settings.Global.ETHERNET_DNS);
+            MOVED_TO_GLOBAL.add(Settings.Global.ETHERNET_ROUTE);
+            MOVED_TO_GLOBAL.add(Settings.Global.ETHERNET_CONF);
+            MOVED_TO_GLOBAL.add(Settings.Global.ETHERNET_IFNAME);
             MOVED_TO_GLOBAL.add(Settings.Global.WIMAX_NETWORKS_AVAILABLE_NOTIFICATION_ON);
             MOVED_TO_GLOBAL.add(Settings.Global.PACKAGE_VERIFIER_ENABLE);
             MOVED_TO_GLOBAL.add(Settings.Global.PACKAGE_VERIFIER_TIMEOUT);
@@ -4884,6 +4960,18 @@ public final class Settings {
        public static final String WIFI_P2P_DEVICE_NAME = "wifi_p2p_device_name";
 
        /**
+        * Ethernet configuration
+        */
+       public static final String ETHERNET_ON      = "eth_on";
+       public static final String ETHERNET_MODE    = "eth_mode";
+       public static final String ETHERNET_IP      = "eth_ip";
+       public static final String ETHERNET_MASK    = "eth_netmask";
+       public static final String ETHERNET_DNS     = "eth_dns";
+       public static final String ETHERNET_ROUTE   = "eth_route";
+       public static final String ETHERNET_CONF    = "eth_conf";
+       public static final String ETHERNET_IFNAME  = "eth_ifname";
+
+       /**
         * The number of milliseconds to delay when checking for data stalls during
         * non-aggressive detection. (screen is turned off.)
         * @hide
diff --git a/core/java/android/service/wallpaper/WallpaperService.java b/core/java/android/service/wallpaper/WallpaperService.java
index 6d5705d..0c6c663 100644
--- a/core/java/android/service/wallpaper/WallpaperService.java
+++ b/core/java/android/service/wallpaper/WallpaperService.java
@@ -186,7 +186,7 @@ public abstract class WallpaperService extends Service {
         
         final BaseSurfaceHolder mSurfaceHolder = new BaseSurfaceHolder() {
             {
-                mRequestedFormat = PixelFormat.RGBX_8888;
+                mRequestedFormat = PixelFormat.RGB_565;
             }
 
             @Override
diff --git a/core/java/android/view/HardwareRenderer.java b/core/java/android/view/HardwareRenderer.java
index 5b7a5af..2e98541 100644
--- a/core/java/android/view/HardwareRenderer.java
+++ b/core/java/android/view/HardwareRenderer.java
@@ -40,6 +40,13 @@ import javax.microedition.khronos.egl.EGLDisplay;
 import javax.microedition.khronos.egl.EGLSurface;
 import javax.microedition.khronos.opengles.GL;
 
+import android.opengl.GLES20;
+import android.opengl.GLES11Ext;
+import android.opengl.GLSurfaceView;
+import android.opengl.Matrix;
+import javax.microedition.khronos.egl.EGLConfig;
+import javax.microedition.khronos.opengles.GL10;
+
 import java.io.File;
 import java.io.PrintWriter;
 import java.util.concurrent.locks.ReentrantLock;
@@ -1222,6 +1229,21 @@ public abstract class HardwareRenderer {
                                 drawDisplayListStartTime = System.nanoTime();
                             }
 
+							//Log.v(LOG_TAG, "view instance of:" + view.getClass().getName());
+							String className = view.getClass().getName();
+							if(className.equals("com.softwinner.fireplayer.floatwindow.Window")); 
+							{
+								GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_MIN_FILTER,
+					        	        GLES20.GL_NEAREST);
+					        	GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_MAG_FILTER,
+					        	        GLES20.GL_LINEAR);
+					        	// Clamp to edge is the only option
+					        	GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_S,
+					        	        GLES20.GL_CLAMP_TO_EDGE);
+					        	GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_T,
+					        	        GLES20.GL_CLAMP_TO_EDGE);
+							}
+
                             Trace.traceBegin(Trace.TRACE_TAG_VIEW, "drawDisplayList");
                             try {
                                 status |= canvas.drawDisplayList(displayList, mRedrawClip,
diff --git a/core/java/android/view/IWindowSession.aidl b/core/java/android/view/IWindowSession.aidl
index ff9dcce..23e8c88 100644
--- a/core/java/android/view/IWindowSession.aidl
+++ b/core/java/android/view/IWindowSession.aidl
@@ -45,6 +45,7 @@ interface IWindowSession {
     int addToDisplayWithoutInputChannel(IWindow window, int seq, in WindowManager.LayoutParams attrs,
             in int viewVisibility, in int layerStackId, out Rect outContentInsets);
     void remove(IWindow window);
+    void bringToFront(IWindow window);
     
     /**
      * Change the parameters of a window.  You supply the
diff --git a/core/java/android/view/Surface.java b/core/java/android/view/Surface.java
index 0a81a71..56a175b 100644
--- a/core/java/android/view/Surface.java
+++ b/core/java/android/view/Surface.java
@@ -278,6 +278,8 @@ public class Surface implements Parcelable {
     private native void nativeReadFromParcel(Parcel source);
     private native void nativeWriteToParcel(Parcel dest);
 
+    private static native int nativeSetDisplayParameter(
+            IBinder displayToken, int cmd, int para0, int para1, int para2);
 
     /**
      * Create an empty surface, which will later be filled in by readFromParcel().
@@ -883,4 +885,12 @@ public class Surface implements Parcelable {
             mOrigMatrix.set(m);
         }
     }
+
+    /** @hide */
+    public static int setDisplayParameter(IBinder displayToken, int cmd, int para0, int para1, int para2) {
+        if (displayToken == null) {
+            throw new IllegalArgumentException("displayToken must not be null");
+        }
+        return nativeSetDisplayParameter(displayToken, cmd, para0, para1, para2);
+    }
 }
diff --git a/core/java/android/view/SurfaceView.java b/core/java/android/view/SurfaceView.java
index 9008521..63c52cf 100644
--- a/core/java/android/view/SurfaceView.java
+++ b/core/java/android/view/SurfaceView.java
@@ -37,6 +37,13 @@ import android.util.Log;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.concurrent.locks.ReentrantLock;
+import android.opengl.GLSurfaceView;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.provider.Settings;
+import android.view.Display;
+import android.view.DisplayInfo;
 
 /**
  * Provides a dedicated drawing surface embedded inside of a view hierarchy.
@@ -165,6 +172,15 @@ public class SurfaceView extends View {
     boolean mReportDrawNeeded;
     private Translator mTranslator;
 
+    static int mScreenWidth = 0;
+    static int mScreenHeight = 0;
+    static int mGameSurfaceWidth =0;
+    static int mGameSurfaceHeight =0;
+    static int mScreenOrientation = -1;
+    static boolean mAdapterMode = false;
+    static public boolean mGameloftNeedCompat = false;
+    static public boolean mMotionEventMayNeedAdjust = false;
+
     private final ViewTreeObserver.OnPreDrawListener mDrawListener =
             new ViewTreeObserver.OnPreDrawListener() {
                 @Override
@@ -192,8 +208,90 @@ public class SurfaceView extends View {
         init();
     }
 
+    private void testGameloftNeedAdjust()
+    {
+        String              pckname;
+        String              substr = "gameloft";
+        ApplicationInfo     appInfo;
+        int                 index;
+        pckname = getContext().getPackageName();
+
+        //Log.d(TAG,"pckname = " + pckname);
+
+        index  = pckname.indexOf(substr);
+        if (index<=0)
+        {
+            return ;
+        }
+        PackageManager pm = getContext().getPackageManager();
+        mAdapterMode = Settings.System.getInt(getContext().getContentResolver(), Settings.System.DISPLAY_ADAPTION_ENABLE, 0) == 1;
+        try
+        {
+            appInfo = pm.getApplicationInfo(pckname, 0);
+            if (((appInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0))
+            {
+                mGameloftNeedCompat = false;
+            }
+            else if (index >= 0 && (mAdapterMode ==true))
+            {
+                WindowManager wm = (WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE);
+                Display mDisplay = wm.getDefaultDisplay();
+                DisplayInfo dispInfo = new DisplayInfo();
+                mDisplay.getDisplayInfo(dispInfo);
+                mScreenOrientation = dispInfo.rotation;
+                mScreenWidth	   = dispInfo.appWidth;
+                mScreenHeight	   = dispInfo.appHeight;
+                mGameSurfaceWidth  =800;
+                mGameSurfaceHeight =480;
+                mGameloftNeedCompat = true;
+            }
+            else
+            {
+                mGameloftNeedCompat = false;
+            }
+        } catch (NameNotFoundException e) {
+
+            mGameloftNeedCompat = false;
+        }
+
+        // Log.i(TAG, "mGameloftNeedCompat=" + mGameloftNeedCompat);
+
+    }
+
+    private void adjustWindowLayout()
+    {
+
+        if (mGameloftNeedCompat)
+        {
+            mLayout.x =  (mScreenWidth-mGameSurfaceWidth)>>1;
+            mLayout.y =  (mScreenHeight-mGameSurfaceHeight)>>1;
+            mLayout.width = mGameSurfaceWidth;
+            mLayout.height = mGameSurfaceHeight;
+        }
+    }
+
+
+    public static void adjustSurfaceViewMotion(MotionEvent evt)
+    {
+        if (mMotionEventMayNeedAdjust == false)
+        {
+            return ;
+        }
+        else
+        {
+            int offx = (mGameSurfaceWidth-mScreenWidth)>>1;
+            int offy = (mGameSurfaceHeight-mScreenHeight)>>1;
+            evt.offsetLocation(offx,offy);
+        }
+    }
+
     private void init() {
         setWillNotDraw(true);
+        mMotionEventMayNeedAdjust =false;
+        if (this instanceof GLSurfaceView)
+        {
+            testGameloftNeedAdjust();
+        }
     }
     
     /**
@@ -427,7 +525,8 @@ public class SurfaceView extends View {
         if (mTranslator != null) {
             mSurface.setCompatibilityTranslator(mTranslator);
         }
-        
+
+        testGameloftNeedAdjust();
         int myWidth = mRequestedWidth;
         if (myWidth <= 0) myWidth = getWidth();
         int myHeight = mRequestedHeight;
@@ -464,6 +563,7 @@ public class SurfaceView extends View {
                 mLayout.y = mTop;
                 mLayout.width = getWidth();
                 mLayout.height = getHeight();
+                adjustWindowLayout();
                 if (mTranslator != null) {
                     mTranslator.translateLayoutParamsInAppWindowToScreen(mLayout);
                 }
@@ -502,13 +602,24 @@ public class SurfaceView extends View {
                     mDrawingStopped = !visible;
     
                     if (DEBUG) Log.i(TAG, "Cur surface: " + mSurface);
-
-                    relayoutResult = mSession.relayout(
-                        mWindow, mWindow.mSeq, mLayout, mWidth, mHeight,
-                            visible ? VISIBLE : GONE,
-                            WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY,
-                            mWinFrame, mContentInsets,
-                            mVisibleInsets, mConfiguration, mNewSurface);
+                    if(mGameloftNeedCompat)
+                    {
+                        relayoutResult = mSession.relayout(
+                                mWindow, mWindow.mSeq, mLayout, 800,480,
+                                visible ? VISIBLE : GONE,
+                                        WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY,
+                                        mWinFrame, mContentInsets,
+                                        mVisibleInsets, mConfiguration, mNewSurface);
+                    }
+                    else
+                    {
+                        relayoutResult = mSession.relayout(
+                                mWindow, mWindow.mSeq, mLayout, mWidth, mHeight,
+                                visible ? VISIBLE : GONE,
+                                        WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY,
+                                        mWinFrame, mContentInsets,
+                                        mVisibleInsets, mConfiguration, mNewSurface);
+                    }
                     if ((relayoutResult & WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME) != 0) {
                         mReportDrawNeeded = true;
                     }
diff --git a/core/java/android/view/ViewRootImpl.java b/core/java/android/view/ViewRootImpl.java
index b6016e9..1e74218 100644
--- a/core/java/android/view/ViewRootImpl.java
+++ b/core/java/android/view/ViewRootImpl.java
@@ -687,9 +687,22 @@ public final class ViewRootImpl implements ViewParent,
         if (mTranslator != null) return;
 
         // Try to enable hardware acceleration if requested
-        final boolean hardwareAccelerated = 
+        boolean hardwareAccelerated = 
                 (attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
-
+        
+        if( SystemProperties.getBoolean("ro.hwa.force", false) ){
+        	int		index;
+    		String  pckname;
+    		String  substr = "com.android.cts.acceleration";
+    		pckname = context.getPackageName();
+    		    	
+    		index  = pckname.indexOf(substr);
+    		if(index == -1)
+    		{
+    			hardwareAccelerated= true;
+    		}  
+        }
+				
         if (hardwareAccelerated) {
             if (!HardwareRenderer.isAvailable()) {
                 return;
@@ -2746,6 +2759,7 @@ public final class ViewRootImpl implements ViewParent,
     private final static int MSG_DISPATCH_DONE_ANIMATING = 23;
     private final static int MSG_INVALIDATE_WORLD = 24;
     private final static int MSG_WINDOW_MOVED = 25;
+    private final static int MSG_BRING_TO_FRONT = 100;
 
     final class ViewRootHandler extends Handler {
         @Override
@@ -2799,6 +2813,8 @@ public final class ViewRootImpl implements ViewParent,
                     return "MSG_DISPATCH_DONE_ANIMATING";
                 case MSG_WINDOW_MOVED:
                     return "MSG_WINDOW_MOVED";
+		   case MSG_BRING_TO_FRONT:
+                    return "MSG_BRING_TO_FRONT";
             }
             return super.getMessageName(message);
         }
@@ -2958,6 +2974,9 @@ public final class ViewRootImpl implements ViewParent,
             case MSG_DIE:
                 doDie();
                 break;
+            case MSG_BRING_TO_FRONT:
+                doBringToFront();
+                break;
             case MSG_DISPATCH_KEY: {
                 KeyEvent event = (KeyEvent)msg.obj;
                 enqueueInputEvent(event, null, 0, true);
@@ -3176,6 +3195,7 @@ public final class ViewRootImpl implements ViewParent,
 
     private void deliverPointerEvent(QueuedInputEvent q) {
         final MotionEvent event = (MotionEvent)q.mEvent;
+        SurfaceView.adjustSurfaceViewMotion(event);
         final boolean isTouchEvent = event.isTouchEvent();
         if (mInputEventConsistencyVerifier != null) {
             if (isTouchEvent) {
@@ -4115,6 +4135,35 @@ public final class ViewRootImpl implements ViewParent,
         }
     }
 
+	public void bringToFront(boolean immediate) 
+	{
+        if (immediate) 
+		{
+            doBringToFront();
+        } 
+		else 
+		{
+            mHandler.sendEmptyMessage(MSG_BRING_TO_FRONT);
+        }
+    }
+
+	void doBringToFront() 
+	{
+        checkThread();
+        if (true) Log.d(TAG, "BRING in " + this + " of " + mSurface);
+        synchronized (this) 
+		{
+			try 
+			{
+            	mWindowSession.bringToFront(mWindow);
+	        } 
+			catch (RemoteException e) 
+			{
+			
+	        }
+        }
+    }
+
     public void requestUpdateConfiguration(Configuration config) {
         Message msg = mHandler.obtainMessage(MSG_UPDATE_CONFIGURATION, config);
         mHandler.sendMessage(msg);
diff --git a/core/java/android/view/VolumePanel.java b/core/java/android/view/VolumePanel.java
index 001d020..3e9a0de 100644
--- a/core/java/android/view/VolumePanel.java
+++ b/core/java/android/view/VolumePanel.java
@@ -148,12 +148,17 @@ public class VolumePanel extends Handler implements OnSeekBarChangeListener, Vie
                 R.string.volume_alarm,
                 R.drawable.ic_audio_alarm,
                 R.drawable.ic_audio_alarm_mute,
-                false),
+                true),
         MediaStream(AudioManager.STREAM_MUSIC,
                 R.string.volume_icon_description_media,
                 R.drawable.ic_audio_vol,
                 R.drawable.ic_audio_vol_mute,
                 true),
+        FMStream(AudioManager.STREAM_FM,
+                R.string.volume_icon_description_media,
+                R.drawable.ic_audio_vol,
+                R.drawable.ic_audio_vol_mute,
+                false),
         NotificationStream(AudioManager.STREAM_NOTIFICATION,
                 R.string.volume_icon_description_notification,
                 R.drawable.ic_audio_notification,
@@ -193,6 +198,7 @@ public class VolumePanel extends Handler implements OnSeekBarChangeListener, Vie
         StreamResources.RingerStream,
         StreamResources.VoiceStream,
         StreamResources.MediaStream,
+        StreamResources.FMStream,
         StreamResources.NotificationStream,
         StreamResources.AlarmStream,
         StreamResources.MasterStream,
diff --git a/core/java/android/view/WindowManager.java b/core/java/android/view/WindowManager.java
index 6a67d8b..070020f 100644
--- a/core/java/android/view/WindowManager.java
+++ b/core/java/android/view/WindowManager.java
@@ -804,6 +804,12 @@ public interface WindowManager extends ViewManager {
          * {@hide} */
         public static final int FLAG_SYSTEM_ERROR = 0x40000000;
 
+		/** Window flag: a special option intended for system dialogs.  When
+         * this flag is set, the window will demand focus unconditionally when
+         * it is created.
+         * {@hide} */
+        public static final int FLAG_BRING_TO_FRONT = 0x80000000;
+
         /**
          * Various behavioral options/flags.  Default is none.
          * 
@@ -881,7 +887,9 @@ public interface WindowManager extends ViewManager {
             @ViewDebug.FlagToString(mask = FLAG_SPLIT_TOUCH, equals = FLAG_SPLIT_TOUCH,
                     name = "FLAG_SPLIT_TOUCH"),
             @ViewDebug.FlagToString(mask = FLAG_HARDWARE_ACCELERATED, equals = FLAG_HARDWARE_ACCELERATED,
-                    name = "FLAG_HARDWARE_ACCELERATED")
+                    name = "FLAG_HARDWARE_ACCELERATED"),
+            @ViewDebug.FlagToString(mask = FLAG_BRING_TO_FRONT, equals = FLAG_BRING_TO_FRONT,
+                    name = "FLAG_BRING_TO_FRONT")
         })
         public int flags;
 
diff --git a/core/java/android/view/WindowManagerGlobal.java b/core/java/android/view/WindowManagerGlobal.java
index e8945aa..8436550 100644
--- a/core/java/android/view/WindowManagerGlobal.java
+++ b/core/java/android/view/WindowManagerGlobal.java
@@ -265,15 +265,24 @@ public final class WindowManagerGlobal {
         }
 
         final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;
-
-        view.setLayoutParams(wparams);
-
-        synchronized (mLock) {
-            int index = findViewLocked(view, true);
-            ViewRootImpl root = mRoots[index];
-            mParams[index] = wparams;
-            root.setLayoutParams(wparams, false);
-        }
+	if(((wparams.flags & WindowManager.LayoutParams.FLAG_BRING_TO_FRONT) == WindowManager.LayoutParams.FLAG_BRING_TO_FRONT))
+	{
+		 wparams.flags &= (~WindowManager.LayoutParams.FLAG_BRING_TO_FRONT);
+
+		 Log.v("WindowManager", "bringViewToFront view=" + view);
+		
		bringViewToFront(view);			 
+	}
+        else
+        {
+		    view.setLayoutParams(wparams);
+
+		    synchronized (mLock) {
+		        int index = findViewLocked(view, true);
+		        ViewRootImpl root = mRoots[index];
+		        mParams[index] = wparams;
+		        root.setLayoutParams(wparams, false);
+		    }
+	}
     }
 
     public void removeView(View view, boolean immediate) {
@@ -293,6 +302,16 @@ public final class WindowManagerGlobal {
         }
     }
 
+    public void bringViewToFront(View view) 
+    {
+        synchronized (this) 
+		{
+            int index = findViewLocked(view, true);
+            ViewRootImpl root = mRoots[index];
+            root.bringToFront(false);
+        }
+    }
+
     public void closeAll(IBinder token, String who, String what) {
         synchronized (mLock) {
             if (mViews == null)
diff --git a/core/java/android/view/WindowManagerPolicy.java b/core/java/android/view/WindowManagerPolicy.java
index 26739b3..80d6a24 100644
--- a/core/java/android/view/WindowManagerPolicy.java
+++ b/core/java/android/view/WindowManagerPolicy.java
@@ -950,6 +950,15 @@ public interface WindowManagerPolicy {
      */
     void exitKeyguardSecurely(OnKeyguardExitResult callback);
 
+	public void hideScreen(boolean enable);
+
+	public void showPowerCharge(int precent);
+
+	public void showBootInitLogo(int logo);
+
+	public void acquireBAView();
+
+	public void releaseBAView();
     /**
      * isKeyguardLocked
      *
diff --git a/core/java/android/view/WindowOrientationListener.java b/core/java/android/view/WindowOrientationListener.java
index 4c34dd4..9c3de70 100755
--- a/core/java/android/view/WindowOrientationListener.java
+++ b/core/java/android/view/WindowOrientationListener.java
@@ -378,9 +378,12 @@ public abstract class WindowOrientationListener {
         public void onSensorChanged(SensorEvent event) {
             // The vector given in the SensorEvent points straight up (towards the sky) under ideal
             // conditions (the phone is not accelerating).  I'll call this up vector elsewhere.
-            float x = event.values[ACCELEROMETER_DATA_X];
-            float y = event.values[ACCELEROMETER_DATA_Y];
-            float z = event.values[ACCELEROMETER_DATA_Z];
+            //float x = event.values[ACCELEROMETER_DATA_X];
+            //float y = event.values[ACCELEROMETER_DATA_Y];
+            //float z = event.values[ACCELEROMETER_DATA_Z];
+            float x = event.originalValue[ACCELEROMETER_DATA_X];
+            float y = event.originalValue[ACCELEROMETER_DATA_Y];
+            float z = event.originalValue[ACCELEROMETER_DATA_Z];
 
             if (LOG) {
                 Slog.v(TAG, "Raw acceleration vector: "
diff --git a/core/java/android/webkit/HTML5VideoFullScreen.java b/core/java/android/webkit/HTML5VideoFullScreen.java
index 9b93805..17ff148 100644
--- a/core/java/android/webkit/HTML5VideoFullScreen.java
+++ b/core/java/android/webkit/HTML5VideoFullScreen.java
@@ -119,7 +119,7 @@ public class HTML5VideoFullScreen extends HTML5VideoView
         @Override
         public void surfaceDestroyed(SurfaceHolder holder)
         {
-            mPlayingWhenDestroyed = mPlayer.isPlaying();
+            //mPlayingWhenDestroyed = mPlayer.isPlaying(); //. lys delete it for home-key
             pauseAndDispatch(mProxy);
             // We need to set the display to null before switching into inline
             // mode to avoid error.
diff --git a/core/java/android/webkit/HTML5VideoViewProxy.java b/core/java/android/webkit/HTML5VideoViewProxy.java
index a3d62ae..2a8581e 100644
--- a/core/java/android/webkit/HTML5VideoViewProxy.java
+++ b/core/java/android/webkit/HTML5VideoViewProxy.java
@@ -16,6 +16,8 @@
 
 package android.webkit;
 
+import android.app.Activity;
+import android.content.pm.ActivityInfo;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -63,6 +65,7 @@ class HTML5VideoViewProxy extends Handler
     private static final int BUFFERING_START     = 105;
     private static final int BUFFERING_END       = 106;
     private static final int ENTER_FULLSCREEN    = 107;
+    private static final int RESET               = 200;
 
     // Message Ids to be handled on the WebCore thread
     private static final int PREPARED          = 200;
@@ -72,6 +75,13 @@ class HTML5VideoViewProxy extends Handler
     private static final int STOPFULLSCREEN    = 204;
     private static final int RESTORESTATE      = 205;
 
+    private static final int VVMODE_NONE       = 0;
+    private static final int VVMODE_INLINE     = 1;
+    private static final int VVMODE_FULLSCREEN = 2;
+    private static final int VVMODE_FLOATING   = 3;
+	private static final boolean DISABLE_ROTATION = false;
+    private static int mVideoViewMode = VVMODE_NONE;
+    private static int mSavedOrient;
     // Timer thread -> UI thread
     private static final int TIMEUPDATE = 300;
 
@@ -95,6 +105,7 @@ class HTML5VideoViewProxy extends Handler
         // The VideoView instance. This is a singleton for now, at least until
         // http://b/issue?id=1973663 is fixed.
         private static HTML5VideoView mHTML5VideoView;
+        private static HTML5VideoFloating mHTML5VideoFloating = null;
 
         private static boolean isVideoSelfEnded = false;
 
@@ -143,7 +154,14 @@ class HTML5VideoViewProxy extends Handler
                 int savePosition = 0;
                 boolean canSkipPrepare = false;
                 boolean forceStart = false;
-                if (mHTML5VideoView != null) {
+				boolean floatingScreenMode = false;
+
+	            WebChromeClient client = webView.getWebChromeClient();
+	            if (client != null) {
+	                floatingScreenMode = client.getEnterFullScreenMode();
+				}
+                
+				if (mHTML5VideoView != null) {
                     // We don't allow enter full screen mode while the previous
                     // full screen video hasn't finished yet.
                     if (!mHTML5VideoView.fullScreenExited() && mHTML5VideoView.isFullScreenMode()) {
@@ -160,29 +178,56 @@ class HTML5VideoViewProxy extends Handler
                                 || playerState == HTML5VideoView.STATE_PLAYING)
                                 && !mHTML5VideoView.isFullScreenMode();
                     }
-                    if (!canSkipPrepare) {
+                    
+                    if (!canSkipPrepare || floatingScreenMode) {
                         mHTML5VideoView.reset();
                     } else {
                         forceStart = playerState == HTML5VideoView.STATE_PREPARING
                                 || playerState == HTML5VideoView.STATE_PLAYING;
                     }
                 }
-                mHTML5VideoView = new HTML5VideoFullScreen(proxy.getContext(),
-                        layerId, savePosition, canSkipPrepare);
-                mHTML5VideoView.setStartWhenPrepared(forceStart);
-                mCurrentProxy = proxy;
-                mHTML5VideoView.setVideoURI(url, mCurrentProxy);
-                mHTML5VideoView.enterFullScreenVideoState(layerId, proxy, webView);
+
+				if (floatingScreenMode) {
+					mHTML5VideoFloating = new HTML5VideoFloating(proxy.getContext(),
+                	      layerId, savePosition, canSkipPrepare);
+                	mVideoViewMode = VVMODE_FLOATING;
+                	mCurrentProxy = proxy;
+                	mHTML5VideoFloating.setVideoURI(url, mCurrentProxy);
+                	mHTML5VideoFloating.enterFullScreenVideoState(layerId, proxy, webView);
+				}
+				else {
+					if (DISABLE_ROTATION) {
+						Activity act = (Activity)proxy.getContext();
+						mSavedOrient = act.getRequestedOrientation();
+						act.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+					}
+		            mHTML5VideoView = new HTML5VideoFullScreen(proxy.getContext(),
+		                    layerId, savePosition, canSkipPrepare);
+		            mHTML5VideoView.setStartWhenPrepared(forceStart);
+		            mCurrentProxy = proxy;
+		            mHTML5VideoView.setVideoURI(url, mCurrentProxy);
+		            mHTML5VideoView.enterFullScreenVideoState(layerId, proxy, webView);
+		}
         }
 
         public static void exitFullScreenVideo(HTML5VideoViewProxy proxy,
                 WebViewClassic webView) {
-            if (!mHTML5VideoView.fullScreenExited() && mHTML5VideoView.isFullScreenMode()) {
-                WebChromeClient client = webView.getWebChromeClient();
-                if (client != null) {
-                    client.onHideCustomView();
-                }
-            }
+        	if (mVideoViewMode != VVMODE_FLOATING) {
+
+	            if (!mHTML5VideoView.fullScreenExited() && mHTML5VideoView.isFullScreenMode()) {
+	                WebChromeClient client = webView.getWebChromeClient();
+	                if (client != null) {
+	                    client.onHideCustomView();
+	                }
+	            }
+
+				if (DISABLE_ROTATION) {
+					Activity act = (Activity)proxy.getContext();
+					act.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
+				}
+        	}
+            
+            mVideoViewMode = VVMODE_INLINE;
         }
 
         // This is on the UI thread.
@@ -195,19 +240,25 @@ class HTML5VideoViewProxy extends Handler
             if (mHTML5VideoView != null) {
                 currentVideoLayerId = mHTML5VideoView.getVideoLayerId();
                 backFromFullScreenMode = mHTML5VideoView.fullScreenExited();
-
+                boolean isFloatingVideo = (mHTML5VideoFloating != null);
+                
+                if (isFloatingVideo) {
+                	mHTML5VideoFloating = null; //delete it
+                }
+                
                 // When playing video back to back in full screen mode,
                 // javascript will switch the src and call play.
                 // In this case, we can just reuse the same full screen view,
                 // and play the video after prepared.
-                if (mHTML5VideoView.isFullScreenMode()
+                if (isFloatingVideo || (mHTML5VideoView.isFullScreenMode()
                     && !backFromFullScreenMode
                     && currentVideoLayerId != videoLayerId
-                    && mCurrentProxy != proxy) {
+                    && mCurrentProxy != proxy)) {
                     mCurrentProxy = proxy;
                     mHTML5VideoView.setStartWhenPrepared(true);
                     mHTML5VideoView.setVideoURI(url, proxy);
                     mHTML5VideoView.reprepareData(proxy);
+                    mVideoViewMode = VVMODE_INLINE;
                     return;
                 }
             }
@@ -282,6 +333,12 @@ class HTML5VideoViewProxy extends Handler
             }
         }
 
+		public static void reset(HTML5VideoViewProxy proxy) {
+			if (mCurrentProxy == proxy && mHTML5VideoView != null) {
+                mHTML5VideoView.pauseAndDispatch(mCurrentProxy);
+                mHTML5VideoView.reset();
+            }
+		}
         public static void onPrepared() {
             if (!mHTML5VideoView.isFullScreenMode()) {
                 mHTML5VideoView.start();
@@ -402,6 +459,9 @@ class HTML5VideoViewProxy extends Handler
                     VideoPlayer.isVideoSelfEnded = true;
                 VideoPlayer.end();
                 break;
+			case RESET:
+				VideoPlayer.reset(this);
+				break;
             case ERROR: {
                 WebChromeClient client = mWebView.getWebChromeClient();
                 if (client != null) {
@@ -770,6 +830,11 @@ class HTML5VideoViewProxy extends Handler
         VideoPlayer.exitFullScreenVideo(this, mWebView);
     }
 
+	public void reset() {
+		Message message = obtainMessage(RESET);
+        sendMessage(message);
+    }
+
     /**
      * The factory for HTML5VideoViewProxy instances.
      * @param webViewCore is the WebViewCore that is requesting the proxy.
diff --git a/core/java/android/webkit/WebChromeClient.java b/core/java/android/webkit/WebChromeClient.java
index e93db09..b8da296 100644
--- a/core/java/android/webkit/WebChromeClient.java
+++ b/core/java/android/webkit/WebChromeClient.java
@@ -67,6 +67,12 @@ public class WebChromeClient {
         public void onCustomViewHidden();
     }
 
+    public boolean getEnterFullScreenMode() {
+        return false;
+	}
+
+	public void onShowFloatingVideoView(String path, int positon, CustomViewCallback callback) {};
+    
     /**
      * Notify the host application that the current page would
      * like to show a custom View.
diff --git a/core/java/android/webkit/WebViewClassic.java b/core/java/android/webkit/WebViewClassic.java
index ae56e6b..cc1d81b 100644
--- a/core/java/android/webkit/WebViewClassic.java
+++ b/core/java/android/webkit/WebViewClassic.java
@@ -61,6 +61,8 @@ import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
 import android.os.SystemClock;
+import android.os.PowerManager;
+import android.os.PowerManager.WakeLock;
 import android.security.KeyChain;
 import android.text.Editable;
 import android.text.InputType;
@@ -705,6 +707,7 @@ public final class WebViewClassic implements WebViewProvider, WebViewProvider.Sc
     ArrayList<Message> mBatchedTextChanges = new ArrayList<Message>();
     boolean mIsBatchingTextChanges = false;
     private long mLastEditScroll = 0;
+    private WakeLock mWakeLock = null;
 
     private static class OnTrimMemoryListener implements ComponentCallbacks2 {
         private static OnTrimMemoryListener sInstance = null;
@@ -7236,6 +7239,20 @@ public final class WebViewClassic implements WebViewProvider, WebViewProvider.Sc
     // If it needs to call the View system, it has to send message.
     //-------------------------------------------------------------------------
 
+    private void acquireWakeLock() {
+        if (mWakeLock == null) {
+            PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
+            mWakeLock = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, "flash_plugin");
+            mWakeLock.acquire();
+        }
+    }
+	
+    private void releaseWakeLock(){
+        if(mWakeLock != null && mWakeLock.isHeld()){
+            mWakeLock.release();
+            mWakeLock = null;
+        }
+    }
     /**
      * General handler to receive message coming from webkit thread
      */
@@ -7436,10 +7453,11 @@ public final class WebViewClassic implements WebViewProvider, WebViewProvider.Sc
                     mFullScreenHolder.setContentView(view);
                     mFullScreenHolder.show();
                     invalidate();
-
+		    		acquireWakeLock();
                     break;
                 }
                 case HIDE_FULLSCREEN:
+		    		releaseWakeLock();
                     dismissFullScreenMode();
                     break;
 
diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index 9e43749..e9339b7 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -234,6 +234,29 @@ public class ZygoteInit {
         preloadClasses();
         preloadResources();
     }
+    private static Thread mCThread = new Thread(new Runnable(){
+    	@Override
+    	public void run(){
+    		preloadClasses();
+    	}
+    });
+    
+    private static Thread mRThread = new Thread(new Runnable(){
+    	@Override
+    	public void run(){
+    		preloadResources();
+    	}
+    });
+    static void asyncPreload(){
+    	try{
+    		mCThread.start();
+    		mRThread.start();
+    		mCThread.join();
+    		mRThread.join();
+    	}catch(InterruptedException e){
+    		Log.e(TAG,"asyncPreload failed");
+    	}
+    }
 
     /**
      * Performs Zygote process initialization. Loads and initializes
@@ -526,7 +549,8 @@ public class ZygoteInit {
             registerZygoteSocket();
             EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,
                 SystemClock.uptimeMillis());
-            preload();
+            //preload();
+			 asyncPreload();
             EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,
                 SystemClock.uptimeMillis());
 
diff --git a/core/java/com/android/internal/os/storage/ExternalStorageFormatter.java b/core/java/com/android/internal/os/storage/ExternalStorageFormatter.java
index fb7f215..5d3ba51 100644
--- a/core/java/com/android/internal/os/storage/ExternalStorageFormatter.java
+++ b/core/java/com/android/internal/os/storage/ExternalStorageFormatter.java
@@ -50,6 +50,7 @@ public class ExternalStorageFormatter extends Service
 
     private boolean mFactoryReset = false;
     private boolean mAlwaysReset = false;
+	private boolean mRunOnce = true;
 
     StorageEventListener mStorageListener = new StorageEventListener() {
         @Override
@@ -83,7 +84,7 @@ public class ExternalStorageFormatter extends Service
         if (intent.getBooleanExtra(EXTRA_ALWAYS_RESET, false)) {
             mAlwaysReset = true;
         }
-
+		mRunOnce = true;
         mStorageVolume = intent.getParcelableExtra(StorageVolume.EXTRA_STORAGE_VOLUME);
 
         if (mProgressDialog == null) {
@@ -146,6 +147,10 @@ public class ExternalStorageFormatter extends Service
                 mStorageManager.getVolumeState(mStorageVolume.getPath());
         if (Environment.MEDIA_MOUNTED.equals(status)
                 || Environment.MEDIA_MOUNTED_READ_ONLY.equals(status)) {
+            if(!mRunOnce){
+				Log.d(TAG,"ExternalStorageFormatter only run once");
+				return;
+            }
             updateProgressDialog(R.string.progress_unmounting);
             IMountService mountService = getMountService();
             final String extStoragePath = mStorageVolume == null ?
@@ -182,6 +187,7 @@ public class ExternalStorageFormatter extends Service
                                 sendBroadcast(new Intent("android.intent.action.MASTER_CLEAR"));
                                 // Intent handling is asynchronous -- assume it will happen soon.
                                 stopSelf();
+								mRunOnce = false;
                                 return;
                             }
                         }
@@ -197,6 +203,7 @@ public class ExternalStorageFormatter extends Service
                             }
                         }
                         stopSelf();
+						mRunOnce = false;
                         return;
                     }
                 }.start();
diff --git a/core/java/com/android/internal/widget/LockPatternUtils.java b/core/java/com/android/internal/widget/LockPatternUtils.java
index 907b52a..06f30a9 100644
--- a/core/java/com/android/internal/widget/LockPatternUtils.java
+++ b/core/java/com/android/internal/widget/LockPatternUtils.java
@@ -1277,7 +1277,7 @@ public class LockPatternUtils {
     }
 
     /**
-     * @deprecated
+     * @deprecated updateEmergencyCallButtonState
      * @param button
      * @param phoneState
      * @param shown
diff --git a/core/jni/android/graphics/BitmapFactory.cpp b/core/jni/android/graphics/BitmapFactory.cpp
index 8823328..7ab7dfe 100644
--- a/core/jni/android/graphics/BitmapFactory.cpp
+++ b/core/jni/android/graphics/BitmapFactory.cpp
@@ -162,7 +162,7 @@ static jobject doDecode(JNIEnv* env, SkStream* stream, jobject padding,
     int sampleSize = 1;
 
     SkImageDecoder::Mode mode = SkImageDecoder::kDecodePixels_Mode;
-    SkBitmap::Config prefConfig = SkBitmap::kARGB_8888_Config;
+    SkBitmap::Config prefConfig = SkBitmap::kNo_Config;//SkBitmap::kARGB_8888_Config;
 
     bool doDither = true;
     bool isMutable = false;
diff --git a/core/jni/android_hardware_Camera.cpp b/core/jni/android_hardware_Camera.cpp
index 67d831c..cecc924 100644
--- a/core/jni/android_hardware_Camera.cpp
+++ b/core/jni/android_hardware_Camera.cpp
@@ -848,6 +848,32 @@ static void android_hardware_Camera_enableFocusMoveCallback(JNIEnv *env, jobject
     }
 }
 
+/**********************************************************************
+*
+*add for r/w file in the HAL of android 4.2.
+*
+*by fuqiang.
+*
+**********************************************************************/
+static void android_hardware_Camera_setFD(JNIEnv *env, jobject thiz, jobject fileDescriptor)
+{
+    ALOGV("setFD");
+    if (fileDescriptor == NULL) {
+        jniThrowException(env, "java/lang/IllegalArgumentException", NULL);
+        return;
+    }
+	
+    int fd = jniGetFDFromFileDescriptor(env, fileDescriptor);
+
+	sp<Camera> camera = get_native_camera(env, thiz, NULL);
+    if (camera == 0) return;
+
+    if (camera->setFd(fd) != NO_ERROR) {
+        jniThrowRuntimeException(env, "setFd failed");
+        return;
+    }
+}
+
 //-------------------------------------------------
 
 static JNINativeMethod camMethods[] = {
@@ -929,6 +955,9 @@ static JNINativeMethod camMethods[] = {
   { "enableFocusMoveCallback",
     "(I)V",
     (void *)android_hardware_Camera_enableFocusMoveCallback},
+  { "setFD",
+    "(Ljava/io/FileDescriptor;)V",
+    (void *)android_hardware_Camera_setFD},
 };
 
 struct field {
diff --git a/core/jni/android_view_MotionEvent.cpp b/core/jni/android_view_MotionEvent.cpp
index e69fb74..8aea8bc 100644
--- a/core/jni/android_view_MotionEvent.cpp
+++ b/core/jni/android_view_MotionEvent.cpp
@@ -155,8 +155,8 @@ static bool validatePointerCoordsObjArray(JNIEnv* env, jobjectArray pointerCoord
 
 static bool validatePointerIndex(JNIEnv* env, jint pointerIndex, size_t pointerCount) {
     if (pointerIndex < 0 || size_t(pointerIndex) >= pointerCount) {
-        jniThrowException(env, "java/lang/IllegalArgumentException",
-                "pointerIndex out of range");
+        //jniThrowException(env, "java/lang/IllegalArgumentException",
+        //        "pointerIndex out of range");
         return false;
     }
     return true;
diff --git a/core/jni/android_view_Surface.cpp b/core/jni/android_view_Surface.cpp
index 2767e94..6738265 100644
--- a/core/jni/android_view_Surface.cpp
+++ b/core/jni/android_view_Surface.cpp
@@ -800,6 +800,14 @@ static void nativeWriteToParcel(JNIEnv* env, jobject surfaceObj, jobject parcelO
     }
 }
 
+static jint nativeSetDisplayParameter(JNIEnv* env, jclass clazz,
+        jobject tokenObj, jint cmd, jint para0, jint para1, jint para2) {
+    sp<IBinder> token(ibinderForJavaObject(env, tokenObj));
+    if (token == NULL) return JNI_ERR;
+
+    return SurfaceComposerClient::setDisplayParameter(token, cmd, para0, para1, para2);
+}
+
 // ----------------------------------------------------------------------------
 
 static JNINativeMethod gSurfaceMethods[] = {
@@ -871,6 +879,8 @@ static JNINativeMethod gSurfaceMethods[] = {
             (void*)nativeReadFromParcel },
     {"nativeWriteToParcel", "(Landroid/os/Parcel;)V",
             (void*)nativeWriteToParcel },
+    {"nativeSetDisplayParameter", "(Landroid/os/IBinder;IIII)I",
+            (void*)nativeSetDisplayParameter },
 };
 
 int register_android_view_Surface(JNIEnv* env)
diff --git a/core/res/res/values-es/strings.xml b/core/res/res/values-es/strings.xml
index 824b42a..3d5cae4 100644
--- a/core/res/res/values-es/strings.xml
+++ b/core/res/res/values-es/strings.xml
@@ -145,7 +145,7 @@
     <string name="shutdown_progress" msgid="2281079257329981203">"Apagando..."</string>
     <string name="shutdown_confirm" product="tablet" msgid="3385745179555731470">"El tablet se apagará."</string>
     <string name="shutdown_confirm" product="default" msgid="649792175242821353">"El teléfono se apagará."</string>
-    <string name="shutdown_confirm_question" msgid="2906544768881136183">"¿Seguro que quieres apagar el teléfono?"</string>
+    <string name="shutdown_confirm_question" msgid="2906544768881136183">"¿Seguro que quieres apagar el dispositivo?"</string>
     <string name="reboot_safemode_title" msgid="7054509914500140361">"Reiniciar en modo seguro"</string>
     <string name="reboot_safemode_confirm" msgid="55293944502784668">"¿Quieres reiniciar el sistema en modo seguro? Se inhabilitarán todas las aplicaciones externas que hayas instalado. Esas aplicaciones se restaurarán la próxima vez que reinicies del sistema."</string>
     <string name="recent_tasks_title" msgid="3691764623638127888">"Reciente"</string>
diff --git a/core/res/res/values-fr/strings.xml b/core/res/res/values-fr/strings.xml
index 550e09c..d74c0ec 100644
--- a/core/res/res/values-fr/strings.xml
+++ b/core/res/res/values-fr/strings.xml
@@ -1450,7 +1450,7 @@
     <string name="kg_failed_attempts_almost_at_login" product="default" msgid="1437638152015574839">"Vous avez dessiné un schéma de déverrouillage incorrect à <xliff:g id="NUMBER_0">%d</xliff:g> reprises. Si vous échouez encore <xliff:g id="NUMBER_1">%d</xliff:g> fois, vous devrez déverrouiller votre téléphone à l\'aide d\'un compte de messagerie électronique."\n\n" Veuillez réessayer dans <xliff:g id="NUMBER_2">%d</xliff:g> secondes."</string>
     <string name="kg_text_message_separator" product="default" msgid="4160700433287233771">" — "</string>
     <string name="kg_reordering_delete_drop_target_text" msgid="7899202978204438708">"Supprimer"</string>
-    <string name="safe_media_volume_warning" product="default" msgid="7382971871993371648">"Augmenter le volume au-dessus du niveau de sécurité ?"\n"L\'écoute à un volume élevé pendant des périodes prolongées peut endommager votre audition."</string>
+    <string name="safe_media_volume_warning" product="default" msgid="7382971871993371648">"Voulez-vous augmenter le volume au dessus de ce seuil?"\n"L\'écoute prolongée à un haut niveau sonore peut endommager votre audition."</string>
     <string name="continue_to_enable_accessibility" msgid="1626427372316070258">"Pour activer l\'accessibilité, appuyez de manière prolongée avec deux doigts."</string>
     <string name="accessibility_enabled" msgid="1381972048564547685">"L\'accessibilité a bien été activée."</string>
     <string name="enable_accessibility_canceled" msgid="3833923257966635673">"Accessibilité annulée."</string>
diff --git a/core/res/res/values-ja/strings.xml b/core/res/res/values-ja/strings.xml
index f2ca7c6..af09156 100644
--- a/core/res/res/values-ja/strings.xml
+++ b/core/res/res/values-ja/strings.xml
@@ -142,6 +142,7 @@
     <string name="silent_mode_silent" msgid="319298163018473078">"着信音オフ"</string>
     <string name="silent_mode_vibrate" msgid="7072043388581551395">"バイブレーション着信"</string>
     <string name="silent_mode_ring" msgid="8592241816194074353">"着信音オン"</string>
+	<string name="boot_fast_mode"  msgid="1534245676198074353">"次回起動はクイック起動を利用します"</string>
     <string name="shutdown_progress" msgid="2281079257329981203">"シャットダウン中..."</string>
     <string name="shutdown_confirm" product="tablet" msgid="3385745179555731470">"タブレットの電源をOFFにします。"</string>
     <string name="shutdown_confirm" product="default" msgid="649792175242821353">"携帯電話の電源を切ります。"</string>
diff --git a/core/res/res/values-land/arrays.xml b/core/res/res/values-land/arrays.xml
index 240b9e4..fe22c1f 100644
--- a/core/res/res/values-land/arrays.xml
+++ b/core/res/res/values-land/arrays.xml
@@ -56,14 +56,14 @@
     </array>
 
     <array name="lockscreen_targets_with_camera">
-        <item>@null</item>
+        <item>@drawable/ic_lockscreen_engeltabmenu</item>
         <item>@drawable/ic_action_assist_generic</item>
         <item>@drawable/ic_lockscreen_camera</item>
         <item>@drawable/ic_lockscreen_unlock</item>
     </array>
 
     <array name="lockscreen_target_descriptions_with_camera">
-        <item>@null</item>
+        <item>@string/description_target_engeltabmenu</item>
         <item>@string/description_target_search</item>
         <item>@string/description_target_camera</item>
         <item>@string/description_target_unlock</item>
diff --git a/core/res/res/values-sw600dp-land/arrays.xml b/core/res/res/values-sw600dp-land/arrays.xml
index 5550216..404f782 100644
--- a/core/res/res/values-sw600dp-land/arrays.xml
+++ b/core/res/res/values-sw600dp-land/arrays.xml
@@ -59,14 +59,14 @@
         <item>@drawable/ic_lockscreen_unlock</item>
         <item>@drawable/ic_action_assist_generic</item>
         <item>@drawable/ic_lockscreen_camera</item>
-        <item>@null</item>
+		<item>@drawable/ic_lockscreen_engeltabmenu</item>
     </array>
 
     <array name="lockscreen_target_descriptions_with_camera">
         <item>@string/description_target_unlock</item>
         <item>@string/description_target_search</item>
-        <item>@string/description_target_camera</item>
-        <item>@null</item>
+        <item>@string/description_target_camera</item>       
+		<item>@string/description_target_engeltabmenu</item>
     </array>
 
 </resources>
diff --git a/core/res/res/values-zh-rCN/strings.xml b/core/res/res/values-zh-rCN/strings.xml
old mode 100644
new mode 100755
index 425c497..b90c7c9
--- a/core/res/res/values-zh-rCN/strings.xml
+++ b/core/res/res/values-zh-rCN/strings.xml
@@ -142,6 +142,7 @@
     <string name="silent_mode_silent" msgid="319298163018473078">"振铃器关闭"</string>
     <string name="silent_mode_vibrate" msgid="7072043388581551395">"振铃器振动"</string>
     <string name="silent_mode_ring" msgid="8592241816194074353">"振铃器开启"</string>
+	<string name="boot_fast_mode" msgid="1534245676198074353">"下次快速开机"</string>
     <string name="shutdown_progress" msgid="2281079257329981203">"正在关机..."</string>
     <string name="shutdown_confirm" product="tablet" msgid="3385745179555731470">"您的平板电脑会关闭。"</string>
     <string name="shutdown_confirm" product="default" msgid="649792175242821353">"您的手机将会关机。"</string>
@@ -1456,4 +1457,8 @@
     <string name="enable_accessibility_canceled" msgid="3833923257966635673">"已取消辅助功能。"</string>
     <string name="user_switched" msgid="3768006783166984410">"当前用户是<xliff:g id="NAME">%1$s</xliff:g>。"</string>
     <string name="owner_name" msgid="2716755460376028154">"机主"</string>
+    
+    <!-- add by dk -->
+    <string name="kg_status_time_am">上午</string>
+    <string name="kg_status_time_pm">下午</string>
 </resources>
diff --git a/core/res/res/values-zh-rTW/strings.xml b/core/res/res/values-zh-rTW/strings.xml
old mode 100644
new mode 100755
index 2ae304a..510bf93
--- a/core/res/res/values-zh-rTW/strings.xml
+++ b/core/res/res/values-zh-rTW/strings.xml
@@ -142,6 +142,7 @@
     <string name="silent_mode_silent" msgid="319298163018473078">"鈴聲關閉"</string>
     <string name="silent_mode_vibrate" msgid="7072043388581551395">"鈴聲震動"</string>
     <string name="silent_mode_ring" msgid="8592241816194074353">"鈴聲開啟"</string>
+    <string name="boot_fast_mode" msgid="1534245676198074353">"下次快速開機"</string>
     <string name="shutdown_progress" msgid="2281079257329981203">"關機中…"</string>
     <string name="shutdown_confirm" product="tablet" msgid="3385745179555731470">"您的平板電腦將會關機。"</string>
     <string name="shutdown_confirm" product="default" msgid="649792175242821353">"手機即將關機。"</string>
@@ -1456,4 +1457,7 @@
     <string name="enable_accessibility_canceled" msgid="3833923257966635673">"協助工具已取消。"</string>
     <string name="user_switched" msgid="3768006783166984410">"目前的使用者是 <xliff:g id="NAME">%1$s</xliff:g>。"</string>
     <string name="owner_name" msgid="2716755460376028154">"擁有者"</string>
+    <!-- add by dk -->
+    <string name="kg_status_time_am">上午</string>
+    <string name="kg_status_time_pm">下午</string>    
 </resources>
diff --git a/core/res/res/values/arrays.xml b/core/res/res/values/arrays.xml
index f7ff77b..99110c4 100644
--- a/core/res/res/values/arrays.xml
+++ b/core/res/res/values/arrays.xml
@@ -342,6 +342,10 @@
         <item>中文 (繁體)</item>
     </string-array>
 
+	<array name="quick_boot_mode">
+        <item>@string/boot_fast_mode</item>
+    </array>
+	
     <!-- Resources for GlowPadView in LockScreen -->
     <array name="lockscreen_targets_when_silent">
         <item>@drawable/ic_lockscreen_unlock</item>
@@ -358,10 +362,11 @@
     </array>
 
     <array name="lockscreen_direction_descriptions">
-        <item>@string/description_direction_right</item>
-        <item>@string/description_direction_up</item>
-        <item>@string/description_direction_left</item>
-        <item>@null</item>
+		<item>@string/description_direction_left</item>
+		<item>@string/description_direction_up</item>
+        <item>@string/description_direction_right</item>                
+        <item>@string/description_direction_down</item>
+		
     </array>
 
     <array name="lockscreen_targets_when_soundon">
@@ -382,14 +387,14 @@
         <item>@drawable/ic_lockscreen_unlock</item>
         <item>@drawable/ic_action_assist_generic</item>
         <item>@drawable/ic_lockscreen_camera</item>
-        <item>@null</item>
+        <item>@drawable/ic_lockscreen_engeltabmenu</item>
     </array>
 
     <array name="lockscreen_target_descriptions_with_camera">
         <item>@string/description_target_unlock</item>
         <item>@string/description_target_search</item>
         <item>@string/description_target_camera</item>
-        <item>@null</item>
+        <item>@string/description_target_engeltabmenu</item>
     </array>
 
     <array name="lockscreen_targets_unlock_only">
diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index cb7804c..c1f4117 100755
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -34,10 +34,12 @@
        <item><xliff:g id="id">mute</xliff:g></item>
        <item><xliff:g id="id">volume</xliff:g></item>
        <item><xliff:g id="id">wifi</xliff:g></item>
+       <item><xliff:g id="id">ethernet</xliff:g></item>
        <item><xliff:g id="id">cdma_eri</xliff:g></item>
        <item><xliff:g id="id">data_connection</xliff:g></item>
        <item><xliff:g id="id">phone_evdo_signal</xliff:g></item>
        <item><xliff:g id="id">phone_signal</xliff:g></item>
+       <item><xliff:g id="id">headset</xliff:g></item>
        <item><xliff:g id="id">battery</xliff:g></item>
        <item><xliff:g id="id">alarm_clock</xliff:g></item>
        <item><xliff:g id="id">secure</xliff:g></item>
@@ -485,7 +487,7 @@
 
     <!-- Display low battery warning when battery level dips to this value -->
     <!-- Display low battery warning when battery level dips to this value -->
-    <integer name="config_lowBatteryWarningLevel">15</integer>
+    <integer name="config_lowBatteryWarningLevel">10</integer>
 
     <!-- Close low battery warning when battery level reaches this value -->
     <integer name="config_lowBatteryCloseWarningLevel">20</integer>
@@ -646,6 +648,8 @@
     <string-array name="config_locationProviderPackageNames" translatable="false">
         <!-- The standard AOSP fused location provider -->
         <item>com.android.location.fused</item>
+        <!-- The Google Network Location Services location provider -->
+        <item>com.google.android.location</item>
     </string-array>
 
     <!-- Boolean indicating if current platform supports bluetooth SCO for off call
@@ -1024,4 +1028,25 @@
 
     <!-- Flag indicating if the speed up audio on mt call code should be executed -->
     <bool name="config_speed_up_audio_on_mt_calls">false</bool>
+         <!-- Package name providing network location support. -->
+    <string name="config_networkLocationProviderPackageName" translatable="false">com.google.android.location</string>
+ 
+     <!-- Package name providing geocoder API support. -->
+    <string name="config_geocodeProviderPackageName" translatable="false">com.google.android.location</string>
+    
+            <!-- Component name of the service providing network location support. -->
+    
+    <string name="config_networkLocationProvider">com.google.android.location.NetworkLocationProvider</string>
+
+    
+    <!-- Component name of the service providing geocoder API support. -->
+    
+    <string name="config_geocodeProvider">com.google.android.location.GeocodeProvider</string> 
+
+    <!-- default windowAnimationScale value: 0x, 0.5x, 1.0x, 1.5x, 2.0x, 5.0x, 10.0x
+         actual_windowAnimationScale = config_default_windowAnimationScale -->
+    <string name="config_default_windowAnimationScale">1.0</string>
+    <!-- default transitionAnimationScale value: 0x, 0.5x, 1.0x, 1.5x, 2.0x, 5.0x, 10.0x
+         actual_transitionAnimationScale = config_default_transitionAnimationScale -->
+    <string name="config_default_transitionAnimationScale">1.0</string>
 </resources>
diff --git a/core/res/res/values/dimens.xml b/core/res/res/values/dimens.xml
index 637128a5..019f445 100644
--- a/core/res/res/values/dimens.xml
+++ b/core/res/res/values/dimens.xml
@@ -340,4 +340,6 @@
     security mode. -->
     <dimen name="kg_small_widget_height">160dp</dimen>
 
+    <!-- add by dk -->
+    <dimen name="kg_status_am_pm_font_size">30dp</dimen>
 </resources>
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index 99fbf95..0b03ee2 100755
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -298,7 +298,8 @@
     <string name="silent_mode_vibrate">Ringer vibrate</string>
     <!-- Spoken description for ringer normal option. [CHAR LIMIT=NONE] -->
     <string name="silent_mode_ring">Ringer on</string>
-
+	<!--Shutdown Dilag Mutli Choice about quick boot mode-->
+	<string name="boot_fast_mode">The system will boot in Quick Boot Mode next time</string>
     <!-- Shutdown Progress Dialog. This is shown if the user chooses to power off the phone. -->
     <string name="shutdown_progress">Shutting down\u2026</string>
 
@@ -3689,6 +3690,8 @@
     <string name="description_target_soundon">Sound on</string>
     <!-- Description of the unlock target in the Slide unlock screen. [CHAR LIMIT=NONE] -->
     <string name="description_target_search">Search</string>
+	
+	<string name="description_target_engeltabmenu">EngelTabMenu</string>
 
     <!-- Description of the unlock handle in the Slide unlock screen for tablets. [CHAR LIMIT=NONE] -->
     <string name="description_target_unlock_tablet">Swipe to unlock.</string>
@@ -4005,4 +4008,7 @@
     <!-- Default name of the owner user [CHAR LIMIT=20] -->
     <string name="owner_name" msgid="3879126011135546571">Owner</string>
 
+    <!-- add by dk -->
+    <string name="kg_status_time_am">AM</string>
+    <string name="kg_status_time_pm">PM</string>
 </resources>
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 391320b..c70691b 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -1003,6 +1003,7 @@
   <java-symbol type="drawable" name="ic_lockscreen_silent" />
   <java-symbol type="drawable" name="ic_lockscreen_unlock" />
   <java-symbol type="drawable" name="ic_action_assist_generic" />
+  <java-symbol type="drawable" name="ic_lockscreen_engeltabmenu" />
   <java-symbol type="drawable" name="ic_lockscreen_alarm" />
   <java-symbol type="drawable" name="notification_bg" />
   <java-symbol type="drawable" name="notification_bg_low" />
@@ -1592,6 +1593,8 @@
   <java-symbol type="integer" name="config_screenBrightnessDim" />
   <java-symbol type="integer" name="config_shutdownBatteryTemperature" />
   <java-symbol type="integer" name="config_virtualKeyQuietTimeMillis" />
+  <java-symbol type="string" name="config_default_windowAnimationScale" />
+  <java-symbol type="string" name="config_default_transitionAnimationScale" />
   <java-symbol type="layout" name="am_compat_mode_dialog" />
   <java-symbol type="layout" name="launch_warning" />
   <java-symbol type="layout" name="safe_mode" />
@@ -1802,6 +1805,7 @@
   <java-symbol type="drawable" name="ic_volume" />
   <java-symbol type="drawable" name="stat_notify_sim_toolkit" />
 
+  <java-symbol type="array" name="quick_boot_mode" />
   <!-- From maps library -->
   <java-symbol type="array" name="maps_starting_lat_lng" />
   <java-symbol type="array" name="maps_starting_zoom" />
@@ -1819,4 +1823,9 @@
 
   <!-- From PinyinIME(!!!) -->
   <java-symbol type="string" name="inputMethod" />
+
+  <!-- add by dk -->
+  <java-symbol type="string" name="kg_status_time_am" />
+  <java-symbol type="string" name="kg_status_time_pm" />
+  <java-symbol type="dimen" name="kg_status_am_pm_font_size" />
 </resources>
diff --git a/include/androidfw/InputDevice.h b/include/androidfw/InputDevice.h
index 1aecf80..f772535 100644
--- a/include/androidfw/InputDevice.h
+++ b/include/androidfw/InputDevice.h
@@ -22,6 +22,19 @@
 
 namespace android {
 
+struct CtpName{
+    inline CtpName():
+        number (9),
+        default_name(String8("tp")),
+        ctp_name ({String8("gslX680"),String8("gt82x"),String8("ft5x_ts"),String8("sunxi-ts"),String8("gt818_ts"),
+                String8("gt811_ts"),String8("sw-ts"),String8("gt9xx"),String8("aw5306_ts")}){
+        }
+    int number;
+    String8 default_name;
+    String8 ctp_name[9];
+
+};
+
 /*
  * Identifies a device.
  */
diff --git a/libs/androidfw/InputDevice.cpp b/libs/androidfw/InputDevice.cpp
index fe891cb..099c805 100644
--- a/libs/androidfw/InputDevice.cpp
+++ b/libs/androidfw/InputDevice.cpp
@@ -24,6 +24,7 @@
 
 namespace android {
 
+CtpName name = CtpName();
 static const char* CONFIGURATION_FILE_DIR[] = {
         "idc/",
         "keylayout/",
@@ -78,6 +79,17 @@ String8 getInputDeviceConfigurationFilePathByDeviceIdentifier(
             return productPath;
         }
     }
+    int i = 0;
+    while(i < name.number){
+#if DEBUG_PROBE
+        LOGE("#######name = %s", name.default_name.string());
+        LOGE("#######ctp_name = %s", name.ctp_name[i].string());
+#endif
+        if(name.ctp_name[i] == deviceIdentifier.name){
+            return getInputDeviceConfigurationFilePathByName(name.default_name, type);
+        }
+        i++;
+    }
 
     // Try device name.
     return getInputDeviceConfigurationFilePathByName(deviceIdentifier.name, type);
diff --git a/media/java/android/media/AudioManager.java b/media/java/android/media/AudioManager.java
index 035b282..b0532d8 100644
--- a/media/java/android/media/AudioManager.java
+++ b/media/java/android/media/AudioManager.java
@@ -214,6 +214,8 @@ public class AudioManager {
     public static final int STREAM_DTMF = AudioSystem.STREAM_DTMF;
     /** @hide The audio stream for text to speech (TTS) */
     public static final int STREAM_TTS = AudioSystem.STREAM_TTS;
+    /** @hide The audio stream for text to FM */
+    public static final int STREAM_FM = AudioSystem.STREAM_FM;
     /** Number of audio streams */
     /**
      * @deprecated Use AudioSystem.getNumStreamTypes() instead
@@ -232,7 +234,8 @@ public class AudioManager {
         7,  // STREAM_BLUETOOTH_SCO
         7,  // STREAM_SYSTEM_ENFORCED
         11, // STREAM_DTMF
-        11  // STREAM_TTS
+        11,  // STREAM_TTS
+        11  // STREAM_FM
     };
 
     /**
@@ -1440,7 +1443,12 @@ public class AudioManager {
      * In communication audio mode. An audio/video chat or VoIP call is established.
      */
     public static final int MODE_IN_COMMUNICATION   = AudioSystem.MODE_IN_COMMUNICATION;
-
+    /**  
+     */
+    public static final int MODE_FACTORY_TEST       = AudioSystem.MODE_FACTORY_TEST;
+    /**  
+     */
+    public static final int MODE_FM		    = AudioSystem.MODE_FM;
     /* Routing bits for setRouting/getRouting API */
     /**
      * Routing audio output to earpiece
diff --git a/media/java/android/media/AudioService.java b/media/java/android/media/AudioService.java
index ef97d2a..8885b4d 100644
--- a/media/java/android/media/AudioService.java
+++ b/media/java/android/media/AudioService.java
@@ -59,6 +59,7 @@ import android.os.ServiceManager;
 import android.os.SystemProperties;
 import android.os.UserHandle;
 import android.os.Vibrator;
+import android.os.Process;
 import android.provider.Settings;
 import android.provider.Settings.System;
 import android.speech.RecognizerIntent;
@@ -215,6 +216,7 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
         {1, -1},  // FX_KEYPRESS_STANDARD
         {2, -1},  // FX_KEYPRESS_SPACEBAR
         {3, -1},  // FX_FOCUS_DELETE
+        {4, -1},   // FX_FOCUS_RETURN
         {4, -1}   // FX_FOCUS_RETURN
     };
 
@@ -229,7 +231,8 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
         15, // STREAM_BLUETOOTH_SCO
         7,  // STREAM_SYSTEM_ENFORCED
         15, // STREAM_DTMF
-        15  // STREAM_TTS
+        15,  // STREAM_TTS
+        15  // STREAM_FM
     };
     /* mStreamVolumeAlias[] indicates for each stream if it uses the volume settings
      * of another stream: This avoids multiplying the volume settings for hidden
@@ -249,7 +252,8 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
         AudioSystem.STREAM_BLUETOOTH_SCO,   // STREAM_BLUETOOTH_SCO
         AudioSystem.STREAM_RING,            // STREAM_SYSTEM_ENFORCED
         AudioSystem.STREAM_RING,            // STREAM_DTMF
-        AudioSystem.STREAM_MUSIC            // STREAM_TTS
+        AudioSystem.STREAM_MUSIC,            // STREAM_TTS
+        AudioSystem.STREAM_FM		     // STREAM_FM
     };
     private final int[] STREAM_VOLUME_ALIAS_NON_VOICE = new int[] {
         AudioSystem.STREAM_VOICE_CALL,      // STREAM_VOICE_CALL
@@ -261,7 +265,8 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
         AudioSystem.STREAM_BLUETOOTH_SCO,   // STREAM_BLUETOOTH_SCO
         AudioSystem.STREAM_MUSIC,           // STREAM_SYSTEM_ENFORCED
         AudioSystem.STREAM_MUSIC,           // STREAM_DTMF
-        AudioSystem.STREAM_MUSIC            // STREAM_TTS
+        AudioSystem.STREAM_MUSIC,            // STREAM_TTS
+        AudioSystem.STREAM_FM  		     // STREAM_FM
     };
     private int[] mStreamVolumeAlias;
 
@@ -276,7 +281,8 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
             "STREAM_BLUETOOTH_SCO",
             "STREAM_SYSTEM_ENFORCED",
             "STREAM_DTMF",
-            "STREAM_TTS"
+            "STREAM_TTS",
+            "STREAM_FM"
     };
 
     private final AudioSystem.ErrorCallback mAudioSystemCallback = new AudioSystem.ErrorCallback() {
@@ -428,7 +434,7 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
     public final static int STREAM_REMOTE_MUSIC = -200;
 
     // Devices for which the volume is fixed and VolumePanel slider should be disabled
-    final int mFixedVolumeDevices = AudioSystem.DEVICE_OUT_AUX_DIGITAL |
+    final int mFixedVolumeDevices = //AudioSystem.DEVICE_OUT_AUX_DIGITAL |
             AudioSystem.DEVICE_OUT_DGTL_DOCK_HEADSET |
             AudioSystem.DEVICE_OUT_ANLG_DOCK_HEADSET |
             AudioSystem.DEVICE_OUT_ALL_USB;
@@ -1469,6 +1475,14 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
         }
 
         int newModeOwnerPid = 0;
+	int callingPid = Binder.getCallingPid();
+	int callingUserID = Process.getUidForPid(callingPid);
+
+	//Log.d(TAG, "in audioService, CallingPid=" + callingPid + " getUidForPid=" + callingUserID );
+	if ((mode == AudioSystem.MODE_IN_CALL) && (callingUserID > 2000)){ //#define AID_SHELL    2000
+		mode = AudioSystem.MODE_NORMAL;
+	}
+
         synchronized(mSetModeDeathHandlers) {
             if (mode == AudioSystem.MODE_CURRENT) {
                 mode = mMode;
@@ -2481,6 +2495,10 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
                     if (DEBUG_VOL)
                         Log.v(TAG, "getActiveStreamType: Forcing STREAM_MUSIC stream active");
                     return AudioSystem.STREAM_MUSIC;
+                } else if (getMode() == AudioSystem.MODE_FM ) {
+                    if (DEBUG_VOL)
+                        Log.v(TAG, "getActiveStreamType: Forcing STREAM_FM stream active");
+                    return AudioSystem.STREAM_FM;
                 } else {
                     if (DEBUG_VOL)
                         Log.v(TAG, "getActiveStreamType: Forcing STREAM_RING b/c default");
diff --git a/media/java/android/media/AudioSystem.java b/media/java/android/media/AudioSystem.java
index dde2979..ca384e7 100644
--- a/media/java/android/media/AudioSystem.java
+++ b/media/java/android/media/AudioSystem.java
@@ -52,13 +52,15 @@ public class AudioSystem
     public static final int STREAM_DTMF = 8;
     /* @hide The audio stream for text to speech (TTS) */
     public static final int STREAM_TTS = 9;
+    /* @hide The audio stream for FM */
+    public static final int STREAM_FM = 10;
     /**
      * @deprecated Use {@link #numStreamTypes() instead}
      */
     public static final int NUM_STREAMS = 5;
 
     // Expose only the getter method publicly so we can change it in the future
-    private static final int NUM_STREAM_TYPES = 10;
+    private static final int NUM_STREAM_TYPES = 11;
     public static final int getNumStreamTypes() { return NUM_STREAM_TYPES; }
 
     /*
@@ -84,7 +86,9 @@ public class AudioSystem
     public static final int MODE_RINGTONE           = 1;
     public static final int MODE_IN_CALL            = 2;
     public static final int MODE_IN_COMMUNICATION   = 3;
-    public static final int NUM_MODES               = 4;
+    public static final int MODE_FACTORY_TEST	    = 4;
+    public static final int MODE_FM		    = 5;
+    public static final int NUM_MODES               = 6;
 
 
     /* Routing bits for the former setRouting/getRouting API */
diff --git a/media/java/android/media/MediaFile.java b/media/java/android/media/MediaFile.java
index 06d43a2..5ca0bc4 100644
--- a/media/java/android/media/MediaFile.java
+++ b/media/java/android/media/MediaFile.java
@@ -73,8 +73,11 @@ public class MediaFile {
     
     // More video file types
     public static final int FILE_TYPE_MP2PS   = 200;
+    public static final int FILE_TYPE_CEDARV  = 201;
     private static final int FIRST_VIDEO_FILE_TYPE2 = FILE_TYPE_MP2PS;
-    private static final int LAST_VIDEO_FILE_TYPE2 = FILE_TYPE_MP2PS;
+    private static final int LAST_VIDEO_FILE_TYPE2 = FILE_TYPE_CEDARV;
+    // More audio file types
+    private static final int FILE_TYPE_CEDARA = 300;
 
     // Image file types
     public static final int FILE_TYPE_JPEG    = 31;
@@ -177,15 +180,25 @@ public class MediaFile {
         addFileType("WAV", FILE_TYPE_WAV, "audio/x-wav", MtpConstants.FORMAT_WAV);
         addFileType("AMR", FILE_TYPE_AMR, "audio/amr");
         addFileType("AWB", FILE_TYPE_AWB, "audio/amr-wb");
-        if (isWMAEnabled()) {
+        //if (isWMAEnabled()) {
             addFileType("WMA", FILE_TYPE_WMA, "audio/x-ms-wma", MtpConstants.FORMAT_WMA);
-        }
+        //}
         addFileType("OGG", FILE_TYPE_OGG, "audio/ogg", MtpConstants.FORMAT_OGG);
         addFileType("OGG", FILE_TYPE_OGG, "application/ogg", MtpConstants.FORMAT_OGG);
         addFileType("OGA", FILE_TYPE_OGG, "application/ogg", MtpConstants.FORMAT_OGG);
         addFileType("AAC", FILE_TYPE_AAC, "audio/aac", MtpConstants.FORMAT_AAC);
         addFileType("AAC", FILE_TYPE_AAC, "audio/aac-adts", MtpConstants.FORMAT_AAC);
         addFileType("MKA", FILE_TYPE_MKA, "audio/x-matroska");
+        
+        addFileType("APE", FILE_TYPE_CEDARA, "audio/cedara");
+        //addFileType("FLAC",FILE_TYPE_CEDARA, "audio/cedara");
+        addFileType("AC3", FILE_TYPE_CEDARA, "audio/cedara");
+        addFileType("DTS", FILE_TYPE_CEDARA, "audio/cedara");
+        addFileType("OMG", FILE_TYPE_CEDARA, "audio/cedara");
+        addFileType("M4R", FILE_TYPE_CEDARA, "audio/cedara");
+        //addFileType("RA",  FILE_TYPE_CEDARA, "audio/cedara");
+        addFileType("MP1", FILE_TYPE_CEDARA, "audio/cedara");
+        addFileType("MP2", FILE_TYPE_CEDARA, "audio/cedara");
  
         addFileType("MID", FILE_TYPE_MID, "audio/midi");
         addFileType("MIDI", FILE_TYPE_MID, "audio/midi");
@@ -208,12 +221,25 @@ public class MediaFile {
         addFileType("MKV", FILE_TYPE_MKV, "video/x-matroska");
         addFileType("WEBM", FILE_TYPE_WEBM, "video/webm");
         addFileType("TS", FILE_TYPE_MP2TS, "video/mp2ts");
+		addFileType("TP", FILE_TYPE_MP2TS, "video/mp2ts");
+		addFileType("M2TS",FILE_TYPE_MP2TS, "video/mp2ts");
         addFileType("AVI", FILE_TYPE_AVI, "video/avi");
+        
+		addFileType("RMVB",FILE_TYPE_CEDARV, "video/cedarx");
+		addFileType("RM",  FILE_TYPE_CEDARV, "video/cedarx");
+		addFileType("AVI", FILE_TYPE_CEDARV, "video/cedarx");
+		addFileType("MOV", FILE_TYPE_CEDARV, "video/cedarx");
+		addFileType("FLV", FILE_TYPE_CEDARV, "video/cedarx");
+		addFileType("F4V", FILE_TYPE_CEDARV, "video/cedarx");
+		addFileType("VOB", FILE_TYPE_CEDARV, "video/cedarx");
+		addFileType("PMP", FILE_TYPE_CEDARV, "video/cedarx");
+		addFileType("3DM", FILE_TYPE_CEDARV, "video/cedarx");
+		addFileType("3DV", FILE_TYPE_CEDARV, "video/cedarx");
 
-        if (isWMVEnabled()) {
+        //if (isWMVEnabled()) {
             addFileType("WMV", FILE_TYPE_WMV, "video/x-ms-wmv", MtpConstants.FORMAT_WMV);
             addFileType("ASF", FILE_TYPE_ASF, "video/x-ms-asf");
-        }
+        //}
 
         addFileType("JPG", FILE_TYPE_JPEG, "image/jpeg", MtpConstants.FORMAT_EXIF_JPEG);
         addFileType("JPEG", FILE_TYPE_JPEG, "image/jpeg", MtpConstants.FORMAT_EXIF_JPEG);
@@ -250,7 +276,8 @@ public class MediaFile {
         return ((fileType >= FIRST_AUDIO_FILE_TYPE &&
                 fileType <= LAST_AUDIO_FILE_TYPE) ||
                 (fileType >= FIRST_MIDI_FILE_TYPE &&
-                fileType <= LAST_MIDI_FILE_TYPE));
+                fileType <= LAST_MIDI_FILE_TYPE) ||
+                fileType == FILE_TYPE_CEDARA);
     }
 
     public static boolean isVideoFileType(int fileType) {
diff --git a/media/java/android/media/MediaMetadataRetriever.java b/media/java/android/media/MediaMetadataRetriever.java
index cc59d02..63515f7 100644
--- a/media/java/android/media/MediaMetadataRetriever.java
+++ b/media/java/android/media/MediaMetadataRetriever.java
@@ -59,22 +59,27 @@ public class MediaMetadataRetriever
      * @throws IllegalArgumentException If the path is invalid.
      */
     public void setDataSource(String path) throws IllegalArgumentException {
-        FileInputStream is = null;
-        try {
-            is = new FileInputStream(path);
-            FileDescriptor fd = is.getFD();
-            setDataSource(fd, 0, 0x7ffffffffffffffL);
-        } catch (FileNotFoundException fileEx) {
-            throw new IllegalArgumentException();
-        } catch (IOException ioEx) {
-            throw new IllegalArgumentException();
+    	if(false){
+	        FileInputStream is = null;
+	        try {
+	            is = new FileInputStream(path);
+	            FileDescriptor fd = is.getFD();
+	            setDataSource(fd, 0, 0x7ffffffffffffffL);
+	        } catch (FileNotFoundException fileEx) {
+	            throw new IllegalArgumentException();
+	        } catch (IOException ioEx) {
+	            throw new IllegalArgumentException();
+	        }
+	
+	        try {
+	            if (is != null) {
+	                is.close();
+	            }
+	        } catch (Exception e) {}
+        }
+        else {
+        	_setDataSource(path, null, null);
         }
-
-        try {
-            if (is != null) {
-                is.close();
-            }
-        } catch (Exception e) {}
     }
 
     /**
diff --git a/media/java/android/media/MediaPlayer.java b/media/java/android/media/MediaPlayer.java
index ef0da3a..8f1e56f 100644
--- a/media/java/android/media/MediaPlayer.java
+++ b/media/java/android/media/MediaPlayer.java
@@ -545,6 +545,14 @@ public class MediaPlayer
      */
     public static final boolean BYPASS_METADATA_FILTER = false;
 
+    /* add by Gary. start {{----------------------------------- */
+    /**
+    *  screen name
+    */
+    public static final int MASTER_SCREEN = 0;
+    public static final int SLAVE_SCREEN  = 1;
+    /* add by Gary. end   -----------------------------------}} */
+    
     static {
         System.loadLibrary("media_jni");
         native_init();
@@ -949,7 +957,8 @@ public class MediaPlayer
     private void setDataSource(String path, String[] keys, String[] values)
             throws IOException, IllegalArgumentException, SecurityException, IllegalStateException {
         File file = new File(path);
-        if (file.exists()) {
+        //if (file.exists()) {
+        if (false) {
             FileInputStream is = new FileInputStream(file);
             FileDescriptor fd = is.getFD();
             setDataSource(fd);
@@ -1953,6 +1962,7 @@ public class MediaPlayer
     private static final int MEDIA_TIMED_TEXT = 99;
     private static final int MEDIA_ERROR = 100;
     private static final int MEDIA_INFO = 200;
+	private static final int MEDIA_SOURCE_DETECTED = 234;	//Add by Bevis.
 
     private class EventHandler extends Handler
     {
@@ -2035,6 +2045,20 @@ public class MediaPlayer
             case MEDIA_NOP: // interface test message - ignore
                 break;
 
+			/*Start by Bevis. Detect http data source from other application.*/
+			case MEDIA_SOURCE_DETECTED:
+                if (mDlnaSourceDetector != null && msg.obj != null){
+                	if(msg.obj instanceof Parcel){
+	                	Parcel parcel = (Parcel)msg.obj;
+//	                	parcel.setDataPosition(0);
+	                	String url = parcel.readString();
+	                	Log.d(TAG, "######MEDIA_SOURCE_DETECTED! url = " + url);
+	                	mDlnaSourceDetector.onSourceDetected(url);
+                	}
+				}
+                return;
+			/*End by Bevis. Detect http data source from other application. */	
+
             default:
                 Log.e(TAG, "Unknown message type " + msg.what);
                 return;
@@ -2265,6 +2289,11 @@ public class MediaPlayer
      */
     public static final int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK = 200;
 
+	/* add by eric_wang. start {{----------------------------------- */
+	/* 2013-05-07 15:07:00 */
+	public static final int MEDIA_ERROR_OUT_OF_MEMORY = 900;
+    /* add by eric_wang. end -----------------------------------}}*/
+
     /** File or network related operation errors. */
     public static final int MEDIA_ERROR_IO = -1004;
     /** Bitstream is not conforming to the related coding standard or file spec. */
@@ -2430,4 +2459,632 @@ public class MediaPlayer
         return (mode == VIDEO_SCALING_MODE_SCALE_TO_FIT ||
                 mode == VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING);
     }
+    /* add by Gary. start {{----------------------------------- */
+    public static native void setScreen(int screen) throws IllegalStateException;
+    public static native int  getScreen();
+    public static native boolean  isPlayingVideo();
+    /* add by Gary. end   -----------------------------------}} */
+
+    /* add by Gary. start {{----------------------------------- */
+    /* 2011-9-13 9:50:50 */
+    /* expend interfaces about subtitle, track and so on */
+    public static final int SUBTITLE_TYPE_TEXT = 0;
+    public static final int SUBTITLE_TYPE_BITMAP = 1;
+    
+    public static class SubInfo{
+    	public byte[]  name;
+    	public String  charset;
+    	public int     type;   // text or bitmap
+    	
+    	public SubInfo(byte[] oName, String oCharset, int oType){
+    	    name = oName;
+    	    charset = oCharset;
+    	    type = oType;
+        }
+    };
+
+    /**
+     * Get the subtitle list of the current playing video.
+     * <p>
+     * 
+     * @return subtitle list. null means there is no subtitle.
+     */
+    public native SubInfo[] getSubList();
+    
+    /**
+     * get the index of the current showing subtitle in the subtitle list.
+     * <p>
+     * 
+     * @return the index of the current showing subtitle in the subtitle list. <0 means no subtitle.
+     */
+    public native int getCurSub();
+    
+    /**
+     * switch another subtitle to show.
+     * <p>
+     * 
+     * @param index the subtitle¡¯s index in the subtitle list¡£
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int switchSub(int index);
+    
+    /**
+     *@deprecated Use {@link #setGlobalSubGate(boolean)} instead     
+     * show or hide a subitle.
+     * <p>
+     * 
+     * @param showSub  whether to show subtitle or not
+     * @return ==0 means successful, !=0 means failed.
+     */
+    @Deprecated
+    public int setSubGate(boolean showSub){
+        Log.d(TAG,"Deprecated setSubGate()");
+        return setGlobalSubGate(showSub);
+    }
+    
+    /**
+     *@deprecated Use {@link #getGlobalSubGate()} instead   
+     * check whether subtitles is allowed showing.
+     * <p>
+     * 
+     * @return true if subtitles is allowed showing, false otherwise.
+     */
+    @Deprecated
+    public boolean getSubGate(){
+        Log.d(TAG,"Deprecated getSubGate()");
+        return getGlobalSubGate();
+    }
+    
+    /**
+     * Set the subtitle¡¯s color.
+     * <p>
+     * 
+     * @param color  subtitle¡¯s color.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setSubColor(int color); 
+    
+    /**
+     * Get the subtitle¡¯s color.
+     * <p>
+     * 
+     * @return the subtitle¡¯s color.
+     */
+    public native int getSubColor(); 
+    
+    /**
+     * Set the subtitle frame¡¯s color.
+     * <p>
+     * 
+     * @param color  subtitle frame¡¯s color.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setSubFrameColor(int color); 
+    
+    /**
+     * Get the subtitle frame¡¯s color.
+     * <p>
+     * 
+     * @return the subtitle frame¡¯s color.
+     */
+    public native int getSubFrameColor();
+    
+    /**
+     * Set the subtitle¡¯s font size.
+     * <p>
+     * 
+     * @param size  font size in pixel.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setSubFontSize(int size); 
+    
+    /**
+     * Get the subtitle¡¯s font size.
+     * <p>
+     * 
+     * @return the subtitle¡¯s font size. <0 means failed.
+     */
+    public native int getSubFontSize(); 
+    
+    /**
+     * Set the subtitle¡¯s charset. If the underlying mediaplayer can absolutely parse the charset 
+     * of the subtitles, still use the parsed charset; otherwise, use the charset argument.
+     * <p>
+     * 
+     * @param charset  the canonical name of a charset.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setSubCharset(String charset);
+    
+    /**
+    * Get the subtitle¡¯s charset.
+    * <p>
+    * 
+    * @return the canonical name of a charset.
+    */
+    public native String getSubCharset(); 
+    
+    /**
+     * Set the subtitle¡¯s position vertically in the screen.
+     * <p>
+     * 
+     * @param percent  ×ÖÄ»ÏÂÑØ¾àÀëÆÁÄ»ÏÂÑØµÄ¾àÀëÕ¼Õû¸öÆÁÄ»¸ß¶ÈµÄ°Ù·Ö±È¡£ÕâÊÇÒ»¸öÕûÊýÖµ£¬Æ©ÈçËµ£¬10%£¬²ÎÊýÓ¦¸ÃÌî10.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setSubPosition(int percent); 
+    
+    /**
+     * Get the subtitle¡¯s position vertically in the screen.
+     * <p>
+     * 
+     * @return percent  ×ÖÄ»ÏÂÑØ¾àÀëÆÁÄ»ÏÂÑØµÄ¾àÀëÕ¼Õû¸öÆÁÄ»¸ß¶ÈµÄ°Ù·Ö±È¡£ÕâÊÇÒ»¸öÕûÊýÖµ£¬Æ©ÈçËµ£¬10%£¬²ÎÊý·µ»Ø10.
+     */
+    public native int getSubPosition(); 
+    
+    /**
+     * Set the subtitle¡¯s delay time.
+     * <p>
+     * 
+     * @param time delay time in milliseconds. It can be <0.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setSubDelay(int time); 
+    
+    /**
+     * Get the subtitle¡¯s delay time.
+     * <p>
+     * 
+     * @return delay time in milliseconds.
+     */
+    public native int getSubDelay();
+    
+    public static class TrackInfoVendor{
+    	public byte[]  name;
+    	public String  charset;
+
+    	public TrackInfoVendor(byte[] oName, String oCharset){
+    	    name = oName;
+    	    charset = oCharset;
+        }
+    };
+    /**
+     * Get the track list of the current playing video.
+     * <p>
+     * 
+     * @return track list. null means there is no track.
+     */
+    public native TrackInfoVendor[] getTrackList();
+    
+    /**
+     * get the index of the current track in the track list.
+     * <p>
+     * 
+     * @return the index of the current track in the track list. <0 means no track.
+     */
+    public native int getCurTrack();
+
+    /**
+     * switch another track to play.
+     * <p>
+     * 
+     * @param index the track¡¯s index in the track list¡£
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int switchTrack(int index);
+    
+    /**
+     * charset list
+     */
+    public static final String CHARSET_UNKNOWN                   = "UNKNOWN";                       //ÎÞ·¨Ê¶±ð³öÀ´µÄ×Ö·û¼¯
+    public static final String CHARSET_BIG5                      = "Big5";                          //·±ÌåÖÐÎÄ
+    public static final String CHARSET_BIG5_HKSCS                = "Big5-HKSCS";                    //
+    public static final String CHARSET_BOCU_1                    = "BOCU-1";                        //
+    public static final String CHARSET_CESU_8                    = "CESU-8";                        //
+    public static final String CHARSET_CP864                     = "cp864";                         //
+    public static final String CHARSET_EUC_JP                    = "EUC-JP";                        //
+    public static final String CHARSET_EUC_KR                    = "EUC-KR";                        //
+    public static final String CHARSET_GB18030                   = "GB18030";                       //
+    public static final String CHARSET_GBK                       = "GBK";                           //¼òÌåÖÐÎÄ
+    public static final String CHARSET_HZ_GB_2312                = "HZ-GB-2312";                    //
+    public static final String CHARSET_ISO_2022_CN               = "ISO-2022-CN";                   //
+    public static final String CHARSET_ISO_2022_CN_EXT           = "ISO-2022-CN-EXT";               //
+    public static final String CHARSET_ISO_2022_JP               = "ISO-2022-JP";                   //
+    public static final String CHARSET_ISO_2022_KR               = "ISO-2022-KR";                   //º«ÎÄ
+    public static final String CHARSET_ISO_8859_1                = "ISO-8859-1";                    //Î÷Å·ÓïÏµ
+    public static final String CHARSET_ISO_8859_10               = "ISO-8859-10";                   //±±Å·Ë¹¿°µÄÄÉÎ¬ÑÇÓïÏµ
+    public static final String CHARSET_ISO_8859_13               = "ISO-8859-13";                   //²¨ÂÞµÄº£ÓïÏµ                  
+    public static final String CHARSET_ISO_8859_14               = "ISO-8859-14";                   //¿­¶ûÌØÈËÓïÏµ                  
+    public static final String CHARSET_ISO_8859_15               = "ISO-8859-15";                   //À©Õ¹ÁË·¨ÓïºÍ·ÒÀ¼ÓïµÄÎ÷Å·ÓïÏµ  
+    public static final String CHARSET_ISO_8859_16               = "ISO-8859-16";                   //À©Õ¹µÄ¶«ÄÏÅ·ÓïÏµ   
+    public static final String CHARSET_ISO_8859_2                = "ISO-8859-2";                    //ÖÐÅ·ÓïÑÔ          
+    public static final String CHARSET_ISO_8859_3                = "ISO-8859-3";                    //ÄÏÅ·ÓïÑÔ          
+    public static final String CHARSET_ISO_8859_4                = "ISO-8859-4";                    //±±Å·ÓïÑÔ          
+    public static final String CHARSET_ISO_8859_5                = "ISO-8859-5";                    //Î÷Àï¶û×ÖÄ¸        
+    public static final String CHARSET_ISO_8859_6                = "ISO-8859-6";                    //°¢À­²®Óï          
+    public static final String CHARSET_ISO_8859_7                = "ISO-8859-7";                    //Ï£À°Óï            
+    public static final String CHARSET_ISO_8859_8                = "ISO-8859-8";                    //Ï£²®À´Óï
+    public static final String CHARSET_ISO_8859_9                = "ISO-8859-9";                    //ÍÁ¶úÆäÓï  
+    public static final String CHARSET_KOI8_R                    = "KOI8-R";                        //¶íÎÄ
+    public static final String CHARSET_KOI8_U                    = "KOI8-U";                        //
+    public static final String CHARSET_MACINTOSH                 = "macintosh";                     //
+    public static final String CHARSET_SCSU                      = "SCSU";                          //
+    public static final String CHARSET_SHIFT_JIS                 = "Shift_JIS";                     //ÈÕÎÄ
+    public static final String CHARSET_TIS_620                   = "TIS-620";                       //Ì©ÎÄ
+    public static final String CHARSET_US_ASCII                  = "US-ASCII";                      //
+    public static final String CHARSET_UTF_16                    = "UTF-16";                        //
+    public static final String CHARSET_UTF_16BE                  = "UTF-16BE";                      //UTF16 big endian
+    public static final String CHARSET_UTF_16LE                  = "UTF-16LE";                      //UTF16 little endian
+    public static final String CHARSET_UTF_32                    = "UTF-32";                        //
+    public static final String CHARSET_UTF_32BE                  = "UTF-32BE";                      //
+    public static final String CHARSET_UTF_32LE                  = "UTF-32LE";                      //
+    public static final String CHARSET_UTF_7                     = "UTF-7";                         //
+    public static final String CHARSET_UTF_8                     = "UTF-8";                         //UTF8
+    public static final String CHARSET_WINDOWS_1250              = "windows-1250";                  //ÖÐÅ·                 
+    public static final String CHARSET_WINDOWS_1251              = "windows-1251";                  //Î÷Àï¶ûÎÄ             
+    public static final String CHARSET_WINDOWS_1252              = "windows-1252";                  //ÍÁ¶úÆäÓï
+    public static final String CHARSET_WINDOWS_1253              = "windows-1253";                  //Ï£À°ÎÄ     
+    public static final String CHARSET_WINDOWS_1254              = "windows-1254";                  //Î÷Å·ÓïÏµ
+    public static final String CHARSET_WINDOWS_1255              = "windows-1255";                  //Ï£²®À´ÎÄ             
+    public static final String CHARSET_WINDOWS_1256              = "windows-1256";                  //°¢À­²®ÎÄ   
+    public static final String CHARSET_WINDOWS_1257              = "windows-1257";                  //²¨ÂÞµÄº£ÎÄ 
+    public static final String CHARSET_WINDOWS_1258              = "windows-1258";                  //Ô½ÄÏ       
+    public static final String CHARSET_X_DOCOMO_SHIFT_JIS_2007   = "x-docomo-shift_jis-2007";       //
+    public static final String CHARSET_X_GSM_03_38_2000          = "x-gsm-03.38-2000";              //
+    public static final String CHARSET_X_IBM_1383_P110_1999      = "x-ibm-1383_P110-1999";          //
+    public static final String CHARSET_X_IMAP_MAILBOX_NAME       = "x-IMAP-mailbox-name";           //
+    public static final String CHARSET_X_ISCII_BE                = "x-iscii-be";                    //
+    public static final String CHARSET_X_ISCII_DE                = "x-iscii-de";                    //
+    public static final String CHARSET_X_ISCII_GU                = "x-iscii-gu";                    //
+    public static final String CHARSET_X_ISCII_KA                = "x-iscii-ka";                    //
+    public static final String CHARSET_X_ISCII_MA                = "x-iscii-ma";                    //
+    public static final String CHARSET_X_ISCII_OR                = "x-iscii-or";                    //
+    public static final String CHARSET_X_ISCII_PA                = "x-iscii-pa";                    //
+    public static final String CHARSET_X_ISCII_TA                = "x-iscii-ta";                    //
+    public static final String CHARSET_X_ISCII_TE                = "x-iscii-te";                    //
+    public static final String CHARSET_X_ISO_8859_11_2001        = "x-iso-8859_11-2001";            //
+    public static final String CHARSET_X_JAVAUNICODE             = "x-JavaUnicode";                 //
+    public static final String CHARSET_X_KDDI_SHIFT_JIS_2007     = "x-kddi-shift_jis-2007";         //
+    public static final String CHARSET_X_MAC_CYRILLIC            = "x-mac-cyrillic";                //
+    public static final String CHARSET_X_SOFTBANK_SHIFT_JIS_2007 = "x-softbank-shift_jis-2007";     //
+    public static final String CHARSET_X_UNICODEBIG              = "x-UnicodeBig";                  //
+    public static final String CHARSET_X_UTF_16LE_BOM            = "x-UTF-16LE-BOM";                //
+    public static final String CHARSET_X_UTF16_OPPOSITEENDIAN    = "x-UTF16_OppositeEndian";        //
+    public static final String CHARSET_X_UTF16_PLATFORMENDIAN    = "x-UTF16_PlatformEndian";        //
+    public static final String CHARSET_X_UTF32_OPPOSITEENDIAN    = "x-UTF32_OppositeEndian";        //
+    public static final String CHARSET_X_UTF32_PLATFORMENDIAN    = "x-UTF32_PlatformEndian";        //
+    
+    /*
+     * input 3D picture format list.
+     * defined by ChenXiaoChuan.
+     */
+	public static final int PICTURE_3D_MODE_NONE					= 0;		//* 2D
+	public static final int PICTURE_3D_MODE_DOUBLE_STREAM			= 1;		//* ·ÖÍ¼¸ñÊ½
+	public static final int PICTURE_3D_MODE_SIDE_BY_SIDE			= 2;		//* ×óÓÒ¸ñÊ½
+	public static final int PICTURE_3D_MODE_TOP_TO_BOTTOM			= 3;		//* ÉÏÏÂ¸ñÊ½
+	public static final int PICTURE_3D_MODE_LINE_INTERLEAVE			= 4;		//* ÐÐ½»Ö¯¸ñÊ½
+	public static final int PICTURE_3D_MODE_COLUME_INTERLEAVE		= 5;		//* ÁÐ½»Ö¯¸ñÊ½
+
+    /**
+     * set the dimension type of the source file.
+     * <p>
+     * 
+	 * @param type the  3D picture format of the source file
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setInputDimensionType(int type);
+    
+    /**
+     * get the dimension type of the source file.
+     * <p>
+     * 
+     * @return the 3D picture format of the source file. -1 means failed.
+     */
+    public native int getInputDimensionType();
+    
+    /*
+     * 3D picture display method, defined how to display pictures.
+     * defined by ChenXiaoChuan.
+     */
+	public static final int DISPLAY_3D_MODE_2D				= 0;	//* ÏÔÊ¾2DÍ¼Ïñ£¬¶ÔÓÚ·ÖÍ¼¸ñÊ½£¬Ö»ÏÔÊ¾Ò»¸öÍ¼£¬¶ÔÓÚÉÏÏÂ»ò×óÓÒ¸ñÊ½£¬ÏÔÊ¾Á½¸öÍ¼
+	public static final int DISPLAY_3D_MODE_3D				= 1;	//* ÏÔÊ¾3DÍ¼Ïñ
+	public static final int DISPLAY_3D_MODE_HALF_PICTURE	= 2;	//* ÏÔÊ¾°ëÍ¼£¬¶ÔÓÚ×óÓÒ»òÉÏÏÂ¸ñÊ½µÄÍ¼ÏñÓÐÓÃ
+	public static final int DISPLAY_3D_MODE_ANAGLAGH		= 3;	//* ÏÔÊ¾·ÖÉ«Í¼Ïñ£¬¿ÉÒÔ½«×óÓÒ»òÕßÉÏÏÂ¸ñÊ½µÄÍ¼Ïñ×ª»»³É·ÖÉ«Í¼ÏñÏÔÊ¾
+    
+    /**
+     * set display method of the 3D pictures.
+     * <p>
+     * 
+	 * @param type the display method of the 3D pictures
+     * @return ==0 means successful, !=0 means failed.
+     */ 
+    public native int setOutputDimensionType(int type);
+    
+    /**
+     * get the dimension type of the output.
+     * <p>
+     * 
+     * @return the dimension type of the output. -1 means failed.
+     */
+    public native int getOutputDimensionType();
+    
+    /* 
+     * anaglagh type list
+     */
+	public static final int ANAGLAGH_RED_BLUE		= 0;
+	public static final int ANAGLAGH_RED_GREEN		= 1;
+	public static final int ANAGLAGH_RED_CYAN		= 2;
+	public static final int ANAGLAGH_COLOR			= 3;
+	public static final int ANAGLAGH_HALF_COLOR		= 4;
+	public static final int ANAGLAGH_OPTIMIZED		= 5;
+	public static final int ANAGLAGH_YELLOW_BLUE	= 6;
+
+    /**
+     * set the anaglagh type of the output.
+     * <p>
+     * 
+	 * @param type the anaglagh type of the output
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setAnaglaghType(int type);
+
+    /**
+     * get the anaglagh type of the output.
+     * <p>
+     * 
+     * @return the anaglagh type of the output. -1 means failed.
+     */
+    public native int getAnaglaghType();
+
+    /**
+     * get the video encode.
+     * <p>
+     * 
+     * @return the name of the video encode. null means unknown.
+     */
+    public native String getVideoEncode();
+    
+    /**
+     * get the video frame rate.
+     * <p>
+     * 
+     * @return the video frame rate. <0 means unknown.
+     */
+    public native int getVideoFrameRate();
+    
+    /**
+     * get the audio encode.
+     * <p>
+     * 
+     * @return the name of the audio encode. null means unknown.
+     */
+    public native String getAudioEncode();
+
+    /**
+     * get the audio bit rate.
+     * <p>
+     * 
+     * @return the audio bit rate. <0 means unknown.
+     */
+    public native int getAudioBitRate();
+     
+    /**
+     * get the audio sample rate.
+     * <p>
+     * 
+     * @return the audio sample rate. <0 means unknown.
+     */
+    public native int getAudioSampleRate();
+
+    /* add by Gary. end   -----------------------------------}} */
+    
+    
+    /* add by Gary. start {{----------------------------------- */
+    /* 2011-11-14 */
+    /* support scale mode */
+    /**
+     * enable or disable scale mode for playing video.
+     * <p>
+     * 
+	 * @param enable if true, enable the scale mode, else disable the scale mode.
+	 * @param width  the expected width of the video. Only valid when enable.
+	 * @param height  the expected height of the video. Only valid when enable.
+     */
+    public native void enableScaleMode(boolean enable, int width, int height);
+    /* add by Gary. end   -----------------------------------}} */
+
+    /* add by Gary. start {{----------------------------------- */
+    /* 2011-11-14 */
+    /* support adjusting colors while playing video */
+    /**
+     * enable or disable VPP for playing video.
+     * <p>
+     * 
+	 * @param enableVpp if true, enable VPP, else disable VPP.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public static native int setVppGate(boolean enableVpp);
+    
+    /**
+     * get the VPP's status.
+     * <p>
+     * 
+	 * @return the VPP's status.
+     */
+    public static native boolean getVppGate();
+    
+    /**
+     * adjust the luma.
+     * <p>
+     * 
+     * @param value the value of luma. value ranges 0~~4.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public static native int setLumaSharp(int value);
+    
+    /**
+     * get the value of the luma.
+     * <p>
+     * 
+	 * @return the value of the luma.
+     */
+    public static native int getLumaSharp();
+    
+    /**
+     * adjust the chroma.
+     * <p>
+     * 
+     * @param value the value of chroma. value ranges 0~~4.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public static native int setChromaSharp(int value);
+    
+    /**
+     * get the value of the chroma.
+     * <p>
+     * 
+	 * @return the value of the chroma.
+     */
+    public static native int getChromaSharp();
+    
+    /**
+     * adjust the white extended.
+     * <p>
+     * 
+     * @param value the value of white extended. value ranges 0~~4.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public static native int setWhiteExtend(int value);
+    
+    /**
+     * get the value of the white extended.
+     * <p>
+     * 
+	 * @return the value of the white extended.
+     */
+    public static native int getWhiteExtend();
+
+    /**
+     * adjust the black extended.
+     * <p>
+     * 
+     * @param value the value of black extended. value ranges 0~~4.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public static native int setBlackExtend(int value);
+    
+    /**
+     * get the value of the black extended.
+     * <p>
+     * 
+	 * @return the value of the black extended.
+     */
+    public static native int getBlackExtend();
+        
+    /* add by Gary. end   -----------------------------------}} */
+
+    /* add by Gary. start {{----------------------------------- */
+    /* 2012-03-07 */
+    /* set audio channel mute */
+
+	public static final int AUDIO_CHANNEL_MUTE_NONE  = 0;
+	public static final int AUDIO_CHANNEL_MUTE_LEFT  = 1;
+	public static final int AUDIO_CHANNEL_MUTE_RIGHT = 2;
+	public static final int AUDIO_CHANNEL_MUTE_ALL   = 3;
+
+    /**
+     * set the audio channel mute mode
+     * <p>
+     * 
+     * @param muteMode  mute mode
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setChannelMuteMode(int muteMode); 
+
+    /**
+     * get the audio channel mute mode
+     * <p>
+     * 
+     * @return the audio channel mute mode.
+     */
+    public native int getChannelMuteMode(); 
+
+    /* add by Gary. end   -----------------------------------}} */
+
+    /* add by Gary. start {{----------------------------------- */
+    /* 2012-03-12 */
+    /* add the global interfaces to control the subtitle gate  */
+
+    /**
+     * show or hide a subitle.
+     * <p>
+     * 
+     * @param showSub  whether to show subtitle or not
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public static native int setGlobalSubGate(boolean showSub); 
+    
+    /**
+     * check whether subtitles is allowed showing.
+     * <p>
+     * 
+     * @return true if subtitles is allowed showing, false otherwise.
+     */
+    public static native boolean getGlobalSubGate();
+    
+    /* add by Gary. end   -----------------------------------}} */
+
+    /* add by Gary. start {{----------------------------------- */
+    /* 2012-4-24 */
+    /* add two general interfaces for expansibility */
+    
+    /**
+     * show or hide a subitle.
+     * <p>
+     * 
+     * @param enable  whether to start the BD folder play mode.
+     * @return ==0 means successful, !=0 means failed.
+     */
+    public native int setBdFolderPlayMode(boolean enable); 
+    
+    /**
+     * check whether is in BD folder play mode.
+     * <p>
+     * 
+     * @return true if is in BD folder play mode, false otherwise.
+     */
+    public native boolean getBdFolderPlayMode();
+    /* add by Gary. end   -----------------------------------}} */
+
+    public native int setPresentationScreen(int screen); 
+    public native int getPresentationScreen();
+    public native int releaseSurfaceByHand();
+    
+    /*Start by Bevis. Rotate the video.*/
+	public static native boolean isRotatable();
+    public static native int setRotation(int rotation); 
+    /*End by Bevis. Rotate the video.*/
+	
+	/*Add by eric_wang. Notify hdmi status.*/
+    public static native int setHdmiState(boolean bHdmiPlugged); 
+    /*End by eric_wang. Notify hdmi status.*/
+
+    /*Start by Bevis. Detect http data source from other application.*/
+	public interface DlnaSourceDetector{
+		void onSourceDetected(String url);
+	}
+
+	private DlnaSourceDetector mDlnaSourceDetector;
+	private static final String DLNA_SOURCE_DETECTOR = "com.softwinner.dlnasourcedetector";
+	
+	public void setDlnaSourceDetector(DlnaSourceDetector detector){
+		mDlnaSourceDetector = detector;
+		try{
+			setDataSource(DLNA_SOURCE_DETECTOR);
+		}
+		catch(Exception e){
+			Log.e(TAG, "Fail to set DlnaSourceDetector..");
+			e.printStackTrace();
+		}
+	}
+	/*End by Bevis. Detect data source from other application.*/
 }
diff --git a/media/java/android/media/MediaRecorder.java b/media/java/android/media/MediaRecorder.java
index 48bea52..a3c1666 100644
--- a/media/java/android/media/MediaRecorder.java
+++ b/media/java/android/media/MediaRecorder.java
@@ -183,6 +183,9 @@ public class MediaRecorder
          * Audio source for remote submix.
          */
         public static final int REMOTE_SUBMIX_SOURCE = 8;
+		
+      /** FM audio source */
+        public static final int VOICE_FM = 9;
     }
 
     /**
diff --git a/media/jni/android_media_MediaMetadataRetriever.cpp b/media/jni/android_media_MediaMetadataRetriever.cpp
index 297dadf..8f9a22a 100644
--- a/media/jni/android_media_MediaMetadataRetriever.cpp
+++ b/media/jni/android_media_MediaMetadataRetriever.cpp
@@ -227,6 +227,8 @@ static jobject android_media_MediaMetadataRetriever_getFrameAtTime(JNIEnv *env,
     // Call native method to retrieve a video frame
     VideoFrame *videoFrame = NULL;
     sp<IMemory> frameMemory = retriever->getFrameAtTime(timeUs, option);
+    if(option != 0x3)
+    {
     if (frameMemory != 0) {  // cast the shared structure to a VideoFrame object
         videoFrame = static_cast<VideoFrame *>(frameMemory->pointer());
     }
@@ -293,7 +295,41 @@ static jobject android_media_MediaMetadataRetriever_getFrameAtTime(JNIEnv *env,
         return scaledBitmap;
     }
 
-    return jBitmap;
+        return jBitmap;
+	}
+    else
+    {
+        size_t width, height;
+        
+        if(frameMemory == NULL)
+            return NULL;
+        
+        width = 480;
+        height = (frameMemory->size()/width) + 1;
+        width /= 2;
+        
+        jobject config = env->CallStaticObjectMethod(
+                            fields.configClazz,
+                            fields.createConfigMethod,
+                            SkBitmap::kRGB_565_Config);
+        
+        jobject jBitmap = env->CallStaticObjectMethod(
+                                fields.bitmapClazz,
+                                fields.createBitmapMethod,
+                                width,
+                                height,
+                                config);
+        
+        SkBitmap *bitmap = (SkBitmap *) env->GetIntField(jBitmap, fields.nativeBitmap);
+        
+        bitmap->lockPixels();
+        memcpy((uint16_t*)bitmap->getPixels(), frameMemory->pointer(), frameMemory->size());
+
+        bitmap->unlockPixels();
+        
+        return jBitmap;
+    }
+
 }
 
 static jbyteArray android_media_MediaMetadataRetriever_getEmbeddedPicture(
diff --git a/media/jni/android_media_MediaPlayer.cpp b/media/jni/android_media_MediaPlayer.cpp
index ad536f2..25c63fa 100644
--- a/media/jni/android_media_MediaPlayer.cpp
+++ b/media/jni/android_media_MediaPlayer.cpp
@@ -594,6 +594,846 @@ android_media_MediaPlayer_getMetadata(JNIEnv *env, jobject thiz, jboolean update
     return media_player->getMetadata(update_only, apply_filter, metadata) == OK;
 }
 
+/* add by Gary. start {{----------------------------------- */
+static void 
+android_media_MediaPlayer_setScreen(JNIEnv *env, jobject thiz, jint screen)
+{
+    ALOGV("setScreen");
+    MediaPlayer::setScreen(screen);
+}
+
+static jint 
+android_media_MediaPlayer_getScreen(JNIEnv *env, jobject thiz)
+{
+    ALOGV("getScreen");
+
+    jint screen;
+    if( OK != MediaPlayer::getScreen(&screen) ){
+        ALOGV("Fail in getting screen");
+        screen = MASTER_SCREEN;
+    }
+    
+    return screen;
+}
+
+static jboolean 
+android_media_MediaPlayer_isPlayingVideo(JNIEnv *env, jobject thiz)
+{
+    ALOGV("isPlayingVideo");
+
+    bool playing;
+    if( OK != MediaPlayer::isPlayingVideo(&playing) ){
+        ALOGV("Fail in isPlayingVideo()");
+        playing = false;
+    }
+    
+    return (jboolean)playing;
+}
+/* add by Gary. end   -----------------------------------}} */
+
+/* add by Gary. start {{----------------------------------- */
+/* 2011-9-13 10:25:47 */
+/* expend interfaces about subtitle, track and so on */
+static jobject _composeObjSubInfo(JNIEnv *env, jclass classSubInfo, jmethodID methodSubInfo, MediaPlayer_SubInfo *info)
+{
+    jstring charset = env->NewStringUTF((const char*)info->charset);
+    jbyteArray name = env->NewByteArray(info->len);
+    env->SetByteArrayRegion(name, 0, info->len, (jbyte*)info->name);
+    jobject objSubInfo = env->NewObject(classSubInfo, methodSubInfo, name, charset, info->type);
+    if(objSubInfo == NULL )
+        ALOGE("Fail in creating SubInfo object.");
+        
+    env->DeleteLocalRef(name);
+    env->DeleteLocalRef(charset);
+    return objSubInfo;
+}
+
+static jobjectArray
+android_media_MediaPlayer_getSubList(JNIEnv *env, jobject thiz)
+{
+    ALOGE("enter android_media_MediaPlayer_getSubList");
+
+    jobjectArray jsubList = NULL;
+    MediaPlayer_SubInfo *csubList = NULL;
+    status_t ret;
+    jclass classSubInfo;    
+    jmethodID methodSubInfo;
+    
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return NULL;
+    }
+    
+    classSubInfo = env->FindClass("android/media/MediaPlayer$SubInfo");
+    if(classSubInfo == NULL ){
+        ALOGE("Fail in finding class android/media/MediaPlayer$SubInfo");
+        return NULL;
+    }
+    
+    int count = mp->getSubCount();
+    if(count <= 0)
+        return NULL;
+        
+    jsubList = env->NewObjectArray(count, classSubInfo, NULL );
+    if(jsubList == NULL){
+        ALOGE("Fail in creating subInfo array.");
+        goto error;
+    }
+    csubList = new MediaPlayer_SubInfo[count];
+    if(csubList == NULL ){
+        ALOGE("Fail in allocating memory.");
+        goto error;
+    }
+    count = mp->getSubList(csubList, count);
+    if(count <= 0){
+        ALOGE("Fail in getting sublist.");
+        goto error;
+    }
+    methodSubInfo = env->GetMethodID(classSubInfo, "<init>", 
+                                                  "([BLjava/lang/String;I)V");
+    if(methodSubInfo == NULL){
+        ALOGE("Fail in getting method \"SubInfo\".");
+        goto error;
+    }
+    for(int i = 0; i < count; i++){
+        jobject objSubInfo = _composeObjSubInfo(env, classSubInfo, methodSubInfo, csubList+i);
+        env->SetObjectArrayElement(jsubList, i, objSubInfo);
+        env->DeleteLocalRef(objSubInfo);
+    }
+    
+    delete[] csubList;
+    return jsubList;    
+    
+error:
+    if(jsubList != NULL)
+        env->DeleteLocalRef(jsubList);
+    if(csubList != NULL)
+        delete[] csubList;
+    return NULL;
+}
+
+static jint
+android_media_MediaPlayer_getCurSub(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getCurSub();
+}
+
+static jint
+android_media_MediaPlayer_switchSub(JNIEnv *env, jobject thiz, jint index)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->switchSub(index);
+}
+
+static jint
+android_media_MediaPlayer_setSubGate(JNIEnv *env, jobject thiz, jboolean showSub)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setSubGate((bool)showSub);
+}
+
+static jboolean
+android_media_MediaPlayer_getSubGate(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return (jboolean)mp->getSubGate();
+}
+
+static jint
+android_media_MediaPlayer_setSubColor(JNIEnv *env, jobject thiz, jint color)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setSubColor(color);
+}
+
+static jint
+android_media_MediaPlayer_getSubColor(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getSubColor();
+}
+
+static jint
+android_media_MediaPlayer_setSubFrameColor(JNIEnv *env, jobject thiz, jint color)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setSubFrameColor(color);
+}
+
+static jint
+android_media_MediaPlayer_getSubFrameColor(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return 0xFFFFFFFF;
+    }
+    
+    return mp->getSubFrameColor();
+}
+
+static jint
+android_media_MediaPlayer_setSubFontSize(JNIEnv *env, jobject thiz, jint size)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setSubFontSize(size);
+}
+
+static jint
+android_media_MediaPlayer_getSubFontSize(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getSubFontSize();
+}
+
+static jint
+android_media_MediaPlayer_setSubCharset(JNIEnv *env, jobject thiz, jstring charset)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    const char *ccharset = env->GetStringUTFChars(charset, NULL);
+    if(ccharset == NULL){
+        ALOGE("Fail in converting jstring to cstring.");
+        return -1;
+    }
+    
+    status_t ret = mp->setSubCharset(ccharset);
+    env->ReleaseStringUTFChars(charset, ccharset);
+    return ret;
+}
+
+static jstring
+android_media_MediaPlayer_getSubCharset(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return NULL;
+    }
+    char *ccharset = new char[MEDIAPLAYER_NAME_LEN_MAX];
+    if(ccharset == NULL){
+        ALOGE("Fail in allocating memory.");
+        return NULL;
+    }
+    
+    status_t ret = mp->getSubCharset(ccharset);
+    if(ret == OK){
+        jstring charset = env->NewStringUTF(ccharset);
+        if(charset == NULL){
+            ALOGE("Fail in creating java string with %s.", ccharset);
+        }
+        delete[] ccharset;
+        return charset;
+    }else {
+        delete[] ccharset;
+        return NULL;
+    }
+}
+
+static jint
+android_media_MediaPlayer_setSubPosition(JNIEnv *env, jobject thiz, jint pencent)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setSubPosition(pencent);
+}
+
+static jint
+android_media_MediaPlayer_getSubPosition(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getSubPosition();
+}
+
+static jint
+android_media_MediaPlayer_setSubDelay(JNIEnv *env, jobject thiz, jint delay)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setSubDelay(delay);
+}
+
+static jint
+android_media_MediaPlayer_getSubDelay(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getSubDelay();
+}
+
+static jobject _composeObjTrackInfo(JNIEnv *env, jclass classTrackInfo, jmethodID methodTrackInfo, MediaPlayer_TrackInfo *info)
+{
+    jstring charset = env->NewStringUTF((const char*)info->charset);
+    jbyteArray name = env->NewByteArray(info->len);
+    env->SetByteArrayRegion(name, 0, info->len, (jbyte*)info->name);
+    jobject objTrackInfo = env->NewObject(classTrackInfo, methodTrackInfo, name, charset);
+    if(objTrackInfo == NULL )
+        ALOGE("Fail in creating TrackInfo object.");
+        
+    env->DeleteLocalRef(name);
+    env->DeleteLocalRef(charset);
+    return objTrackInfo;
+}
+
+static jobjectArray
+android_media_MediaPlayer_getTrackList(JNIEnv *env, jobject thiz)
+{
+    ALOGE("enter android_media_MediaPlayer_getTrackList");
+
+    jobjectArray jtrackList = NULL;
+    MediaPlayer_TrackInfo *ctrackList = NULL;
+    status_t ret;
+    jclass classTrackInfoVendor;
+    jmethodID methodTrackInfo;
+    
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return NULL;
+    }
+    
+    classTrackInfoVendor = env->FindClass("android/media/MediaPlayer$TrackInfoVendor");
+    if(classTrackInfoVendor == NULL ){
+        ALOGE("Fail in finding class android/media/MediaPlayer$TrackInfo");
+        return NULL;
+    }
+    
+    int count = mp->getTrackCount();
+    if(count <= 0)
+        return NULL;
+        
+    jtrackList = env->NewObjectArray(count, classTrackInfoVendor, NULL );
+    if(jtrackList == NULL){
+        ALOGE("Fail in creating trackInfo array.");
+        goto error;
+    }
+    ctrackList = new MediaPlayer_TrackInfo[count];
+    if(ctrackList == NULL ){
+        ALOGE("Fail in allocating memory.");
+        goto error;
+    }
+    count = mp->getTrackList(ctrackList, count);
+    if(count < 0){
+        ALOGE("Fail in getting tracklist.");
+        goto error;
+    }
+    methodTrackInfo = env->GetMethodID(classTrackInfoVendor, "<init>",
+                                                  "([BLjava/lang/String;)V");
+    if(methodTrackInfo == NULL){
+        ALOGE("Fail in getting method \"TrackInfo\".");
+        goto error;
+    }
+    for(int i = 0; i < count; i++){
+        jobject objTrackInfo = _composeObjTrackInfo(env, classTrackInfoVendor, methodTrackInfo, ctrackList+i);
+        env->SetObjectArrayElement(jtrackList, i, objTrackInfo);
+        env->DeleteLocalRef(objTrackInfo);
+    }
+    
+    delete[] ctrackList;
+    return jtrackList;    
+    
+error:
+    if(jtrackList != NULL)
+        env->DeleteLocalRef(jtrackList);
+    if(ctrackList != NULL)
+        delete[] ctrackList;
+    return NULL;
+}
+
+
+static jint
+android_media_MediaPlayer_getCurTrack(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getCurTrack();
+}
+
+static jint
+android_media_MediaPlayer_switchTrack(JNIEnv *env, jobject thiz, jint index)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->switchTrack(index);
+}
+
+static jint
+android_media_MediaPlayer_setInputDimensionType(JNIEnv *env, jobject thiz, jint type)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setInputDimensionType(type);
+}
+
+static jint
+android_media_MediaPlayer_getInputDimensionType(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getInputDimensionType();
+}
+
+static jint
+android_media_MediaPlayer_setOutputDimensionType(JNIEnv *env, jobject thiz, jint type)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setOutputDimensionType(type);
+}
+
+static jint
+android_media_MediaPlayer_getOutputDimensionType(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getOutputDimensionType();
+}
+
+static jint
+android_media_MediaPlayer_setAnaglaghType(JNIEnv *env, jobject thiz, jint type)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setAnaglaghType(type);
+}
+
+static jint
+android_media_MediaPlayer_getAnaglaghType(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getAnaglaghType();
+}
+
+static jstring
+android_media_MediaPlayer_getVideoEncode(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return NULL;
+    }
+    
+    char *encode = new char[MEDIAPLAYER_NAME_LEN_MAX];
+    if(encode == NULL){
+        ALOGE("Fail in allocating memory.");
+        return NULL;
+    }
+    status_t ret = mp->getVideoEncode(encode);
+    if(ret != OK){
+        delete[] encode;
+        return NULL;
+    }
+    jstring jencode = env->NewStringUTF(encode);
+    if(jencode == NULL){
+        delete[] encode;
+        return NULL;
+    }
+    return jencode;
+}
+
+static jint
+android_media_MediaPlayer_getVideoFrameRate(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getVideoFrameRate();
+}
+
+static jstring
+android_media_MediaPlayer_getAudioEncode(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return NULL;
+    }
+    
+    char *encode = new char[MEDIAPLAYER_NAME_LEN_MAX];
+    if(encode == NULL){
+        ALOGE("Fail in allocating memory.");
+        return NULL;
+    }
+    status_t ret = mp->getAudioEncode(encode);
+    if(ret != OK){
+        delete[] encode;
+        return NULL;
+    }
+    jstring jencode = env->NewStringUTF(encode);
+    if(jencode == NULL){
+        delete[] encode;
+        return NULL;
+    }
+    return jencode;
+}
+
+static jint
+android_media_MediaPlayer_getAudioBitRate(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getAudioBitRate();
+}
+
+static jint
+android_media_MediaPlayer_getAudioSampleRate(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getAudioSampleRate();
+}
+
+/* add by Gary. end   -----------------------------------}} */
+
+/* add by Gary. start {{----------------------------------- */
+/* 2011-11-14 */
+/* support scale mode */
+static void
+android_media_MediaPlayer_enableScaleMode(JNIEnv *env, jobject thiz, jboolean enable, jint width, jint height)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return;
+    }
+    
+    mp->enableScaleMode((bool)enable, width, height);
+}
+/* add by Gary. end   -----------------------------------}} */
+
+/* add by Gary. start {{----------------------------------- */
+/* 2011-11-14 */
+/* support adjusting colors while playing video */
+static void 
+android_media_MediaPlayer_setVppGate(JNIEnv *env, jobject thiz, jboolean enableVpp)
+{
+    MediaPlayer::setVppGate((bool)enableVpp);
+}
+
+static jboolean 
+android_media_MediaPlayer_getVppGate(JNIEnv *env, jobject thiz)
+{
+    return (jboolean)MediaPlayer::getVppGate();
+}
+
+static jint 
+android_media_MediaPlayer_setLumaSharp(JNIEnv *env, jobject thiz, jint value)
+{
+    if(OK == MediaPlayer::setLumaSharp(value))
+        return 0;
+    else
+        return -1;
+}
+
+static jint 
+android_media_MediaPlayer_getLumaSharp(JNIEnv *env, jobject thiz)
+{
+    return MediaPlayer::getLumaSharp();
+}
+
+static jint 
+android_media_MediaPlayer_setChromaSharp(JNIEnv *env, jobject thiz, jint value)
+{
+    if(OK == MediaPlayer::setChromaSharp(value))
+        return 0;
+    else
+        return -1;
+}
+
+static jint 
+android_media_MediaPlayer_getChromaSharp(JNIEnv *env, jobject thiz)
+{
+    return MediaPlayer::getChromaSharp();
+}
+
+static jint 
+android_media_MediaPlayer_setWhiteExtend(JNIEnv *env, jobject thiz, jint value)
+{
+    if(OK == MediaPlayer::setWhiteExtend(value))
+        return 0;
+    else
+        return -1;
+}
+
+static jint 
+android_media_MediaPlayer_getWhiteExtend(JNIEnv *env, jobject thiz)
+{
+    return MediaPlayer::getWhiteExtend();
+}
+
+static jint 
+android_media_MediaPlayer_setBlackExtend(JNIEnv *env, jobject thiz, jint value)
+{
+    if(OK == MediaPlayer::setBlackExtend(value))
+        return 0;
+    else
+        return -1;
+}
+
+static jint 
+android_media_MediaPlayer_getBlackExtend(JNIEnv *env, jobject thiz)
+{
+    return MediaPlayer::getBlackExtend();
+}
+
+/* add by Gary. end   -----------------------------------}} */
+
+/* add by Gary. start {{----------------------------------- */
+/* 2012-03-07 */
+/* set audio channel mute */
+static jint
+android_media_MediaPlayer_setChannelMuteMode(JNIEnv *env, jobject thiz, jint muteMode)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->setChannelMuteMode(muteMode);
+}
+
+static jint
+android_media_MediaPlayer_getChannelMuteMode(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    
+    return mp->getChannelMuteMode();
+}
+/* add by Gary. end   -----------------------------------}} */
+
+/* add by Gary. start {{----------------------------------- */
+/* 2012-03-12 */
+/* add the global interfaces to control the subtitle gate  */
+static jint 
+android_media_MediaPlayer_setGlobalSubGate(JNIEnv *env, jobject thiz, jboolean showSub)
+{
+    if(OK == MediaPlayer::setGlobalSubGate(showSub))
+        return 0;
+    else
+        return -1;
+}
+
+static jboolean 
+android_media_MediaPlayer_getGlobalSubGate(JNIEnv *env, jobject thiz)
+{
+    return MediaPlayer::getGlobalSubGate();
+}
+/* add by Gary. end   -----------------------------------}} */
+
+/* add by Gary. start {{----------------------------------- */
+/* 2012-4-24 */
+/* add two general interfaces for expansibility */
+static jint
+android_media_MediaPlayer_setBdFolderPlayMode(JNIEnv *env, jobject thiz, jboolean enable)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+    int input = enable? 1 : 0;
+    return mp->generalInterface(MEDIAPLAYER_CMD_SET_BD_FOLDER_PLAY_MODE, input, 0, 0, NULL);
+}
+
+static jboolean
+android_media_MediaPlayer_getBdFolderPlayMode(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return false;
+    }
+    
+    int enable = 0;
+    mp->generalInterface(MEDIAPLAYER_CMD_GET_BD_FOLDER_PLAY_MODE, 0, 0, 0, &enable);
+    return enable == 1;
+}
+/* add by Gary. end   -----------------------------------}} */
+
+/* add by lys. start {{----------------------------------- */
+/* 2013-4-22 */
+/* add two general interfaces for expansibility */
+
+static jint
+android_media_MediaPlayer_releaseSurfaceByHand(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+
+    return mp->generalInterface(MEDIAPLAYER_CMD_RELEASE_SURFACE_BYHAND, 0, 0, 0, NULL);
+}
+
+static jint
+android_media_MediaPlayer_setPresentationScreen(JNIEnv *env, jobject thiz, jint screen)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return -1;
+    }
+
+    return mp->generalInterface(MEDIAPLAYER_CMD_SET_PRESENTANTION_SCREEN, screen, 0, 0, NULL);
+}
+
+static jint
+android_media_MediaPlayer_getPresentationScreen(JNIEnv *env, jobject thiz)
+{
+    sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
+    if (mp == NULL ) {
+        jniThrowException(env, "java/lang/IllegalStateException", NULL);
+        return false;
+    }
+    
+    int screen = 0;
+    mp->generalInterface(MEDIAPLAYER_CMD_GET_PRESENTANTION_SCREEN, 0, 0, 0, &screen);
+    return screen;
+}
+/* add by lys. end   -----------------------------------}} */
+
+/*Start by Bevis. Rotate the video.*/
+static jboolean
+android_media_MediaPlayer_isRotatable(JNIEnv *env, jobject thiz)
+{
+    int enable = 0;
+    MediaPlayer::generalGlobalInterface(MEDIAPLAYER_CMD_IS_ROTATABLE, 0, 0, 0, &enable);
+    return enable == 1;
+}
+
+static jint
+android_media_MediaPlayer_setRotation(JNIEnv *env, jobject thiz, jint rotation)
+{
+    return MediaPlayer::generalGlobalInterface(MEDIAPLAYER_CMD_SET_ROTATION, rotation, 0, 0, NULL);
+}
+/*End by Bevis. Rotate the video.*/
+
+/*add by eric_wang. Notify hdmi status.*/
+static jint
+android_media_MediaPlayer_setHdmiState(JNIEnv *env, jobject thiz, jboolean bHdmiPlugged)
+{
+    return MediaPlayer::generalGlobalInterface(MEDIAPLAYER_CMD_SET_HDMISTATE, bHdmiPlugged, 0, 0, NULL);
+}
+/*End by eric_wang. Notify hdmi status.*/
+
 // This function gets some field IDs, which in turn causes class initialization.
 // It is called from a static block in MediaPlayer, which won't run until the
 // first time an instance of this class is used.
@@ -867,6 +1707,89 @@ static JNINativeMethod gMethods[] = {
     {"getParameter",        "(ILandroid/os/Parcel;)V",          (void *)android_media_MediaPlayer_getParameter},
     {"native_setRetransmitEndpoint", "(Ljava/lang/String;I)I",  (void *)android_media_MediaPlayer_setRetransmitEndpoint},
     {"setNextMediaPlayer",  "(Landroid/media/MediaPlayer;)V",   (void *)android_media_MediaPlayer_setNextMediaPlayer},
+    /* add by Gary. start {{----------------------------------- */
+    {"getScreen",           "()I",                              (void *)android_media_MediaPlayer_getScreen},
+    {"setScreen",           "(I)V",                             (void *)android_media_MediaPlayer_setScreen},
+    {"isPlayingVideo",      "()Z",                              (void *)android_media_MediaPlayer_isPlayingVideo},
+    /* add by Gary. end   -----------------------------------}} */
+    /* add by Gary. start {{----------------------------------- */
+    /* 2011-9-13 10:25:47 */
+    /* expend interfaces about subtitle, track and so on */
+    {"getSubList",             "()[Landroid/media/MediaPlayer$SubInfo;", (void *)android_media_MediaPlayer_getSubList},
+    {"getCurSub",              "()I",                           (void *)android_media_MediaPlayer_getCurSub},
+    {"switchSub",              "(I)I",                          (void *)android_media_MediaPlayer_switchSub},
+//    {"setSubGate",             "(Z)I",                          (void *)android_media_MediaPlayer_setSubGate},
+//    {"getSubGate",             "()Z",                           (void *)android_media_MediaPlayer_getSubGate},
+    {"setSubColor",            "(I)I",                          (void *)android_media_MediaPlayer_setSubColor},
+    {"getSubColor",            "()I",                           (void *)android_media_MediaPlayer_getSubColor},
+    {"setSubFrameColor",       "(I)I",                          (void *)android_media_MediaPlayer_setSubFrameColor},
+    {"getSubFrameColor",       "()I",                           (void *)android_media_MediaPlayer_getSubFrameColor},
+    {"setSubFontSize",         "(I)I",                          (void *)android_media_MediaPlayer_setSubFontSize},
+    {"getSubFontSize",         "()I",                           (void *)android_media_MediaPlayer_getSubFontSize},
+    {"setSubCharset",          "(Ljava/lang/String;)I",         (void *)android_media_MediaPlayer_setSubCharset},
+    {"getSubCharset",          "()Ljava/lang/String;",          (void *)android_media_MediaPlayer_getSubCharset},
+    {"setSubPosition",         "(I)I",                          (void *)android_media_MediaPlayer_setSubPosition},
+    {"getSubPosition",         "()I",                           (void *)android_media_MediaPlayer_getSubPosition},
+    {"setSubDelay",            "(I)I",                          (void *)android_media_MediaPlayer_setSubDelay},
+    {"getSubDelay",            "()I",                           (void *)android_media_MediaPlayer_getSubDelay},
+    {"getTrackList",           "()[Landroid/media/MediaPlayer$TrackInfoVendor;", (void *)android_media_MediaPlayer_getTrackList},
+    {"getCurTrack",            "()I",                           (void *)android_media_MediaPlayer_getCurTrack},
+    {"switchTrack",            "(I)I",                          (void *)android_media_MediaPlayer_switchTrack},
+    {"setInputDimensionType",  "(I)I",                          (void *)android_media_MediaPlayer_setInputDimensionType},
+    {"getInputDimensionType",  "()I",                           (void *)android_media_MediaPlayer_getInputDimensionType},
+    {"setOutputDimensionType", "(I)I",                          (void *)android_media_MediaPlayer_setOutputDimensionType},
+    {"getOutputDimensionType", "()I",                           (void *)android_media_MediaPlayer_getOutputDimensionType},
+    {"setAnaglaghType",        "(I)I",                          (void *)android_media_MediaPlayer_setAnaglaghType},
+    {"getAnaglaghType",        "()I",                           (void *)android_media_MediaPlayer_getAnaglaghType},
+    {"getVideoEncode",         "()Ljava/lang/String;",          (void *)android_media_MediaPlayer_getVideoEncode},
+    {"getVideoFrameRate",      "()I",                           (void *)android_media_MediaPlayer_getVideoFrameRate},
+    {"getAudioEncode",         "()Ljava/lang/String;",          (void *)android_media_MediaPlayer_getAudioEncode},
+    {"getAudioBitRate",        "()I",                           (void *)android_media_MediaPlayer_getAudioBitRate},
+    {"getAudioSampleRate",     "()I",                           (void *)android_media_MediaPlayer_getAudioSampleRate},
+    /* add by Gary. end   -----------------------------------}} */
+    /* add by Gary. start {{----------------------------------- */
+    /* 2011-11-14 */
+    /* support scale mode */
+    {"enableScaleMode",        "(ZII)V",                        (void *)android_media_MediaPlayer_enableScaleMode},
+    /* add by Gary. end   -----------------------------------}} */
+    /* add by Gary. start {{----------------------------------- */
+    /* 2011-11-14 */
+    /* support adjusting colors while playing video */
+    {"setVppGate",             "(Z)I",                          (void *)android_media_MediaPlayer_setVppGate},
+    {"getVppGate",             "()Z",                           (void *)android_media_MediaPlayer_getVppGate},
+    {"setLumaSharp",           "(I)I",                          (void *)android_media_MediaPlayer_setLumaSharp},
+    {"getLumaSharp",           "()I",                           (void *)android_media_MediaPlayer_getLumaSharp},
+    {"setChromaSharp",         "(I)I",                          (void *)android_media_MediaPlayer_setChromaSharp},
+    {"getChromaSharp",         "()I",                           (void *)android_media_MediaPlayer_getChromaSharp},
+    {"setWhiteExtend",         "(I)I",                          (void *)android_media_MediaPlayer_setWhiteExtend},
+    {"getWhiteExtend",         "()I",                           (void *)android_media_MediaPlayer_getWhiteExtend},
+    {"setBlackExtend",         "(I)I",                          (void *)android_media_MediaPlayer_setBlackExtend},
+    {"getBlackExtend",         "()I",                           (void *)android_media_MediaPlayer_getBlackExtend},
+    /* add by Gary. end   -----------------------------------}} */
+    /* add by Gary. start {{----------------------------------- */
+    /* 2012-03-07 */
+    /* set audio channel mute */
+    {"setChannelMuteMode",     "(I)I",                          (void *)android_media_MediaPlayer_setChannelMuteMode},
+    {"getChannelMuteMode",     "()I",                           (void *)android_media_MediaPlayer_getChannelMuteMode},
+    /* add by Gary. end   -----------------------------------}} */
+    /* add by Gary. start {{----------------------------------- */
+    /* 2012-03-12 */
+    /* add the global interfaces to control the subtitle gate  */
+    {"getGlobalSubGate",        "()Z",                          (void *)android_media_MediaPlayer_getGlobalSubGate},
+    {"setGlobalSubGate",        "(Z)I",                         (void *)android_media_MediaPlayer_setGlobalSubGate},
+    /* add by Gary. end   -----------------------------------}} */
+    {"getBdFolderPlayMode",     "()Z",                          (void *)android_media_MediaPlayer_getBdFolderPlayMode},
+    {"setBdFolderPlayMode",     "(Z)I",                         (void *)android_media_MediaPlayer_setBdFolderPlayMode},
+    {"getPresentationScreen",     "()I",                          (void *)android_media_MediaPlayer_getPresentationScreen},
+    {"setPresentationScreen",     "(I)I",                         (void *)android_media_MediaPlayer_setPresentationScreen},
+    {"releaseSurfaceByHand",     "()I",                         (void *)android_media_MediaPlayer_releaseSurfaceByHand},
+    /*Start by Bevis. Rotate the video*/
+	{"isRotatable",     "()Z",                         		(void *)android_media_MediaPlayer_isRotatable},	
+    {"setRotation",     "(I)I",                         		(void *)android_media_MediaPlayer_setRotation},
+    /*End by Bevis. Rotate the video*/
+    /*add by eric_wang. Notify hdmi status.*/
+    {"setHdmiState",     "(Z)I",                         		(void *)android_media_MediaPlayer_setHdmiState},
+    /*End by eric_wang. Notify hdmi status.*/
 };
 
 static const char* const kClassPathName = "android/media/MediaPlayer";
diff --git a/opengl/java/android/opengl/GLSurfaceView.java b/opengl/java/android/opengl/GLSurfaceView.java
index 54dcaaa..08f77fa 100644
--- a/opengl/java/android/opengl/GLSurfaceView.java
+++ b/opengl/java/android/opengl/GLSurfaceView.java
@@ -1595,6 +1595,15 @@ public class GLSurfaceView extends SurfaceView implements SurfaceHolder.Callback
                     Log.i("GLThread", "surfaceCreated tid=" + getId());
                 }
                 mHasSurface = true;
+
+                if(mGameloftNeedCompat)
+                {
+                    mMotionEventMayNeedAdjust =true;
+                }
+                else
+                {
+                    mMotionEventMayNeedAdjust =false;
+                }
                 sGLThreadManager.notifyAll();
                 while((mWaitingForSurface) && (!mExited)) {
                     try {
@@ -1612,6 +1621,7 @@ public class GLSurfaceView extends SurfaceView implements SurfaceHolder.Callback
                     Log.i("GLThread", "surfaceDestroyed tid=" + getId());
                 }
                 mHasSurface = false;
+                mMotionEventMayNeedAdjust =false;
                 sGLThreadManager.notifyAll();
                 while((!mWaitingForSurface) && (!mExited)) {
                     try {
diff --git a/packages/SettingsProvider/res/values/defaults.xml b/packages/SettingsProvider/res/values/defaults.xml
index 2b02049..66bb67a 100644
--- a/packages/SettingsProvider/res/values/defaults.xml
+++ b/packages/SettingsProvider/res/values/defaults.xml
@@ -25,6 +25,7 @@
     <string name="airplane_mode_toggleable_radios" translatable="false">bluetooth,wifi,nfc</string>
     <bool name="def_auto_time">true</bool>
     <bool name="def_auto_time_zone">true</bool>
+    <fraction name="def_screen_auto_brightness_adj">30%</fraction>
     <bool name="def_accelerometer_rotation">true</bool>
     <!-- Default screen brightness, from 0 to 255.  102 is 40%. -->
     <integer name="def_screen_brightness">102</integer>
@@ -51,6 +52,8 @@
     <!-- 0 == never, 1 == only when plugged in, 2 == always -->
     <integer name="def_wifi_sleep_policy">2</integer>
     <bool name="def_networks_available_notification_on">true</bool>
+    <bool name="def_ethernet_on">false</bool>
+    <bool name="def_ethernet_mode">true</bool>
 
     <bool name="def_backup_enabled">false</bool>
     <string name="def_backup_transport" translatable="false">android/com.android.internal.backup.LocalTransport</string>
@@ -155,6 +158,8 @@
     <!-- Default for Settings.System.POINTER_SPEED -->
     <integer name="def_pointer_speed">0</integer>
 
+    <string name="def_time_12_24">24</string>
+
     <!-- Default for DTMF tones enabled -->
     <bool name="def_dtmf_tones_enabled">true</bool>
     <!-- Default for UI touch sounds enabled -->
@@ -169,4 +174,24 @@
 
     <!-- Default for Settings.Secure.USER_SETUP_COMPLETE -->
     <bool name="def_user_setup_complete">false</bool>
+
+    <!-- Default for Accelerometer coordinate -->
+    <string name="def_accelerometer_coordinate">default</string>
+
+    <!-- Default for screen adaption, full or center-->
+    <string name="def_screen_adaption_mode">center</string>
+    <!-- Default for enable screen adaption -->
+    <bool name="def_display_adation_enable">false</bool>
+    <!-- Default for enable boot fast mode -->
+    <bool name="def_boot_fast_enable">false</bool>
+    <!-- Default for enable cpu fast mode -->
+    <bool name="def_cpu_fast_enable">false</bool>    
+
+    <integer name="def_bright_system">0</integer>
+    <integer name="def_brightness_light">1</integer>
+
+    <integer name="def_hdmi_output_mode">1</integer>
+
+    <integer name="def_hdmi_full_screen">0</integer>
+
 </resources>
diff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
index 2454fb0..8618d7c 100644
--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
@@ -1946,6 +1946,9 @@ public class DatabaseHelper extends SQLiteOpenHelper {
             // Set default tty mode
             loadSetting(stmt, Settings.System.TTY_MODE, 0);
 
+	    loadFractionSetting(stmt, Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ,
+                R.fraction.def_screen_auto_brightness_adj, 0);
+
             loadIntegerSetting(stmt, Settings.System.SCREEN_BRIGHTNESS,
                     R.integer.def_screen_brightness);
 
@@ -1966,6 +1969,31 @@ public class DatabaseHelper extends SQLiteOpenHelper {
 
             loadIntegerSetting(stmt, Settings.System.POINTER_SPEED,
                     R.integer.def_pointer_speed);
+
+			loadStringSetting(stmt, Settings.System.TIME_12_24,
+                    R.string.def_time_12_24);
+
+            loadStringSetting(stmt, Settings.System.ACCELEROMETER_COORDINATE,
+                    R.string.def_accelerometer_coordinate);
+
+            loadBooleanSetting(stmt, Settings.System.DISPLAY_ADAPTION_ENABLE,
+                    R.bool.def_display_adation_enable);
+			loadBooleanSetting(stmt, Settings.System.BOOT_FAST_ENABLE, 
+					R.bool.def_boot_fast_enable);
+			loadBooleanSetting(stmt, Settings.System.CPU_FAST_ENABLE, 
+					R.bool.def_cpu_fast_enable);			
+
+            loadIntegerSetting(stmt, Settings.System.BRIGHT_SYSTEM_MODE,
+                    R.integer.def_bright_system);
+
+            loadIntegerSetting(stmt, Settings.System.BRIGHTNESS_LIGHT_MODE,
+                    R.integer.def_brightness_light);
+
+            loadIntegerSetting(stmt, Settings.System.HDMI_OUTPUT_MODE,
+                    R.integer.def_hdmi_output_mode);
+
+            loadIntegerSetting(stmt, Settings.System.HDMI_FULL_SCREEN,
+                    R.integer.def_hdmi_full_screen);
         } finally {
             if (stmt != null) stmt.close();
         }
@@ -2014,8 +2042,9 @@ public class DatabaseHelper extends SQLiteOpenHelper {
             //loadSetting(stmt, Settings.Secure.ADB_ENABLED, 0);
 
             // Allow mock locations default, based on build
-            loadSetting(stmt, Settings.Secure.ALLOW_MOCK_LOCATION,
-                    "1".equals(SystemProperties.get("ro.allow.mock.location")) ? 1 : 0);
+            //loadSetting(stmt, Settings.Secure.ALLOW_MOCK_LOCATION,
+              //      "1".equals(SystemProperties.get("ro.allow.mock.location")) ? 1 : 0);
+		loadSetting(stmt, Settings.Secure.ALLOW_MOCK_LOCATION, 0);
 
             loadSecure35Settings(stmt);
 
@@ -2141,6 +2170,12 @@ public class DatabaseHelper extends SQLiteOpenHelper {
             loadBooleanSetting(stmt, Settings.Global.BLUETOOTH_ON,
                     R.bool.def_bluetooth_on);
 
+            loadBooleanSetting(stmt, Settings.Global.ETHERNET_ON,
+                    R.bool.def_ethernet_on);
+
+            loadBooleanSetting(stmt, Settings.Global.ETHERNET_MODE,
+                    R.bool.def_ethernet_mode);
+
             // Enable or disable Cell Broadcast SMS
             loadSetting(stmt, Settings.Global.CDMA_CELL_BROADCAST_SMS,
                     RILConstants.CDMA_CELL_BROADCAST_SMS_DISABLED);
diff --git a/packages/SystemUI/res/layout-sw600dp/navigation_bar.xml b/packages/SystemUI/res/layout-sw600dp/navigation_bar.xml
index b1104cc..31f21cb 100644
--- a/packages/SystemUI/res/layout-sw600dp/navigation_bar.xml
+++ b/packages/SystemUI/res/layout-sw600dp/navigation_bar.xml
@@ -53,6 +53,13 @@
                 android:layout_height="match_parent"
                 android:layout_weight="1"
                 />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/volume_down"
+                android:layout_width="128dp" android:paddingRight="8dp"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_volume_down"
+                systemui:keyCode="25"
+                systemui:glowBackground="@drawable/ic_sysbar_highlight"
+                />
             <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/back"
                 android:layout_width="128dp" android:paddingLeft="25dp" android:paddingRight="25dp"
                 android:layout_height="match_parent"
@@ -80,6 +87,13 @@
                 systemui:glowBackground="@drawable/ic_sysbar_highlight"
                 android:contentDescription="@string/accessibility_recent"
                 />
+            <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/volume_up"
+                android:layout_width="128dp" android:paddingLeft="8dp"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_volume_up"
+                systemui:keyCode="24"
+                systemui:glowBackground="@drawable/ic_sysbar_highlight"
+                />
             <Space 
                 android:layout_width="match_parent"
                 android:layout_height="match_parent"
@@ -112,6 +126,13 @@
                 android:layout_weight="1"
                 />
             <ImageView
+                android:layout_width="128dp"  android:paddingRight="8dp"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_lights_out_dot_small"
+                android:scaleType="center"
+                android:layout_weight="0"
+                />
+            <ImageView
                 android:layout_width="128dp" android:paddingLeft="25dp" android:paddingRight="25dp"
                 android:layout_height="match_parent"
                 android:layout_marginLeft="40dp"
@@ -134,6 +155,13 @@
                 android:scaleType="center"
                 android:layout_weight="0"
                 />
+            <ImageView
+                android:layout_width="128dp" android:paddingLeft="8dp" 
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_lights_out_dot_small"
+                android:scaleType="center"
+                android:layout_weight="0"
+                />
             <Space 
                 android:layout_width="match_parent"
                 android:layout_height="match_parent"
@@ -194,6 +222,13 @@
                 android:layout_height="match_parent"
                 android:layout_weight="1"
                 />
+	    <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/volume_down"
+		android:layout_width="162dp" android:paddingRight="4dp"
+		android:layout_height="match_parent"
+		android:src="@drawable/ic_sysbar_volume_down"
+		systemui:keyCode="25"
+		systemui:glowBackground="@drawable/ic_sysbar_highlight"
+		/>
             <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/back"
                 android:layout_width="162dp" android:paddingLeft="42dp" android:paddingRight="42dp"
                 android:layout_height="match_parent"
@@ -221,6 +256,13 @@
                 systemui:glowBackground="@drawable/ic_sysbar_highlight"
                 android:contentDescription="@string/accessibility_recent"
                 />
+	    <com.android.systemui.statusbar.policy.KeyButtonView android:id="@+id/volume_up"
+		android:layout_width="162dp" android:paddingLeft="4dp"
+		android:layout_height="match_parent"
+		android:src="@drawable/ic_sysbar_volume_up"
+		systemui:keyCode="24"
+		systemui:glowBackground="@drawable/ic_sysbar_highlight"
+		/>
             <Space 
                 android:layout_width="match_parent"
                 android:layout_height="match_parent"
@@ -253,6 +295,13 @@
                 android:layout_weight="1"
                 />
             <ImageView
+                android:layout_width="162dp"  android:paddingRight="4dp"
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_lights_out_dot_small"
+                android:scaleType="center"
+                android:layout_weight="0"
+                />
+            <ImageView
                 android:layout_width="162dp" android:paddingLeft="42dp" android:paddingRight="42dp"
                 android:layout_height="match_parent"
                 android:layout_marginLeft="40dp"
@@ -275,6 +324,13 @@
                 android:scaleType="center"
                 android:layout_weight="0"
                 />
+            <ImageView
+                android:layout_width="162dp" android:paddingLeft="4dp" 
+                android:layout_height="match_parent"
+                android:src="@drawable/ic_sysbar_lights_out_dot_small"
+                android:scaleType="center"
+                android:layout_weight="0"
+                />
             <Space 
                 android:layout_width="match_parent"
                 android:layout_height="match_parent"
diff --git a/packages/SystemUI/res/layout/quick_settings_brightness_dialog.xml b/packages/SystemUI/res/layout/quick_settings_brightness_dialog.xml
index f7b1d78..9085eae 100644
--- a/packages/SystemUI/res/layout/quick_settings_brightness_dialog.xml
+++ b/packages/SystemUI/res/layout/quick_settings_brightness_dialog.xml
@@ -21,19 +21,17 @@
 
     <ImageView
         android:id="@+id/brightness_icon"
-	    android:layout_width="wrap_content"
-	    android:layout_height="wrap_content"
-        android:layout_gravity="center_vertical"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
         android:paddingRight="10dp"
         android:src="@drawable/ic_qs_brightness_auto_off"
         />
     <com.android.systemui.statusbar.policy.ToggleSlider
         android:id="@+id/brightness_slider"
         android:layout_width="0dp"
-        android:layout_height="40dp"
+        android:layout_height="40dp"  
         android:layout_weight="1"
         android:layout_marginRight="2dp"
         android:layout_gravity="center_vertical"
-        systemui:text="@string/status_bar_settings_auto_brightness_label"
         />
 </LinearLayout>
diff --git a/packages/SystemUI/res/layout/signal_cluster_view.xml b/packages/SystemUI/res/layout/signal_cluster_view.xml
index 66c64c4..1f72805 100644
--- a/packages/SystemUI/res/layout/signal_cluster_view.xml
+++ b/packages/SystemUI/res/layout/signal_cluster_view.xml
@@ -45,6 +45,19 @@
             android:layout_gravity="center|bottom"
             />
     </FrameLayout>
+    <FrameLayout
+        android:id="@+id/ethernet_combo"
+        android:layout_height="wrap_content"
+        android:layout_width="wrap_content"
+        android:layout_marginRight="-6dp">
+        <ImageView
+            android:id="@+id/ethernet_state"
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:scaleType="center"/>
+    </FrameLayout>
     <View
         android:layout_height="6dp"
         android:layout_width="6dp"
diff --git a/packages/SystemUI/res/layout/status_bar.xml b/packages/SystemUI/res/layout/status_bar.xml
index bf20e9d..2975201 100644
--- a/packages/SystemUI/res/layout/status_bar.xml
+++ b/packages/SystemUI/res/layout/status_bar.xml
@@ -101,6 +101,13 @@
                     android:layout_width="wrap_content"
                     android:paddingLeft="4dip"
                     />
+                <TextView
+                    android:id="@+id/battery_text"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:paddingLeft="2dp"
+                    android:singleLine="true"
+                />
             </LinearLayout>
     
             <com.android.systemui.statusbar.policy.Clock
diff --git a/packages/SystemUI/res/layout/status_bar_toggle_slider.xml b/packages/SystemUI/res/layout/status_bar_toggle_slider.xml
index 3105dab..d1090e7 100644
--- a/packages/SystemUI/res/layout/status_bar_toggle_slider.xml
+++ b/packages/SystemUI/res/layout/status_bar_toggle_slider.xml
@@ -22,7 +22,7 @@
     >
     <CheckBox
         android:id="@+id/toggle"
-        android:layout_width="48dp"
+        android:layout_width="0dp"
         android:layout_height="0dp"
         android:layout_alignParentLeft="true"
         android:layout_alignParentTop="true"
diff --git a/packages/SystemUI/res/values-zh-rCN/strings.xml b/packages/SystemUI/res/values-zh-rCN/strings.xml
old mode 100644
new mode 100755
index 33d1f6d..4d15daf
--- a/packages/SystemUI/res/values-zh-rCN/strings.xml
+++ b/packages/SystemUI/res/values-zh-rCN/strings.xml
@@ -170,6 +170,11 @@
     <string name="accessibility_clear_all" msgid="5235938559247164925">"清除所有通知。"</string>
     <string name="status_bar_notification_inspect_item_title" msgid="1163547729015390250">"应用信息"</string>
     <string name="close_universe" msgid="3736513750241754348">"关闭"</string>
+
+    <!-- ethernet string  -->
+    <string name="ethernet_link">以太网连接到网络</string>
+    <string name="ethernet_description">以太网络</string>
+
     <string name="notifications_off_title" msgid="8936620513608443224">"通知功能已停用"</string>
     <string name="notifications_off_text" msgid="2529001315769385273">"点按此处可重新启用通知功能。"</string>
     <string name="accessibility_rotation_lock_off" msgid="4062780228931590069">"屏幕会自动旋转。"</string>
@@ -203,6 +208,28 @@
     <string name="quick_settings_wifi_display_no_connection_label" msgid="2355298740765736918">"无线显示"</string>
     <string name="quick_settings_brightness_dialog_title" msgid="8599674057673605368">"亮度"</string>
     <string name="quick_settings_brightness_dialog_auto_brightness_label" msgid="5064982743784071218">"自动"</string>
+    <!-- ethernet string  -->
+    <string name="quick_settings_ethernet_label">"已连接"</string>
+    <string name="quick_settings_ethernet_no_connection_label">"无连接"</string>
+
     <string name="status_bar_help_title" msgid="1199237744086469217">"通知会显示在这里"</string>
     <string name="status_bar_help_text" msgid="7874607155052076323">"向下滑动可随时查看通知。"\n"再次向下滑动可使用系统控制功能。"</string>
+	        <string name="usb_mounted_title">"USB设备接入"</string>
+	<string name="usb_mounted_message">"USB设备接入"</string>
+	<string name="sd_mounted_title">"SD卡设备接入"</string>
+	<string name="sd_mounted_message">"SD卡设备接入"</string>
+	
+	<string name="usb_nomedia_notification_title">"已移除 USB 设备"</string>
+	<string name="usb_nomedia_notification_message">"USB 设备已移除。"</string>
+        <string name="usb_badremoval_notification_title">"USB 存储设备已意外移除"</string>
+	<string name="usb_badremoval_notification_message">"请先卸载 USB 存储设备，再将其移除，以防数据丢失。"</string>
+
+  <!-- add by kinier: the usb port state notification message  --> 
+  <string name="usb_port_title">电压或电量过低</string>
+	<string name="usb_port_message">电压或电量过低:关闭USB端口</string>
+	<string name="usb_port_hint">USB设备不能使用</string>
+	
+	<!-- add by dk -->
+	<string name="status_bar_time_am">上午</string>
+	<string name="status_bar_time_pm">下午</string>
 </resources>
diff --git a/packages/SystemUI/res/values-zh-rTW/strings.xml b/packages/SystemUI/res/values-zh-rTW/strings.xml
old mode 100644
new mode 100755
index b96b8bc..76b2ae8
--- a/packages/SystemUI/res/values-zh-rTW/strings.xml
+++ b/packages/SystemUI/res/values-zh-rTW/strings.xml
@@ -205,4 +205,17 @@
     <string name="quick_settings_brightness_dialog_auto_brightness_label" msgid="5064982743784071218">"自動"</string>
     <string name="status_bar_help_title" msgid="1199237744086469217">"系統會在這裡顯示通知"</string>
     <string name="status_bar_help_text" msgid="7874607155052076323">"向下滑動即可隨時存取通知。"\n"再次向下滑動即可使用系統控制項。"</string>
+	    <string name="usb_mounted_title">"USB設備接入"</string>
+	<string name="usb_mounted_message">"USB設備接入"</string>
+	<string name="sd_mounted_title">"SD卡設備接入"</string>
+	<string name="sd_mounted_message">"SD卡設備接入"</string>
+	
+	<!-- add by kinier: the usb port state notification message  --> 
+  <string name="usb_port_title">電壓或電量過低</string>
+	<string name="usb_port_message">電壓或電量過低:關閉USB端口</string>
+	<string name="usb_port_hint">USB設備不能使用</string>
+	
+	<!-- add by dk -->
+	<string name="status_bar_time_am">上午</string>
+	<string name="status_bar_time_pm">下午</string>	
 </resources>
diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index a27630d..9a5a6a1 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -91,6 +91,12 @@
     <!-- Whether rotation lock shows up in quick settings or not -->
     <bool name="quick_settings_show_rotation_lock">false</bool>
 
+    <!-- Whether airplane switch shows up in quick settings or not -->
+    <bool name="quick_settings_show_airplane_switch">true</bool>
+
+    <!-- Whether bluetooth shows up in quick settings or not -->
+    <bool name="quick_settings_show_bluetooth_setting">true</bool>
+
     <!-- Timeouts for brightness dialog to disappear -->
     <integer name="quick_settings_brightness_dialog_short_timeout">2000</integer>
     <integer name="quick_settings_brightness_dialog_long_timeout">4000</integer>
diff --git a/packages/SystemUI/res/values/defaults.xml b/packages/SystemUI/res/values/defaults.xml
index df07a3d..8f911ab 100644
--- a/packages/SystemUI/res/values/defaults.xml
+++ b/packages/SystemUI/res/values/defaults.xml
@@ -17,4 +17,5 @@
  */
 -->
 <resources>
+	<bool name="hasVolumeButton">false</bool>
 </resources>
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index ed08115..aa0ae6b 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -205,4 +205,7 @@
     <!-- How far to slide the panel out when you touch it -->
     <!-- For phones, this is close_handle_height + header_height -->
     <dimen name="peek_height">84dp</dimen>
+    
+    <!-- add by dk -->
+		<dimen name="am_pm_font_size">12dp</dimen> 
 </resources>
diff --git a/packages/SystemUI/res/values/strings.xml b/packages/SystemUI/res/values/strings.xml
index f3db062..6524dbf 100644
--- a/packages/SystemUI/res/values/strings.xml
+++ b/packages/SystemUI/res/values/strings.xml
@@ -429,6 +429,10 @@
     <!-- Content description of the clear button in the notification panel for accessibility (not shown on the screen). [CHAR LIMIT=NONE] -->
     <string name="accessibility_clear_all">Clear all notifications.</string>
 
+    <!-- ethernet string  -->
+    <string name="ethernet_link">Ethernet connect to network</string>
+    <string name="ethernet_description">Ethernet</string>
+
     <!-- Title shown in notification popup for inspecting the responsible
          application -->
     <string name="status_bar_notification_inspect_item_title">App info</string>
@@ -512,8 +516,33 @@
     <!-- QuickSettings: Brightness dialog auto brightness button [CHAR LIMIT=NONE] -->
     <string name="quick_settings_brightness_dialog_auto_brightness_label">AUTO</string>
 
+    <!-- QuickSettings: Ethernet [CHAR LIMIT=NONE] -->
+    <string name="quick_settings_ethernet_label">Connected</string>
+    <!-- QuickSettings: Ethernet [CHAR LIMIT=NONE] -->
+    <string name="quick_settings_ethernet_no_connection_label">No Connection</string>
+
     <!-- Title of help text shown when the notification panel is pulled down for the very first time. [CHAR LIMIT=NONE] -->
     <string name="status_bar_help_title">Notifications appear here</string>
     <!-- Body of help text shown when the notification panel is pulled down for the very first time. [CHAR LIMIT=NONE] -->
     <string name="status_bar_help_text">Access them anytime by swiping down.\nSwipe down again for system controls.</string>
+	    	<!-- notify devices mounted -->
+	<string name="usb_mounted_title">usb is mounted</string>
+	<string name="usb_mounted_message">usb is mounted</string>
+	<string name="sd_mounted_title">sdcard is mounted</string>
+	<string name="sd_mounted_message">sdcard is mounted</string>
+	
+	<string name="usb_nomedia_notification_title">Removed USB storage</string>
+	<string name="usb_nomedia_notification_message">USB storage removed. Insert new media.</string>
+	
+	<string name="usb_badremoval_notification_title">USB storage unexpectedly removed</string>
+	<string name="usb_badremoval_notification_message">Unmount USB storage before removing to avoid data loss.</string>
+	
+	<!-- add by kinier: the usb port state notification message  --> 
+	<string name="usb_port_title">Low voltage or power</string>
+	<string name="usb_port_message">Low voltage or power:Close the USB port</string>
+	<string name="usb_port_hint">USB device does not work</string>
+	
+	<!-- add by dk -->
+	<string name="status_bar_time_am">AM</string>
+	<string name="status_bar_time_pm">PM</string>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/power/PowerUI.java b/packages/SystemUI/src/com/android/systemui/power/PowerUI.java
index ccb711a..7c6ea11 100644
--- a/packages/SystemUI/src/com/android/systemui/power/PowerUI.java
+++ b/packages/SystemUI/src/com/android/systemui/power/PowerUI.java
@@ -31,6 +31,7 @@ import android.net.Uri;
 import android.os.BatteryManager;
 import android.os.Handler;
 import android.os.UserHandle;
+import android.os.PowerManager;
 import android.media.AudioManager;
 import android.media.Ringtone;
 import android.media.RingtoneManager;
@@ -236,7 +237,11 @@ public class PowerUI extends SystemUI {
         if (DEBUG) {
             Slog.i(TAG, "playing low battery sound. WOMP-WOMP!");
         }
-
+		PowerManager mPM = (PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
+		if(mPM.isBootFastStatus()){
+			Slog.i(TAG,"in boot fast status not play low power sound because we 'real shutduon'");
+			return;
+		}
         final ContentResolver cr = mContext.getContentResolver();
         if (Settings.Global.getInt(cr, Settings.Global.POWER_SOUNDS_ENABLED, 1) == 1) {
             final String soundPath = Settings.Global.getString(cr,
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/SignalClusterView.java b/packages/SystemUI/src/com/android/systemui/statusbar/SignalClusterView.java
index 1321ade..568dbef 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/SignalClusterView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/SignalClusterView.java
@@ -41,14 +41,16 @@ public class SignalClusterView
 
     private boolean mWifiVisible = false;
     private int mWifiStrengthId = 0, mWifiActivityId = 0;
+    private boolean mEthernetVisible = false;
+    private int mEthernetStateId = 0, mEthernetActivityId = 0;
     private boolean mMobileVisible = false;
     private int mMobileStrengthId = 0, mMobileActivityId = 0, mMobileTypeId = 0;
     private boolean mIsAirplaneMode = false;
     private int mAirplaneIconId = 0;
-    private String mWifiDescription, mMobileDescription, mMobileTypeDescription;
+    private String mWifiDescription, mMobileDescription, mMobileTypeDescription, mEthernetDescription;
 
-    ViewGroup mWifiGroup, mMobileGroup;
-    ImageView mWifi, mMobile, mWifiActivity, mMobileActivity, mMobileType, mAirplane;
+    ViewGroup mWifiGroup, mMobileGroup, mEthernetGroup;
+    ImageView mWifi, mMobile, mWifiActivity, mMobileActivity, mMobileType, mAirplane, mEthernet;
     View mSpacer;
 
     public SignalClusterView(Context context) {
@@ -81,6 +83,8 @@ public class SignalClusterView
         mMobileType     = (ImageView) findViewById(R.id.mobile_type);
         mSpacer         =             findViewById(R.id.spacer);
         mAirplane       = (ImageView) findViewById(R.id.airplane);
+        mEthernetGroup  = (ViewGroup) findViewById(R.id.ethernet_combo);
+        mEthernet       = (ImageView) findViewById(R.id.ethernet_state);
 
         apply();
     }
@@ -96,6 +100,8 @@ public class SignalClusterView
         mMobileType     = null;
         mSpacer         = null;
         mAirplane       = null;
+        mEthernetGroup  = null;
+        mEthernet       = null;
 
         super.onDetachedFromWindow();
     }
@@ -125,6 +131,21 @@ public class SignalClusterView
     }
 
     @Override
+    public void setEthernetIndicators(boolean visible, int strengthIcon, int activityIcon,
+                    String contentDescription) {
+        mEthernetVisible = visible;
+        mEthernetStateId = strengthIcon;
+        mEthernetActivityId = activityIcon;
+        mEthernetDescription = contentDescription;
+        if(mEthernetDescription == null || mEthernetDescription.isEmpty()) {
+            mEthernetDescription = "Ethernet";
+            if(DEBUG)
+                Slog.d(TAG, "mEthernetDescription is empty.");
+        }
+        apply();
+    }
+
+    @Override
     public void setIsAirplaneMode(boolean is, int airplaneIconId) {
         mIsAirplaneMode = is;
         mAirplaneIconId = airplaneIconId;
@@ -161,6 +182,19 @@ public class SignalClusterView
                     (mWifiVisible ? "VISIBLE" : "GONE"),
                     mWifiStrengthId, mWifiActivityId));
 
+        if(mEthernetVisible){
+            mEthernetGroup.setVisibility(View.VISIBLE);
+            mEthernet.setImageResource(mEthernetStateId);
+            mEthernetGroup.setContentDescription(mEthernetDescription);
+        } else {
+            mEthernetGroup.setVisibility(View.GONE);
+        }
+
+        if (DEBUG) Slog.d(TAG,
+                String.format("eth: %s sig=%d act=%d",
+                    (mEthernetVisible ? "VISIBLE" : "GONE"),
+                    mEthernetStateId, mEthernetActivityId));
+
         if (mMobileVisible && !mIsAirplaneMode) {
             mMobileGroup.setVisibility(View.VISIBLE);
             mMobile.setImageResource(mMobileStrengthId);
@@ -178,7 +212,7 @@ public class SignalClusterView
             mAirplane.setVisibility(View.GONE);
         }
 
-        if (mMobileVisible && mWifiVisible && mIsAirplaneMode) {
+        if (mMobileVisible && (mWifiVisible || mEthernetVisible) && mIsAirplaneMode) {
             mSpacer.setVisibility(View.INVISIBLE);
         } else {
             mSpacer.setVisibility(View.GONE);
@@ -190,7 +224,7 @@ public class SignalClusterView
                     mMobileStrengthId, mMobileActivityId, mMobileTypeId));
 
         mMobileType.setVisibility(
-                !mWifiVisible ? View.VISIBLE : View.GONE);
+                !(mWifiVisible || mEthernetVisible) ? View.VISIBLE : View.GONE);
     }
 }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index 5eeef93..6471c3c 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -147,6 +147,14 @@ public class NavigationBarView extends LinearLayout {
     public View getHomeButton() {
         return mCurrentView.findViewById(R.id.home);
     }
+    // add volume key, 2013-4-25 13:43:23
+    public View getVolumeUpButton() {
+        return mCurrentView.findViewById(R.id.volume_up);
+    }
+
+    public View getVolumeDownButton() {
+        return mCurrentView.findViewById(R.id.volume_down);
+    }
 
     // for when home is disabled, but search isn't
     public View getSearchLight() {
@@ -220,6 +228,12 @@ public class NavigationBarView extends LinearLayout {
         getRecentsButton().setAlpha(
             (0 != (hints & StatusBarManager.NAVIGATION_HINT_RECENT_NOP)) ? 0.5f : 1.0f);
 
+        // add volume key, 2013-4-25 13:43:23, keep Alpha same with HOME button
+        getVolumeUpButton().setAlpha(
+            (0 != (hints & StatusBarManager.NAVIGATION_HINT_HOME_NOP)) ? 0.5f : 1.0f);
+        getVolumeDownButton().setAlpha(
+            (0 != (hints & StatusBarManager.NAVIGATION_HINT_HOME_NOP)) ? 0.5f : 1.0f);
+
         ((ImageView)getBackButton()).setImageDrawable(
             (0 != (hints & StatusBarManager.NAVIGATION_HINT_BACK_ALT))
                 ? (mVertical ? mBackAltLandIcon : mBackAltIcon)
@@ -242,6 +256,9 @@ public class NavigationBarView extends LinearLayout {
         final boolean disableBack = ((disabledFlags & View.STATUS_BAR_DISABLE_BACK) != 0)
                 && ((mNavigationIconHints & StatusBarManager.NAVIGATION_HINT_BACK_ALT) == 0);
         final boolean disableSearch = ((disabledFlags & View.STATUS_BAR_DISABLE_SEARCH) != 0);
+        // add volume key, 2013-4-25 13:43:23, keep visibility same with HOME button
+        final boolean disableVolumeup = (disabledFlags != 0);
+        final boolean disableVolumedown = (disabledFlags != 0);
 
         if (SLIPPERY_WHEN_DISABLED) {
             setSlippery(disableHome && disableRecent && disableBack && disableSearch);
@@ -261,6 +278,14 @@ public class NavigationBarView extends LinearLayout {
         getHomeButton()   .setVisibility(disableHome       ? View.INVISIBLE : View.VISIBLE);
         getRecentsButton().setVisibility(disableRecent     ? View.INVISIBLE : View.VISIBLE);
 
+        // add volume key, 2013-4-25 13:43:23, keep visibility same with HOME button
+        if (getResources().getBoolean(R.bool.hasVolumeButton)) {
+                getVolumeUpButton().setVisibility(disableVolumeup ? View.INVISIBLE : View.VISIBLE);
+                getVolumeDownButton().setVisibility(disableVolumedown ? View.INVISIBLE : View.VISIBLE);
+        } else {
+                getVolumeUpButton().setVisibility(View.INVISIBLE);
+                getVolumeDownButton().setVisibility(View.INVISIBLE);
+        }
         getSearchLight().setVisibility((disableHome && !disableSearch) ? View.VISIBLE : View.GONE);
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index 30af333..3bd6e0e 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -494,6 +494,7 @@ public class PhoneStatusBar extends BaseStatusBar {
         mLocationController = new LocationController(mContext); // will post a notification
         mBatteryController = new BatteryController(mContext);
         mBatteryController.addIconView((ImageView)mStatusBarView.findViewById(R.id.battery));
+        //mBatteryController.addLabelView((TextView)mStatusBarView.findViewById(R.id.battery_text));
         mNetworkController = new NetworkController(mContext);
         mBluetoothController = new BluetoothController(mContext);
         final SignalClusterView signalCluster =
@@ -609,6 +610,7 @@ public class PhoneStatusBar extends BaseStatusBar {
         filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
         filter.addAction(Intent.ACTION_SCREEN_OFF);
         filter.addAction(Intent.ACTION_SCREEN_ON);
+		filter.addAction(Intent.ACTION_BOOT_FAST);
         context.registerReceiver(mBroadcastReceiver, filter);
 
         // listen for USER_SETUP_COMPLETE setting (per-user)
@@ -2256,6 +2258,16 @@ public class PhoneStatusBar extends BaseStatusBar {
         }
     };
 
+    private void clearAll() {
+        try {
+            mBarService.onClearAllNotifications();
+        } catch (RemoteException ex) {
+            // system process is dead if we're here.
+        }
+        animateCollapsePanels();
+        visibilityChanged(true);
+    }
+	
     private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
         public void onReceive(Context context, Intent intent) {
             if (DEBUG) Slog.v(TAG, "onReceive: " + intent);
@@ -2290,6 +2302,9 @@ public class PhoneStatusBar extends BaseStatusBar {
                 // work around problem where mDisplay.getRotation() is not stable while screen is off (bug 7086018)
                 repositionNavigationBar();
                 notifyNavigationBarScreenOn(true);
+            }else if(Intent.ACTION_BOOT_FAST.equals(action)){
+				Slog.d(TAG,"action boot fast remove all notification");
+				clearAll();
             }
         }
     };
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
index 9b8bd22..497c771 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java
@@ -132,6 +132,9 @@ public class PhoneStatusBarPolicy {
             else if (action.equals(TtyIntent.TTY_ENABLED_CHANGE_ACTION)) {
                 updateTTY(intent);
             }
+	    else if (action.equals(Intent.ACTION_HEADSET_PLUG)) {
+	        updateHeadset(intent);
+	    }
         }
     };
 
@@ -148,6 +151,7 @@ public class PhoneStatusBarPolicy {
         filter.addAction(BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED);
         filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
         filter.addAction(TtyIntent.TTY_ENABLED_CHANGE_ACTION);
+ 	    filter.addAction(Intent.ACTION_HEADSET_PLUG); 
         mContext.registerReceiver(mIntentReceiver, filter, null, mHandler);
 
         // storage
@@ -189,6 +193,9 @@ public class PhoneStatusBarPolicy {
         mService.setIcon("volume", R.drawable.stat_sys_ringer_silent, 0, null);
         mService.setIconVisibility("volume", false);
         updateVolume();
+
+        mService.setIcon("headset", R.drawable.headset, 0, null);
+	mService.setIconVisibility("headset", false ); 
     }
 
     private final void updateAlarm(Intent intent) {
@@ -298,4 +305,9 @@ public class PhoneStatusBarPolicy {
             mService.setIconVisibility("tty", false);
         }
     }
+
+    private final void updateHeadset(Intent intent) {
+	    Slog.d(TAG, "updateHeadset: state=" + intent.getIntExtra("state" , 0));
+	    mService.setIconVisibility("headset", (intent.getIntExtra("state" , 0 ) == 1 )?true :false ); 
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/QuickSettings.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/QuickSettings.java
index 9b0a320..94b85bc 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/QuickSettings.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/QuickSettings.java
@@ -56,6 +56,9 @@ import android.graphics.drawable.LevelListDrawable;
 import android.hardware.display.DisplayManager;
 import android.hardware.display.WifiDisplayStatus;
 import android.net.wifi.WifiManager;
+import android.net.ethernet.EthernetManager;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
 import android.os.AsyncTask;
 import android.os.Handler;
 import android.os.RemoteException;
@@ -100,6 +103,9 @@ class QuickSettings {
     private BluetoothAdapter mBluetoothAdapter;
     private WifiManager mWifiManager;
 
+    private ConnectivityManager mCm;
+    private boolean mEthernetConnected;
+
     private BrightnessController mBrightnessController;
     private BluetoothController mBluetoothController;
 
@@ -141,6 +147,17 @@ class QuickSettings {
 
         mHandler = new Handler();
 
+        mCm = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        if(mCm != null) {
+            NetworkInfo networkinfo = mCm.getNetworkInfo(ConnectivityManager.TYPE_ETHERNET);
+            if(networkinfo.isConnected()) {
+                mEthernetConnected = true;
+            } else {
+                mEthernetConnected = false;
+            }
+        } else
+            mEthernetConnected = false;
+
         Resources r = mContext.getResources();
         mBatteryLevels = (LevelListDrawable) r.getDrawable(R.drawable.qs_sys_battery);
         mChargingBatteryLevels =
@@ -155,6 +172,7 @@ class QuickSettings {
         filter.addAction(BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED);
         filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
         filter.addAction(Intent.ACTION_USER_SWITCHED);
+        filter.addAction(EthernetManager.NETWORK_STATE_CHANGED_ACTION);
         mContext.registerReceiver(mReceiver, filter);
 
         IntentFilter profileFilter = new IntentFilter();
@@ -187,6 +205,7 @@ class QuickSettings {
         setupQuickSettings();
         updateWifiDisplayStatus();
         updateResources();
+        updateEthernetStatus();
 
         networkController.addNetworkSignalChangedCallback(mModel);
         bluetoothController.addStateChangedCallback(mModel);
@@ -548,27 +567,32 @@ class QuickSettings {
         parent.addView(batteryTile);
 
         // Airplane Mode
-        QuickSettingsTileView airplaneTile = (QuickSettingsTileView)
-                inflater.inflate(R.layout.quick_settings_tile, parent, false);
-        airplaneTile.setContent(R.layout.quick_settings_tile_airplane, inflater);
-        mModel.addAirplaneModeTile(airplaneTile, new QuickSettingsModel.RefreshCallback() {
-            @Override
-            public void refreshView(QuickSettingsTileView view, State state) {
-                TextView tv = (TextView) view.findViewById(R.id.airplane_mode_textview);
-                tv.setCompoundDrawablesWithIntrinsicBounds(0, state.iconId, 0, 0);
+	// add condition for AirplaneTile, yemao, 2013-5-27 19:52:14
+	if (mContext.getResources().getBoolean(R.bool.quick_settings_show_airplane_switch)) {
+            QuickSettingsTileView airplaneTile = (QuickSettingsTileView)
+                    inflater.inflate(R.layout.quick_settings_tile, parent, false);
+            airplaneTile.setContent(R.layout.quick_settings_tile_airplane, inflater);
+            mModel.addAirplaneModeTile(airplaneTile, new QuickSettingsModel.RefreshCallback() {
+                @Override
+                public void refreshView(QuickSettingsTileView view, State state) {
+                    TextView tv = (TextView) view.findViewById(R.id.airplane_mode_textview);
+                    tv.setCompoundDrawablesWithIntrinsicBounds(0, state.iconId, 0, 0);
 
-                String airplaneState = mContext.getString(
-                        (state.enabled) ? R.string.accessibility_desc_on
-                                : R.string.accessibility_desc_off);
-                view.setContentDescription(
-                        mContext.getString(R.string.accessibility_quick_settings_airplane, airplaneState));
-                tv.setText(state.label);
-            }
-        });
-        parent.addView(airplaneTile);
+                    String airplaneState = mContext.getString(
+                            (state.enabled) ? R.string.accessibility_desc_on
+                                    : R.string.accessibility_desc_off);
+                    view.setContentDescription(
+                            mContext.getString(R.string.accessibility_quick_settings_airplane, airplaneState));
+                    tv.setText(state.label);
+                }
+            });
+            parent.addView(airplaneTile);
+        }
 
         // Bluetooth
-        if (mModel.deviceSupportsBluetooth()) {
+	// add condition for BluetoothTile, yemao, 2013-5-27 19:52:40
+        if (mModel.deviceSupportsBluetooth()
+            && mContext.getResources().getBoolean(R.bool.quick_settings_show_bluetooth_setting)) {
             final QuickSettingsTileView bluetoothTile = (QuickSettingsTileView)
                     inflater.inflate(R.layout.quick_settings_tile, parent, false);
             bluetoothTile.setContent(R.layout.quick_settings_tile_bluetooth, inflater);
@@ -635,7 +659,7 @@ class QuickSettings {
                 // TODO: Jump into the alarm application
                 Intent intent = new Intent();
                 intent.setComponent(new ComponentName(
-                        "com.google.android.deskclock",
+                        "com.android.deskclock",
                         "com.android.deskclock.AlarmClock"));
                 startSettingsActivity(intent);
             }
@@ -693,6 +717,27 @@ class QuickSettings {
         });
         parent.addView(wifiDisplayTile);
 
+        // Ethernet
+        QuickSettingsTileView ethernetTile = (QuickSettingsTileView)
+                inflater.inflate(R.layout.quick_settings_tile, parent, false);
+        ethernetTile.setContent(R.layout.quick_settings_tile_ethernet, inflater);
+        ethernetTile.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startSettingsActivity(android.provider.Settings.ACTION_ETHERNET_SETTINGS);
+            }
+        });
+        mModel.addEthernetTile(ethernetTile, new QuickSettingsModel.RefreshCallback() {
+            @Override
+            public void refreshView(QuickSettingsTileView view, State state) {
+                TextView tv = (TextView) view.findViewById(R.id.ethernet_textview);
+                tv.setText(state.label);
+                tv.setCompoundDrawablesWithIntrinsicBounds(0, state.iconId, 0, 0);
+                view.setVisibility(state.enabled ? View.VISIBLE : View.GONE);
+            }
+        });
+        parent.addView(ethernetTile);
+
         if (SHOW_IME_TILE) {
             // IME
             QuickSettingsTileView imeTile = (QuickSettingsTileView)
@@ -881,6 +926,25 @@ class QuickSettings {
         mModel.onWifiDisplayStateChanged(mWifiDisplayStatus);
     }
 
+    private void updateEthernetStatus() {
+        mCm = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        if(mCm != null) {
+            NetworkInfo networkinfo = mCm.getNetworkInfo(ConnectivityManager.TYPE_ETHERNET);
+            if(networkinfo.isConnected()) {
+                mEthernetConnected = true;
+            } else {
+                mEthernetConnected = false;
+            }
+        } else
+            mEthernetConnected = false;
+
+        applyEthernetStatus();
+    }
+
+    private void applyEthernetStatus() {
+        mModel.onEthernetStateChanged(mEthernetConnected);
+    }
+
     private void applyBluetoothStatus() {
         mModel.onBluetoothStateChange(mBluetoothState);
     }
@@ -916,6 +980,11 @@ class QuickSettings {
                 applyBluetoothStatus();
             } else if (Intent.ACTION_USER_SWITCHED.equals(action)) {
                 reloadUserInfo();
+            } else if (action.equals(EthernetManager.NETWORK_STATE_CHANGED_ACTION)) {
+                final NetworkInfo networkInfo =
+                            (NetworkInfo) intent.getParcelableExtra(EthernetManager.EXTRA_NETWORK_INFO);
+                mEthernetConnected = networkInfo != null && networkInfo.isConnected();
+                applyEthernetStatus();
             }
         }
     };
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/QuickSettingsModel.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/QuickSettingsModel.java
index 00991c1..c1d69c6 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/QuickSettingsModel.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/QuickSettingsModel.java
@@ -199,6 +199,10 @@ class QuickSettingsModel implements BluetoothStateChangeCallback,
     private RefreshCallback mWifiDisplayCallback;
     private State mWifiDisplayState = new State();
 
+    private QuickSettingsTileView mEthernetTile;
+    private RefreshCallback mEthernetCallback;
+    private State mEthernetState = new State();
+
     private QuickSettingsTileView mRSSITile;
     private RefreshCallback mRSSICallback;
     private RSSIState mRSSIState = new RSSIState();
@@ -327,16 +331,18 @@ class QuickSettingsModel implements BluetoothStateChangeCallback,
     // Airplane Mode
     void addAirplaneModeTile(QuickSettingsTileView view, RefreshCallback cb) {
         mAirplaneModeTile = view;
-        mAirplaneModeTile.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (mAirplaneModeState.enabled) {
-                    setAirplaneModeState(false);
-                } else {
-                    setAirplaneModeState(true);
+	if (mAirplaneModeTile != null) {
+            mAirplaneModeTile.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (mAirplaneModeState.enabled) {
+                        setAirplaneModeState(false);
+                    } else {
+                        setAirplaneModeState(true);
+                    }
                 }
-            }
-        });
+            });
+        }
         mAirplaneModeCallback = cb;
         int airplaneMode = Settings.Global.getInt(mContext.getContentResolver(),
                 Settings.Global.AIRPLANE_MODE_ON, 0);
@@ -364,7 +370,10 @@ class QuickSettingsModel implements BluetoothStateChangeCallback,
                 R.drawable.ic_qs_airplane_on :
                 R.drawable.ic_qs_airplane_off);
         mAirplaneModeState.label = r.getString(R.string.quick_settings_airplane_mode_label);
-        mAirplaneModeCallback.refreshView(mAirplaneModeTile, mAirplaneModeState);
+        // may be called before addAirplaneModeTile
+	if (mAirplaneModeTile != null) {
+            mAirplaneModeCallback.refreshView(mAirplaneModeTile, mAirplaneModeState);
+	}
     }
 
     // Wifi
@@ -494,7 +503,9 @@ class QuickSettingsModel implements BluetoothStateChangeCallback,
             mBluetoothState.label = r.getString(R.string.quick_settings_bluetooth_off_label);
             mBluetoothState.stateContentDescription = r.getString(R.string.accessibility_desc_off);
         }
-        mBluetoothCallback.refreshView(mBluetoothTile, mBluetoothState);
+	if (mBluetoothCallback != null) {
+        	mBluetoothCallback.refreshView(mBluetoothTile, mBluetoothState);
+	}
     }
     void refreshBluetoothTile() {
         if (mBluetoothTile != null) {
@@ -572,6 +583,24 @@ class QuickSettingsModel implements BluetoothStateChangeCallback,
 
     }
 
+    // Ethernet
+    void addEthernetTile(QuickSettingsTileView view, RefreshCallback cb) {
+        mEthernetTile = view;
+        mEthernetCallback = cb;
+    }
+    public void onEthernetStateChanged(boolean on) {
+        mEthernetState.enabled = on;
+        if (on) {
+            mEthernetState.label = mContext.getString(R.string.quick_settings_ethernet_label);
+            mEthernetState.iconId = R.drawable.ic_qs_ethernet_established;
+        } else {
+            mEthernetState.label = mContext.getString(
+                    R.string.quick_settings_ethernet_no_connection_label);
+            mEthernetState.iconId = R.drawable.ic_qs_ethernet_error;
+        }
+        mEthernetCallback.refreshView(mEthernetTile, mEthernetState);
+    }
+
     // IME
     void addImeTile(QuickSettingsTileView view, RefreshCallback cb) {
         mImeTile = view;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/DateView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/DateView.java
index 1d6b3d1..d81d8f0 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/DateView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/DateView.java
@@ -25,9 +25,13 @@ import android.util.AttributeSet;
 import android.view.View;
 import android.view.ViewParent;
 import android.widget.TextView;
+import android.text.SpannableString;	// add by dk
+import android.text.Spanned;			// add by dk
+import android.text.style.AbsoluteSizeSpan;		// add by dk
 
 import com.android.systemui.R;
 
+import java.util.Calendar;		// add by dk
 import java.util.Date;
 
 public class DateView extends TextView {
@@ -88,7 +92,25 @@ public class DateView extends TextView {
 
     protected void updateClock() {
         final String dateFormat = getContext().getString(R.string.abbrev_wday_month_day_no_year);
-        setText(DateFormat.format(dateFormat, new Date()));
+
+        /** add by dk **/
+		String strDate = new String(DateFormat.format(dateFormat, new Date()).toString());
+		String strAmOrPm = new String("");
+
+        String strTimeFormat = android.provider.Settings.System.getString(getContext().getContentResolver(), android.provider.Settings.System.TIME_12_24);
+  
+        if(strTimeFormat.equals("12"))
+		{
+			strAmOrPm = new String(getAmOrPm());
+			strAmOrPm += "   ";		// keep spacing
+        }
+
+        String strText = strAmOrPm + strDate;
+		SpannableString msp = new SpannableString(strText); 
+		int nfontSize = getContext().getResources().getDimensionPixelSize(R.dimen.am_pm_font_size);		// set xxdp in dimens.xml, this method just return xx as px
+		msp.setSpan(new AbsoluteSizeSpan(nfontSize), 0, strAmOrPm.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+
+		setText(msp);
     }
 
     private boolean isVisible() {
@@ -123,4 +145,23 @@ public class DateView extends TextView {
             }
         }
     }
+    
+    /** add by dk **/
+    private String getAmOrPm()
+    {
+		Calendar c = Calendar.getInstance();  
+
+		String amPmValues; 
+
+		if(c.get(Calendar.AM_PM) == 0)
+		{ 
+			amPmValues = getContext().getString(R.string.status_bar_time_am);
+		}
+		else
+		{ 
+			amPmValues = getContext().getString(R.string.status_bar_time_pm); 
+		}
+
+		return amPmValues;
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkController.java
index bbb90c8..74eae4f 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkController.java
@@ -27,6 +27,7 @@ import android.net.wifi.WifiConfiguration;
 import android.net.wifi.WifiInfo;
 import android.net.wifi.WifiManager;
 import android.net.wimax.WimaxManagerConstants;
+import android.net.ethernet.EthernetManager;
 import android.os.Binder;
 import android.os.Handler;
 import android.os.Message;
@@ -93,6 +94,7 @@ public class NetworkController extends BroadcastReceiver {
     String mContentDescriptionPhoneSignal;
     String mContentDescriptionWifi;
     String mContentDescriptionWimax;
+    String mContentDescriptionEthernet;
     String mContentDescriptionCombinedSignal;
     String mContentDescriptionDataType;
 
@@ -107,6 +109,11 @@ public class NetworkController extends BroadcastReceiver {
     int mWifiActivityIconId = 0; // overlay arrows for wifi direction
     int mWifiActivity = WifiManager.DATA_ACTIVITY_NONE;
 
+    // ethernet
+    boolean mEthernetConnected;
+    int mEthernetIconId = R.drawable.stat_sys_ethernet_error;
+    int mEthernetActivityIconId = 0; // overlay arrows for ethernet direction
+
     // bluetooth
     private boolean mBluetoothTethered = false;
     private int mBluetoothTetherIconId =
@@ -170,6 +177,8 @@ public class NetworkController extends BroadcastReceiver {
                 String contentDescription);
         void setMobileDataIndicators(boolean visible, int strengthIcon, int activityIcon,
                 int typeIcon, String contentDescription, String typeContentDescription);
+        void setEthernetIndicators(boolean visible, int strengthIcon,
+                int activityIcon, String contentDescription);
         void setIsAirplaneMode(boolean is, int airplaneIcon);
     }
 
@@ -235,6 +244,7 @@ public class NetworkController extends BroadcastReceiver {
         filter.addAction(TelephonyIntents.SPN_STRINGS_UPDATED_ACTION);
         filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
         filter.addAction(ConnectivityManager.INET_CONDITION_ACTION);
+        filter.addAction(EthernetManager.NETWORK_STATE_CHANGED_ACTION);
         filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
         filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
         mWimaxSupported = mContext.getResources().getBoolean(
@@ -322,6 +332,13 @@ public class NetworkController extends BroadcastReceiver {
                 mWifiActivityIconId,
                 mContentDescriptionWifi);
 
+        // only show ethernet int the cluster if connected or connecting
+        cluster.setEthernetIndicators(
+                mEthernetConnected,
+                mEthernetIconId,
+                mEthernetActivityIconId,
+                mContentDescriptionEthernet);
+
         if (mIsWimaxEnabled && mWimaxConnected) {
             // wimax is special
             cluster.setMobileDataIndicators(
@@ -407,6 +424,12 @@ public class NetworkController extends BroadcastReceiver {
                 action.equals(WimaxManagerConstants.WIMAX_NETWORK_STATE_CHANGED_ACTION)) {
             updateWimaxState(intent);
             refreshViews();
+        } else if (action.equals(EthernetManager.NETWORK_STATE_CHANGED_ACTION)) {
+            if(DEBUG) {
+                Slog.d(TAG, "EthernetManger network state change.");
+            }
+            updateEthernetState(intent);
+            refreshViews();
         }
     }
 
@@ -900,6 +923,28 @@ public class NetworkController extends BroadcastReceiver {
         return null;
     }
 
+    // ===== Ethernet State =========================================================
+    private void updateEthernetState(Intent intent) {
+        final String action = intent.getAction();
+        if (action.equals(EthernetManager.NETWORK_STATE_CHANGED_ACTION)) {
+            final NetworkInfo networkInfo =
+                            (NetworkInfo) intent.getParcelableExtra(EthernetManager.EXTRA_NETWORK_INFO);
+            mEthernetConnected = networkInfo != null && networkInfo.isConnected();
+            if(DEBUG) Slog.d(TAG, "updateEthernetState: mEthernetConnected = " + mEthernetConnected + ".");
+        }
+
+        updateEthernetIcons();
+    }
+
+    private void updateEthernetIcons(){
+        if (mEthernetConnected) {
+            mEthernetIconId = R.drawable.stat_sys_ethernet_established;
+            mContentDescriptionEthernet = mContext.getString(R.string.ethernet_description);
+        } else {
+            mEthernetIconId = R.drawable.stat_sys_ethernet_error;
+            //mContentDescriptionEthernet = "DISCONNECTED";
+        }
+    }
 
     // ===== Wimax ===================================================================
     private final void updateWimaxState(Intent intent) {
@@ -986,6 +1031,7 @@ public class NetworkController extends BroadcastReceiver {
         updateDataIcon();
         updateTelephonySignalStrength();
         updateWifiIcons();
+        updateEthernetIcons();
     }
 
 
@@ -1101,6 +1147,14 @@ public class NetworkController extends BroadcastReceiver {
                     R.string.accessibility_bluetooth_tether);
         }
 
+        if (mEthernetConnected) {
+            if(DEBUG) Slog.d(TAG, "show ethernet icon in statusbar.");
+            combinedLabel = mContext.getString(R.string.ethernet_link);//change below to "Ethernet"
+            combinedActivityIconId = mEthernetIconId;
+            combinedSignalIconId = mEthernetIconId;
+            mContentDescriptionCombinedSignal = mContentDescriptionEthernet;
+        }
+
         final boolean ethernetConnected = (mConnectedNetworkType == ConnectivityManager.TYPE_ETHERNET);
         if (ethernetConnected) {
             combinedLabel = context.getString(R.string.ethernet_label);
@@ -1133,7 +1187,7 @@ public class NetworkController extends BroadcastReceiver {
                 combinedSignalIconId = mDataSignalIconId;
             }
         }
-        else if (!mDataConnected && !mWifiConnected && !mBluetoothTethered && !mWimaxConnected && !ethernetConnected) {
+        else if (!mDataConnected && !mWifiConnected && !mBluetoothTethered && !mWimaxConnected && !mEthernetConnected) {
             // pretty much totally disconnected
 
             combinedLabel = context.getString(R.string.status_bar_settings_signal_meter_disconnected);
diff --git a/packages/SystemUI/src/com/android/systemui/usb/StorageNotification.java b/packages/SystemUI/src/com/android/systemui/usb/StorageNotification.java
index 06696fe..888a57b 100644
--- a/packages/SystemUI/src/com/android/systemui/usb/StorageNotification.java
+++ b/packages/SystemUI/src/com/android/systemui/usb/StorageNotification.java
@@ -30,6 +30,9 @@ import android.os.storage.StorageEventListener;
 import android.os.storage.StorageManager;
 import android.provider.Settings;
 import android.util.Slog;
+import com.android.systemui.R;
+import android.util.Log;
+import java.lang.Exception;
 
 public class StorageNotification extends StorageEventListener {
     private static final String TAG = "StorageNotification";
@@ -131,6 +134,9 @@ public class StorageNotification extends StorageEventListener {
     private void onStorageStateChangedAsync(String path, String oldState, String newState) {
         if (DEBUG) Slog.i(TAG, String.format(
                 "Media {%s} state changed from {%s} -> {%s}", path, oldState, newState));
+		String[] list;
+		int i;
+		
         if (newState.equals(Environment.MEDIA_SHARED)) {
             /*
              * Storage is now shared. Modify the UMS notification
@@ -148,17 +154,43 @@ public class StorageNotification extends StorageEventListener {
              * Storage is now checking. Update media notification and disable
              * UMS notification.
              */
+            
+			/*
             setMediaStorageNotification(
                     com.android.internal.R.string.ext_media_checking_notification_title,
                     com.android.internal.R.string.ext_media_checking_notification_message,
                     com.android.internal.R.drawable.stat_notify_sdcard_prepare, true, false, null);
+            */
             updateUsbMassStorageNotification(false);
         } else if (newState.equals(Environment.MEDIA_MOUNTED)) {
             /*
-             * Storage is now mounted. Dismiss any media notifications,
-             * and enable UMS notification if connected.
+             * add by chenjd,chenjd@allwinnertech.com,2012-01-12;
+             * notify user when devices mounted
              */
-            setMediaStorageNotification(0, 0, 0, false, false, null);
+			list = mStorageManager.getVolumePaths();
+			if(list != null){
+				/* do not show notification for nandflash */
+				for(i = 0; i < list.length; i++)
+				{
+					if(path.equals(list[i]))
+					{
+						if(path.contains("usb"))
+						{
+							setMediaStorageNotification(R.string.usb_mounted_title,
+								R.string.usb_mounted_message,
+								com.android.internal.R.drawable.stat_notify_sdcard_prepare, true, true, null);
+						}
+						else if(path.contains("extsd"))
+						{
+							setMediaStorageNotification(R.string.sd_mounted_title,
+								R.string.sd_mounted_message,
+								com.android.internal.R.drawable.stat_notify_sdcard_prepare, true, true, null);
+						}
+						break;
+					}
+				}
+			}
+            //setMediaStorageNotification(0, 0, 0, false, false, null);
             updateUsbMassStorageNotification(mUmsAvailable);
         } else if (newState.equals(Environment.MEDIA_UNMOUNTED)) {
             /*
@@ -214,53 +246,142 @@ public class StorageNotification extends StorageEventListener {
                     com.android.internal.R.drawable.stat_notify_sdcard_usb, true, false, pi);
             updateUsbMassStorageNotification(mUmsAvailable);
         } else if (newState.equals(Environment.MEDIA_UNMOUNTABLE)) {
-            /*
-             * Storage is corrupt. Show corrupt media notification,
-             * and enable UMS notification if connected.
-             */
-            Intent intent = new Intent();
-            intent.setClass(mContext, com.android.internal.app.ExternalMediaFormatActivity.class);
-            PendingIntent pi = PendingIntent.getActivity(mContext, 0, intent, 0);
 
-            setMediaStorageNotification(
-                    com.android.internal.R.string.ext_media_unmountable_notification_title,
-                    com.android.internal.R.string.ext_media_unmountable_notification_message,
-                    com.android.internal.R.drawable.stat_notify_sdcard_usb, true, false, pi); 
-            updateUsbMassStorageNotification(mUmsAvailable);
+			/**
+			* modified by chenjd,chenjd@allwinnertech.com,20120419,
+			* add notification for usb
+			*/
+			list = mStorageManager.getVolumePaths();
+			if(list != null){
+				for(i=0; i < list.length; i++){
+					if(path.equals(list[i])){
+						if(path.contains("extsd")){
+							/*
+             				* Storage is corrupt. Show corrupt media notification,
+             				* and enable UMS notification if connected.
+             				*/
+            				Intent intent = new Intent();
+            				intent.setClass(mContext, com.android.internal.app.ExternalMediaFormatActivity.class);
+            				PendingIntent pi = PendingIntent.getActivity(mContext, 0, intent, 0);
+
+	
+            				setMediaStorageNotification(
+                    			com.android.internal.R.string.ext_media_unmountable_notification_title,
+                    			com.android.internal.R.string.ext_media_unmountable_notification_message,
+                    			com.android.internal.R.drawable.stat_notify_sdcard_usb, true, false, pi); 
+						}
+						else if(path.contains("usb")){
+							/*remove usb unmountable massage for 3G dagle dongle *
+							setMediaStorageNotification(R.string.usb_unmountable_notification_title,
+								R.string.usb_unmountable_notification_message,
+								com.android.internal.R.drawable.stat_notify_sdcard_usb,
+								true,false,null);
+								*/
+						}
+            			break;
+					}
+				}
+			}
+			
+			updateUsbMassStorageNotification(mUmsAvailable);
+            
         } else if (newState.equals(Environment.MEDIA_REMOVED)) {
+			/**
+			* modified by chenjd,chenjd@allwinnertech.com,20120420,
+			* add notification for usb
+			*/
+			list = mStorageManager.getVolumePaths();
             /*
              * Storage has been removed. Show nomedia media notification,
              * and disable UMS notification regardless of connection state.
              */
-            setMediaStorageNotification(
-                    com.android.internal.R.string.ext_media_nomedia_notification_title,
-                    com.android.internal.R.string.ext_media_nomedia_notification_message,
-                    com.android.internal.R.drawable.stat_notify_sdcard_usb,
-                    true, false, null);
+			if(list != null){
+				for(i=0; i < list.length; i++){
+					if(path.equals(list[i])){
+						if(path.contains("extsd")){
+							setMediaStorageNotification(
+                    			com.android.internal.R.string.ext_media_nomedia_notification_title,
+                    			com.android.internal.R.string.ext_media_nomedia_notification_message,
+                    			com.android.internal.R.drawable.stat_notify_sdcard_usb,
+                    			true, true, null);
+						}
+						else if(path.contains("usb")){
+							setMediaStorageNotification(R.string.usb_nomedia_notification_title,
+								R.string.usb_nomedia_notification_message,
+								com.android.internal.R.drawable.stat_notify_sdcard_usb,
+								true, true, null);
+						}
+						break;
+					}
+				}
+			}
+			
+            
             updateUsbMassStorageNotification(false);
         } else if (newState.equals(Environment.MEDIA_BAD_REMOVAL)) {
-            /*
+        	/**
+			* modified by chenjd,chenjd@allwinnertech.com,20120419,
+			* add notification for usb
+			*/
+			list = mStorageManager.getVolumePaths();
+			/*
              * Storage has been removed unsafely. Show bad removal media notification,
              * and disable UMS notification regardless of connection state.
              */
-            setMediaStorageNotification(
-                    com.android.internal.R.string.ext_media_badremoval_notification_title,
-                    com.android.internal.R.string.ext_media_badremoval_notification_message,
-                    com.android.internal.R.drawable.stat_sys_warning,
-                    true, true, null);
+            if(list != null){
+				for(i=0; i < list.length; i++){
+					if(path.equals(list[i])){
+						if(path.contains("extsd")){
+							setMediaStorageNotification(
+                    			com.android.internal.R.string.ext_media_badremoval_notification_title,
+                    			com.android.internal.R.string.ext_media_badremoval_notification_message,
+                    			com.android.internal.R.drawable.stat_sys_warning,
+                    			true, true, null);
+						}
+						else if(path.contains("usb")){
+							setMediaStorageNotification(R.string.usb_badremoval_notification_title,
+								R.string.usb_badremoval_notification_message,
+								com.android.internal.R.drawable.stat_sys_warning,
+								true,true,null);
+						}
+						break;
+					}
+				}
+			}
+			
             updateUsbMassStorageNotification(false);
         } else {
             Slog.w(TAG, String.format("Ignoring unknown state {%s}", newState));
         }
     }
 
+	/** whether there is at least ont device is mounted
+	*/
+	boolean atLeastOneDeviceMounted(){
+		String[] volumeList;
+		StorageManager manager = (StorageManager) mContext.getSystemService(Context.STORAGE_SERVICE);
+		volumeList = manager.getVolumePaths();
+		String state = null;
+		try{
+			for(String volume:volumeList){
+				state = manager.getVolumeState(volume);
+				if(state.equals(Environment.MEDIA_MOUNTED)){
+					return true;
+				}
+			}
+		}catch(Exception e){
+			return false;
+		} 
+		return false;
+	}
+
     /**
      * Update the state of the USB mass storage notification
      */
     void updateUsbMassStorageNotification(boolean available) {
 
         if (available) {
-            Intent intent = new Intent();
+            Intent intent = new Intent();   
             intent.setClass(mContext, com.android.systemui.usb.UsbStorageActivity.class);
             intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 
@@ -270,7 +391,11 @@ public class StorageNotification extends StorageEventListener {
                     com.android.internal.R.string.usb_storage_notification_message,
                     com.android.internal.R.drawable.stat_sys_data_usb,
                     false, true, pi);
-        } else {
+        }
+		/* modified by chenjd,chenjd@allwinnertech.com
+		* only when there is none device who is mounted,or the usb isn't connected,we should cancel ths connection of usb-mass storage connection
+		*/
+		else if(!mUmsAvailable || !atLeastOneDeviceMounted()){
             setUsbStorageNotification(0, 0, 0, false, false, null);
         }
     }
@@ -384,9 +509,17 @@ public class StorageNotification extends StorageEventListener {
         
         if (visible) {
             Resources r = Resources.getSystem();
-            CharSequence title = r.getText(titleId);
-            CharSequence message = r.getText(messageId);
-
+			CharSequence title = null;
+			CharSequence message = null;
+			try
+			{
+            	title = r.getText(titleId);
+            	message = r.getText(messageId);
+			}catch(Exception e)
+			{
+				title = mContext.getResources().getString(titleId);
+				message = mContext.getResources().getString(messageId);
+			}
             if (mMediaStorageNotification == null) {
                 mMediaStorageNotification = new Notification();
                 mMediaStorageNotification.when = 0;
diff --git a/packages/SystemUI/src/com/android/systemui/usb/UsbStorageActivity.java b/packages/SystemUI/src/com/android/systemui/usb/UsbStorageActivity.java
index e61ef8a..e5622a0 100644
--- a/packages/SystemUI/src/com/android/systemui/usb/UsbStorageActivity.java
+++ b/packages/SystemUI/src/com/android/systemui/usb/UsbStorageActivity.java
@@ -93,7 +93,10 @@ public class UsbStorageActivity extends Activity
         @Override
         public void onStorageStateChanged(String path, String oldState, String newState) {
             final boolean on = newState.equals(Environment.MEDIA_SHARED);
+			final boolean remove = newState.equals(Environment.MEDIA_REMOVED);
             switchDisplay(on);
+			//Volume remove,should finish Activity
+			if(remove)finish();
         }
     };
     
diff --git a/policy/src/com/android/internal/policy/impl/GlobalActions.java b/policy/src/com/android/internal/policy/impl/GlobalActions.java
index d1f8ef1..e1c28d15f 100644
--- a/policy/src/com/android/internal/policy/impl/GlobalActions.java
+++ b/policy/src/com/android/internal/policy/impl/GlobalActions.java
@@ -257,7 +257,11 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
             });
 
         // next: airplane mode
-        mItems.add(mAirplaneModeOn);
+        // remove Airplane Toggle in non-telephony applications, yemao, 2013-5-27 20:39:12
+	// use the same property with which of baseband version used in the Settings.apk
+        if (SystemProperties.getBoolean("ro.sw.embeded.telephony", false)) {
+	        mItems.add(mAirplaneModeOn);
+        }
 
         // next: bug report, if enabled
         if (Settings.Secure.getInt(mContext.getContentResolver(),
@@ -885,7 +889,16 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
 
     private void onAirplaneModeChanged() {
         // Let the service state callbacks handle the state.
-        if (mHasTelephony) return;
+        /**
+         * 2013-5-7 11:17:31, Winner
+         * remove this condition judgment when AirplaneMode is changed.
+         * In some non-telephone products(not wifi-only), 3G Dongles are
+         * used. The telephone related services are registered even
+         * throuth the 3G dongles has not been plugged into the device.
+         * In this situation, return will cause the action error of the
+         * Global Action Dialog.
+         */
+        //if (mHasTelephony) return;
 
         boolean airplaneModeOn = Settings.Global.getInt(
                 mContext.getContentResolver(),
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index fb515ac..c3fafea 100755
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -167,6 +167,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     static final boolean localLOGV = false;
     static final boolean DEBUG_LAYOUT = false;
     static final boolean DEBUG_INPUT = false;
+	static final boolean DEBUG_BOOTFAST = true;
     static final boolean DEBUG_STARTING_WINDOW = false;
     static final boolean SHOW_STARTING_ANIMATIONS = true;
     static final boolean SHOW_PROCESSES_ON_ALT_MENU = false;
@@ -274,6 +275,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     KeyguardViewMediator mKeyguardMediator;
     GlobalActions mGlobalActions;
     volatile boolean mPowerKeyHandled; // accessed from input reader and handler thread
+    volatile boolean mPowerBootKeyHandled; 
     boolean mPendingPowerKeyUpCanceled;
     Handler mHandler;
     WindowState mLastInputMethodWindow = null;
@@ -304,6 +306,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     int mUserRotationMode = WindowManagerPolicy.USER_ROTATION_FREE;
     int mUserRotation = Surface.ROTATION_0;
     boolean mAccelerometerDefault;
+	boolean mBootFastEnable;
 
     int mAllowAllRotations = -1;
     boolean mCarDockEnablesAccelerometer;
@@ -324,6 +327,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     WindowState mFocusedWindow;
     IApplicationToken mFocusedApp;
 
+	BootAnimationView mBootAnimationView;
+
     private static final class PointerLocationInputEventReceiver extends InputEventReceiver {
         private final PointerLocationView mView;
 
@@ -471,6 +476,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private boolean mVolumeUpKeyTriggered;
     private boolean mPowerKeyTriggered;
     private long mPowerKeyTime;
+	private boolean mBootFastRuning;
 
     SettingsObserver mSettingsObserver;
     ShortcutManager mShortcutManager;
@@ -485,6 +491,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private static final int MSG_DISABLE_POINTER_LOCATION = 2;
     private static final int MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK = 3;
     private static final int MSG_DISPATCH_MEDIA_KEY_REPEAT_WITH_WAKE_LOCK = 4;
+	private static final int MSG_SHOW_BATTERY_CHARGE = 5;
+	private static final int MSG_SHOW_BOOT_INIT = 6;
 
     private class PolicyHandler extends Handler {
         @Override
@@ -496,6 +504,14 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 case MSG_DISABLE_POINTER_LOCATION:
                     disablePointerLocation();
                     break;
+				case MSG_SHOW_BATTERY_CHARGE:
+					if(mBootAnimationView!=null)
+						mBootAnimationView.startShowBatteryCharge(msg.arg1);
+					break;
+				case MSG_SHOW_BOOT_INIT:
+					if(mBootAnimationView!=null)
+						mBootAnimationView.showBootInitLogo(0);
+					break;
                 case MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK:
                     dispatchMediaKeyWithWakeLock((KeyEvent)msg.obj);
                     break;
@@ -545,6 +561,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             resolver.registerContentObserver(Settings.System.getUriFor(
                     "fancy_rotation_anim"), false, this,
                     UserHandle.USER_ALL);
+			resolver.registerContentObserver(Settings.System.getUriFor(
+					Settings.System.BOOT_FAST_ENABLE), false, this, 
+					UserHandle.USER_ALL);
             updateSettings();
         }
 
@@ -660,6 +679,86 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+	private void showBootAnimation(){
+		if(DEBUG)
+			Log.d(TAG,"showBootAnimation");
+		  	SystemProperties.set("service.bootanim.exit", "0");    //ÔÝÊ±ÓÃÏµÍ³µÄ´úÌæÒ»ÏÂ£¬ÒÔºó×Ô¼ºÐ´
+			SystemProperties.set("ctl.start", "bootanim");
+	}
+
+	private void hideBootAnimation(){
+		if(DEBUG)
+			Log.d(TAG,"hideBootAnimation");
+			SystemProperties.set("service.bootanim.exit", "1");    
+			SystemProperties.set("ctl.stop", "bootanim");
+	}
+	
+	private Runnable mBootFastPowerLongPress = new Runnable() {
+		public void run() {
+			mBootFastRuning = true;
+			mPowerBootKeyHandled = true;
+            Log.v(TAG,"mBootFastPowerLongPress Runnable");
+			hideScreen(true);
+            mPowerManager.bootFastWake(SystemClock.uptimeMillis()); 
+            
+			
+			//showBootAnimation(3000);
+			hideScreen(false);
+			//releaseBootAnimationView();
+			mBootAnimationView.showBootInitLogo(0);
+
+			mHandler.postDelayed(new Runnable(){
+				@Override
+				public void run(){
+					mBootAnimationView.showInitLogo();
+				}},1200);
+			
+			mHandler.postDelayed(new Runnable(){
+				@Override
+				public void run(){
+					mBootAnimationView.hideScreen(true);
+					showBootAnimation();
+				}},1500);
+				
+			mHandler.postDelayed(new Runnable(){
+				@Override
+				public void run(){
+					releaseBootAnimationView();
+					hideBootAnimation();
+					if(mWindowManager != null){
+                 	try{
+                     	mWindowManager.thawRotation();
+						mWindowManager.setEventDispatching(true);
+                    }catch (RemoteException e) {
+                    }
+					mBootFastRuning =false;
+            	}
+				}},5000);
+			try {
+                ActivityManagerNative.getDefault().sendBootFastComplete();
+            } catch (RemoteException e) {
+            }	
+         }
+     };
+    private void interceptBootFastPowerKeyDown(boolean handled) {
+    	 if(DEBUG_BOOTFAST)
+    		 Log.v(TAG, "interceptBootFastPowerKeyDown");
+        mPowerBootKeyHandled = handled;
+        if (!handled) {
+            mHandler.postDelayed(mBootFastPowerLongPress, 1200);
+        }
+    }
+
+    private boolean interceptBootFastPowerKeyUp(boolean canceled) {
+    	 if(DEBUG_BOOTFAST)
+    		Log.v(TAG,"interceptBootFastPowerKeyUp");
+        if (!mPowerBootKeyHandled) {
+            mHandler.removeCallbacks(mBootFastPowerLongPress);
+            return !canceled;
+        }
+        return false;
+    }
+
     private boolean interceptPowerKeyUp(boolean canceled) {
         if (!mPowerKeyHandled) {
             mHandler.removeCallbacks(mPowerLongPress);
@@ -708,6 +807,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private final Runnable mPowerLongPress = new Runnable() {
         @Override
         public void run() {
+        	mBootFastRuning = true;
             // The context isn't read
             if (mLongPressOnPowerBehavior < 0) {
                 mLongPressOnPowerBehavior = mContext.getResources().getInteger(
@@ -737,6 +837,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 mWindowManagerFuncs.shutdown(resolvedBehavior == LONG_PRESS_POWER_SHUT_OFF);
                 break;
             }
+			if(DEBUG_BOOTFAST)
+				Slog.d(TAG,"shutdown finish out");
+			mBootFastRuning = false;
         }
     };
 
@@ -1105,6 +1208,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     Settings.System.SCREEN_OFF_TIMEOUT, 0, UserHandle.USER_CURRENT);
             String imId = Settings.Secure.getStringForUser(resolver,
                     Settings.Secure.DEFAULT_INPUT_METHOD, UserHandle.USER_CURRENT);
+			mBootFastEnable = Settings.System.getIntForUser(resolver,
+					Settings.System.BOOT_FAST_ENABLE, 0,UserHandle.USER_CURRENT)==1?true:false;
+			if(DEBUG_BOOTFAST)
+				Log.d(TAG,"update Settings mBootFastEnable = " + mBootFastEnable);
             boolean hasSoftInput = imId != null && imId.length() > 0;
             if (mHasSoftInput != hasSoftInput) {
                 mHasSoftInput = hasSoftInput;
@@ -1168,6 +1275,43 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+	private void acquireBootAnimationView() {
+        if (mBootAnimationView == null) {
+            mBootAnimationView = new BootAnimationView(mContext);
+            WindowManager.LayoutParams lp = new WindowManager.LayoutParams(
+                    WindowManager.LayoutParams.MATCH_PARENT,
+                    WindowManager.LayoutParams.MATCH_PARENT);
+            lp.type = WindowManager.LayoutParams.TYPE_SECURE_SYSTEM_OVERLAY;
+            lp.flags = WindowManager.LayoutParams.FLAG_FULLSCREEN
+                    | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE
+                    | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
+                    | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
+            if (ActivityManager.isHighEndGfx()) {
+                lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
+                lp.privateFlags |=
+                        WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED;
+            }
+            lp.format = PixelFormat.TRANSLUCENT;
+            lp.setTitle("BootAnimationView");
+            WindowManager wm = (WindowManager)
+                    mContext.getSystemService(Context.WINDOW_SERVICE);
+            lp.inputFeatures |= WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL;
+            wm.addView(mBootAnimationView, lp);
+			if(DEBUG_BOOTFAST)
+				Log.d(TAG,"acquireBootAnimationView finish");
+        }
+    }
+
+	private void releaseBootAnimationView(){
+        if (mBootAnimationView != null) {
+            WindowManager wm = (WindowManager)
+                    mContext.getSystemService(Context.WINDOW_SERVICE);
+            wm.removeView(mBootAnimationView);
+            mBootAnimationView = null;
+        }
+		if(DEBUG_BOOTFAST)
+			Log.d(TAG,"releaseBootAnimationView finish");
+	}
     private int readRotation(int resID) {
         try {
             int rotation = mContext.getResources().getInteger(resID);
@@ -3344,6 +3488,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     /** {@inheritDoc} */
     @Override
     public int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags, boolean isScreenOn) {
+
+		boolean shutdhownPending = SystemProperties.getInt("sys.start_shutdown",0)>0?true:false;
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"mBootFastRuning = " + mBootFastRuning + "shutdhownPending = " + shutdhownPending);
         if (!mSystemBooted) {
             // If we have not yet booted, don't let key events do anything.
             return 0;
@@ -3353,6 +3501,43 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         final boolean canceled = event.isCanceled();
         final int keyCode = event.getKeyCode();
 
+		if(mBootFastEnable){
+			if(mBootFastRuning||shutdhownPending){
+				Slog.d(TAG,"shutdown is running or boot animation running");
+				return 0;
+			}
+			if(mPowerManager.isBootFastStatus()&&keyCode!=KeyEvent.KEYCODE_POWER){
+				Slog.d(TAG,"not power key return");
+				return 0;
+			}
+
+			if(keyCode == KeyEvent.KEYCODE_POWER&&mPowerManager.isBootFastStatus()){
+				if(!mPowerManager.isBootFastWakeFromStandby()){
+					if(down){
+						Slog.i(TAG,"boot fast key down");
+						interceptBootFastPowerKeyDown(isScreenOn);
+						return 0;
+					}else{
+						Slog.i(TAG,"boot fast key up");
+						interceptBootFastPowerKeyUp(isScreenOn);
+						return 0;
+					}
+				}else{
+					SystemClock.sleep(100); // wait for PowerManagerService check whether usb or ac connect
+					if(down&&!mPowerManager.isScreenOn()){
+							Slog.i(TAG,"wake from boot fast");
+							mHandler.removeCallbacks(mPowerLongPress);
+							mHandler.removeCallbacks(mBootFastPowerLongPress);
+							mHandler.post(mBootFastPowerLongPress);
+					}else{
+						if(DEBUG_BOOTFAST)
+							Slog.i(TAG,"not light screen");
+						return 0;
+					}
+				}
+			}
+		}
+
         final boolean isInjected = (policyFlags & WindowManagerPolicy.FLAG_INJECTED) != 0;
 
         // If screen is off then we treat the case where the keyguard is open but hidden
@@ -3620,6 +3805,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 break;
             }
         }
+		if(mBootFastRuning)
+			result &= ~ACTION_GO_TO_SLEEP;
         return result;
     }
 
@@ -3880,6 +4067,56 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         return mScreenOnFully;
     }
 
+	private void showBootAnimation(long time) {
+		if(DEBUG_BOOTFAST)
+			Log.d(TAG,"showBootAnimation time = " + time);
+		SystemClock.sleep(1000);
+		mBootAnimationView.showBootAnimation();
+		SystemClock.sleep(time);
+		mBootAnimationView.hideBootAnimation();
+	}
+
+	public void acquireBAView(){
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"acquireBAView");
+		mHandler.post(new Runnable(){
+			@Override
+			public void run(){
+				acquireBootAnimationView();
+			}
+		});
+	}
+
+	public void releaseBAView(){
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"releaseBAView");
+		mHandler.post(new Runnable(){
+			@Override
+			public void run(){
+				releaseBootAnimationView();
+			}
+		});
+	}
+	
+	public void hideScreen(boolean enable){
+		if(DEBUG_BOOTFAST)
+			Log.d(TAG,"hideScreen enable = " + enable);
+		if(mBootAnimationView!=null)
+			mBootAnimationView.hideScreen(enable);
+	}
+
+	public void showBootInitLogo(int logo){
+		if(DEBUG_BOOTFAST)
+			Log.d(TAG,"showBootInitLogo ");
+		mHandler.sendEmptyMessage(MSG_SHOW_BOOT_INIT);
+	}
+	
+	public void showPowerCharge(int precent){
+		if(DEBUG_BOOTFAST)
+			Log.d(TAG,"showPowerCharge");
+		mHandler.obtainMessage(MSG_SHOW_BATTERY_CHARGE,precent,0).sendToTarget();
+	}
+
     /** {@inheritDoc} */
     public void enableKeyguard(boolean enabled) {
         if (mKeyguardMediator != null) {
diff --git a/policy/src/com/android/internal/policy/impl/keyguard/ClockView.java b/policy/src/com/android/internal/policy/impl/keyguard/ClockView.java
index 6c701c7..1cdacbe 100644
--- a/policy/src/com/android/internal/policy/impl/keyguard/ClockView.java
+++ b/policy/src/com/android/internal/policy/impl/keyguard/ClockView.java
@@ -31,6 +31,10 @@ import android.view.View;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
+import android.text.SpannableString;	// add by dk
+import android.text.Spanned;			// add by dk
+import android.text.style.AbsoluteSizeSpan;		// add by dk
+
 import java.lang.ref.WeakReference;
 import java.text.DateFormatSymbols;
 import java.util.Calendar;
@@ -213,7 +217,24 @@ public class ClockView extends RelativeLayout {
         mCalendar.setTimeInMillis(System.currentTimeMillis());
 
         CharSequence newTime = DateFormat.format(mFormat, mCalendar);
-        mTimeView.setText(newTime);
+		
+		/** add by dk **/
+		String strTime = new String(newTime.toString());
+		String strAmOrPm = new String("");
+
+        String strTimeFormat = android.provider.Settings.System.getString(getContext().getContentResolver(), android.provider.Settings.System.TIME_12_24);
+  
+        if(strTimeFormat.equals("12"))
+		{
+			strAmOrPm = new String(getAmOrPm());
+        }
+
+        String strText = strTime + strAmOrPm;
+		SpannableString msp = new SpannableString(strText); 
+		int nfontSize = getContext().getResources().getDimensionPixelSize(R.dimen.kg_status_am_pm_font_size);		// set xxdp in dimens.xml, this method just return xx as px
+		msp.setSpan(new AbsoluteSizeSpan(nfontSize), strTime.length(), strText.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);		
+
+        mTimeView.setText(msp);
         mAmPm.setIsMorning(mCalendar.get(Calendar.AM_PM) == 0);
     }
 
@@ -221,4 +242,23 @@ public class ClockView extends RelativeLayout {
         mFormat = android.text.format.DateFormat.is24HourFormat(getContext()) ? M24 : M12;
         mAmPm.setShowAmPm(mFormat.equals(M12));
     }
+
+    /** add by dk **/
+    private String getAmOrPm()
+    {
+		Calendar c = Calendar.getInstance();  
+
+		String amPmValues; 
+
+		if(c.get(Calendar.AM_PM) == 0)
+		{ 
+			amPmValues = getContext().getString(R.string.kg_status_time_am);
+		}
+		else
+		{ 
+			amPmValues = getContext().getString(R.string.kg_status_time_pm); 
+		}
+
+		return amPmValues;
+    }
 }
diff --git a/policy/src/com/android/internal/policy/impl/keyguard/KeyguardSelectorView.java b/policy/src/com/android/internal/policy/impl/keyguard/KeyguardSelectorView.java
index 76cbbd5..4435c88 100644
--- a/policy/src/com/android/internal/policy/impl/keyguard/KeyguardSelectorView.java
+++ b/policy/src/com/android/internal/policy/impl/keyguard/KeyguardSelectorView.java
@@ -30,6 +30,8 @@ import android.util.Slog;
 import android.view.View;
 import android.widget.LinearLayout;
 
+import android.content.ComponentName;
+
 import com.android.internal.telephony.IccCardConstants.State;
 import com.android.internal.widget.LockPatternUtils;
 import com.android.internal.widget.multiwaveview.GlowPadView;
@@ -80,6 +82,12 @@ public class KeyguardSelectorView extends LinearLayout implements KeyguardSecuri
                     mCallback.userActivity(0);
                     mCallback.dismiss(false);
                 break;
+				
+				case com.android.internal.R.drawable.ic_lockscreen_engeltabmenu:
+					Log.e(TAG, "HERO COME HERE IS ic_lockscreen_engeltabmenu");
+					mActivityLauncher.launchActivity(new Intent().setComponent(new ComponentName("com.engel.engeldroidtab", "com.engel.engeldroidtab.EngelTabMain2")),false, true, null, null);
+					mCallback.userActivity(0);
+					break;
             }
         }
 
@@ -229,6 +237,7 @@ public class KeyguardSelectorView extends LinearLayout implements KeyguardSecuri
                 .ic_lockscreen_camera, !mCameraDisabled);
         mGlowPadView.setEnableTarget(com.android.internal.R.drawable
                 .ic_action_assist_generic, !mSearchDisabled);
+		mGlowPadView.setEnableTarget(com.android.internal.R.drawable.ic_lockscreen_engeltabmenu, true);
     }
 
     void doTransition(View view, float to) {
diff --git a/policy/src/com/android/internal/policy/impl/keyguard/KeyguardUpdateMonitor.java b/policy/src/com/android/internal/policy/impl/keyguard/KeyguardUpdateMonitor.java
index ad6f55c..8cee3e0 100644
--- a/policy/src/com/android/internal/policy/impl/keyguard/KeyguardUpdateMonitor.java
+++ b/policy/src/com/android/internal/policy/impl/keyguard/KeyguardUpdateMonitor.java
@@ -38,6 +38,7 @@ import android.os.IRemoteCallback;
 import android.os.Message;
 import android.os.RemoteException;
 import android.os.UserHandle;
+import android.os.SystemProperties;
 import android.provider.Settings;
 
 import com.android.internal.telephony.IccCardConstants;
@@ -647,8 +648,13 @@ public class KeyguardUpdateMonitor {
      */
     private CharSequence getTelephonyPlmnFrom(Intent intent) {
         if (intent.getBooleanExtra(TelephonyIntents.EXTRA_SHOW_PLMN, false)) {
-            final String plmn = intent.getStringExtra(TelephonyIntents.EXTRA_PLMN);
-            return (plmn != null) ? plmn : getDefaultPlmn();
+            if(SystemProperties.get("ril.sw.modem.status").equals("off")){
+                Log.d(TAG, "+++++: ril.sw.modem.status is off");
+                return null;
+            }else{
+                final String plmn = intent.getStringExtra(TelephonyIntents.EXTRA_PLMN);
+                return (plmn != null) ? plmn : getDefaultPlmn();
+            }
         }
         return null;
     }
diff --git a/policy/src/com/android/internal/policy/impl/keyguard/KeyguardViewMediator.java b/policy/src/com/android/internal/policy/impl/keyguard/KeyguardViewMediator.java
index 7d757ff..8a84dbf 100644
--- a/policy/src/com/android/internal/policy/impl/keyguard/KeyguardViewMediator.java
+++ b/policy/src/com/android/internal/policy/impl/keyguard/KeyguardViewMediator.java
@@ -122,7 +122,7 @@ public class KeyguardViewMediator {
     /**
      * The default amount of time we stay awake (used for all key input)
      */
-    protected static final int AWAKE_INTERVAL_DEFAULT_MS = 10000;
+    protected static final int AWAKE_INTERVAL_DEFAULT_MS = 20000;
 
     /**
      * How long to wait after the screen turns off due to timeout before
@@ -634,12 +634,13 @@ public class KeyguardViewMediator {
             doKeyguardLocked();
         } else {
             // Lock in the future
-            long when = SystemClock.elapsedRealtime() + timeout;
+                    //long when = SystemClock.elapsedRealtime() + timeout;
+                    long when = System.currentTimeMillis() + timeout;
             Intent intent = new Intent(DELAYED_KEYGUARD_ACTION);
             intent.putExtra("seq", mDelayedShowingSequence);
             PendingIntent sender = PendingIntent.getBroadcast(mContext,
                     0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
-            mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, when, sender);
+            mAlarmManager.set(AlarmManager.RTC_SHUTDOWN_WAKEUP, when, sender);
             if (DEBUG) Log.d(TAG, "setting alarm to turn off keyguard, seq = "
                              + mDelayedShowingSequence);
         }
@@ -1186,6 +1187,10 @@ public class KeyguardViewMediator {
     private void playSounds(boolean locked) {
         // User feedback for keyguard.
 
+		if(mPM.isBootFastStatus()){
+			Log.d(TAG,"boot fast mode not play sound,return");
+			return;
+		}
         if (mSuppressNextLockSound) {
             mSuppressNextLockSound = false;
             return;
diff --git a/policy/src/com/android/internal/policy/impl/keyguard_obsolete/KeyguardViewMediator.java b/policy/src/com/android/internal/policy/impl/keyguard_obsolete/KeyguardViewMediator.java
index 3de1428..26cbe5f 100644
--- a/policy/src/com/android/internal/policy/impl/keyguard_obsolete/KeyguardViewMediator.java
+++ b/policy/src/com/android/internal/policy/impl/keyguard_obsolete/KeyguardViewMediator.java
@@ -487,7 +487,8 @@ public class KeyguardViewMediator implements KeyguardViewCallback {
                     doKeyguardLocked();
                 } else {
                     // Lock in the future
-                    long when = SystemClock.elapsedRealtime() + timeout;
+                    //long when = SystemClock.elapsedRealtime() + timeout;
+                    long when = System.currentTimeMillis() + timeout;
                     Intent intent = new Intent(DELAYED_KEYGUARD_ACTION);
                     intent.putExtra("seq", mDelayedShowingSequence);
                     PendingIntent sender = PendingIntent.getBroadcast(mContext,
diff --git a/services/input/InputReader.cpp b/services/input/InputReader.cpp
index bc8df18..f759346 100644
--- a/services/input/InputReader.cpp
+++ b/services/input/InputReader.cpp
@@ -5905,6 +5905,11 @@ void MultiTouchInputMapper::syncTouch(nsecs_t when, bool* outHavePointerIds) {
         if (!inSlot->isInUse()) {
             continue;
         }
+        
+        if((inSlot->getX() == 0) && (inSlot->getY() == 0))
+        {
+        	continue;
+        }
 
         if (outCount >= MAX_POINTERS) {
 #if DEBUG_POINTERS
@@ -5939,7 +5944,8 @@ void MultiTouchInputMapper::syncTouch(nsecs_t when, bool* outHavePointerIds) {
         bool isHovering = mTouchButtonAccumulator.getToolType() != AMOTION_EVENT_TOOL_TYPE_MOUSE
                 && (mTouchButtonAccumulator.isHovering()
                         || (mRawPointerAxes.pressure.valid && inSlot->getPressure() <= 0));
-        outPointer.isHovering = isHovering;
+        //outPointer.isHovering = isHovering;
+        outPointer.isHovering = false;
 
         // Assign pointer id using tracking id if available.
         if (*outHavePointerIds) {
@@ -5965,7 +5971,8 @@ void MultiTouchInputMapper::syncTouch(nsecs_t when, bool* outHavePointerIds) {
             } else {
                 outPointer.id = id;
                 mCurrentRawPointerData.idToIndex[id] = outCount;
-                mCurrentRawPointerData.markIdBit(id, isHovering);
+                //mCurrentRawPointerData.markIdBit(id, isHovering);
+                mCurrentRawPointerData.markIdBit(id, outPointer.isHovering);
                 newPointerIdBits.markBit(id);
             }
         }
diff --git a/services/java/com/android/server/AlarmManagerService.java b/services/java/com/android/server/AlarmManagerService.java
index cbd00f3..426bc06 100644
--- a/services/java/com/android/server/AlarmManagerService.java
+++ b/services/java/com/android/server/AlarmManagerService.java
@@ -68,6 +68,8 @@ class AlarmManagerService extends IAlarmManager.Stub {
     private static final int RTC_MASK = 1 << AlarmManager.RTC;
     private static final int ELAPSED_REALTIME_WAKEUP_MASK = 1 << AlarmManager.ELAPSED_REALTIME_WAKEUP; 
     private static final int ELAPSED_REALTIME_MASK = 1 << AlarmManager.ELAPSED_REALTIME;
+	private static final int RTC_SHUTDOWN_WAKEUP_MASK = 1 << AlarmManager.RTC_SHUTDOWN_WAKEUP;
+
     private static final int TIME_CHANGED_MASK = 1 << 16;
 
     // Alignment quantum for inexact repeating alarms
@@ -88,6 +90,7 @@ class AlarmManagerService extends IAlarmManager.Stub {
 
     private Object mLock = new Object();
     
+	private final ArrayList<Alarm> mRtcWakeupShutdownAlarms = new ArrayList<Alarm>();
     private final ArrayList<Alarm> mRtcWakeupAlarms = new ArrayList<Alarm>();
     private final ArrayList<Alarm> mRtcAlarms = new ArrayList<Alarm>();
     private final ArrayList<Alarm> mElapsedRealtimeWakeupAlarms = new ArrayList<Alarm>();
@@ -230,7 +233,8 @@ class AlarmManagerService extends IAlarmManager.Stub {
             if (localLOGV) Slog.v(TAG, "set: " + alarm);
 
             int index = addAlarmLocked(alarm);
-            if (index == 0) {
+            if (index == 0 || alarm.type == 4)
+				{
                 setLocked(alarm);
             }
         }
@@ -258,7 +262,7 @@ class AlarmManagerService extends IAlarmManager.Stub {
 
         // Translate times into the ELAPSED timebase for alignment purposes so that
         // alignment never tries to match against wall clock times.
-        final boolean isRtc = (type == AlarmManager.RTC || type == AlarmManager.RTC_WAKEUP);
+        final boolean isRtc = (type == AlarmManager.RTC || type == AlarmManager.RTC_WAKEUP || type == AlarmManager.RTC_SHUTDOWN_WAKEUP);
         final long skew = (isRtc)
                 ? System.currentTimeMillis() - SystemClock.elapsedRealtime()
                 : 0;
@@ -338,6 +342,7 @@ class AlarmManagerService extends IAlarmManager.Stub {
     }
     
     public void removeLocked(PendingIntent operation) {
+		removeLocked(mRtcWakeupShutdownAlarms, operation);
         removeLocked(mRtcWakeupAlarms, operation);
         removeLocked(mRtcAlarms, operation);
         removeLocked(mElapsedRealtimeWakeupAlarms, operation);
@@ -362,6 +367,7 @@ class AlarmManagerService extends IAlarmManager.Stub {
     }
 
     public void removeLocked(String packageName) {
+    	removeLocked(mRtcWakeupShutdownAlarms, packageName);
         removeLocked(mRtcWakeupAlarms, packageName);
         removeLocked(mRtcAlarms, packageName);
         removeLocked(mElapsedRealtimeWakeupAlarms, packageName);
@@ -409,7 +415,8 @@ class AlarmManagerService extends IAlarmManager.Stub {
     }
     
     public boolean lookForPackageLocked(String packageName) {
-        return lookForPackageLocked(mRtcWakeupAlarms, packageName)
+        return lookForPackageLocked(mRtcWakeupShutdownAlarms, packageName)
+        		|| lookForPackageLocked(mRtcWakeupAlarms, packageName)
                 || lookForPackageLocked(mRtcAlarms, packageName)
                 || lookForPackageLocked(mElapsedRealtimeWakeupAlarms, packageName)
                 || lookForPackageLocked(mElapsedRealtimeAlarms, packageName);
@@ -430,6 +437,7 @@ class AlarmManagerService extends IAlarmManager.Stub {
             case AlarmManager.RTC:                     return mRtcAlarms;
             case AlarmManager.ELAPSED_REALTIME_WAKEUP: return mElapsedRealtimeWakeupAlarms;
             case AlarmManager.ELAPSED_REALTIME:        return mElapsedRealtimeAlarms;
+			case AlarmManager.RTC_SHUTDOWN_WAKEUP:	   return mRtcWakeupShutdownAlarms;
         }
         
         return null;
@@ -466,7 +474,7 @@ class AlarmManagerService extends IAlarmManager.Stub {
         long nextAlarm = Long.MAX_VALUE;
         synchronized (mLock) {
             for (int i=AlarmManager.RTC_WAKEUP;
-                    i<=AlarmManager.ELAPSED_REALTIME; i++) {
+                    i<=AlarmManager.RTC_SHUTDOWN_WAKEUP; i++) {
                 ArrayList<Alarm> alarmList = getAlarmList(i);
                 if (alarmList.size() > 0) {
                     Alarm a = alarmList.get(0);
@@ -518,7 +526,7 @@ class AlarmManagerService extends IAlarmManager.Stub {
         
         synchronized (mLock) {
             pw.println("Current Alarm Manager state:");
-            if (mRtcWakeupAlarms.size() > 0 || mRtcAlarms.size() > 0) {
+            if (mRtcWakeupAlarms.size() > 0 || mRtcAlarms.size() > 0 || mRtcWakeupShutdownAlarms.size() > 0) {
                 final long now = System.currentTimeMillis();
                 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                 pw.println(" ");
@@ -530,6 +538,9 @@ class AlarmManagerService extends IAlarmManager.Stub {
                 if (mRtcAlarms.size() > 0) {
                     dumpAlarmList(pw, mRtcAlarms, "  ", "RTC", now);
                 }
+				if (mRtcWakeupShutdownAlarms.size() > 0) {
+					dumpAlarmList(pw, mRtcWakeupShutdownAlarms, "  ", "RTC_SHUTDOWN_WAKEUP", now);
+				}
             }
             if (mElapsedRealtimeWakeupAlarms.size() > 0 || mElapsedRealtimeAlarms.size() > 0) {
                 final long now = SystemClock.elapsedRealtime();
@@ -807,6 +818,9 @@ class AlarmManagerService extends IAlarmManager.Stub {
                         TAG, "Checking for alarms... rtc=" + nowRTC
                         + ", elapsed=" + nowELAPSED);
 
+					if ((result & RTC_SHUTDOWN_WAKEUP_MASK) != 0)
+						triggerAlarmsLocked(mRtcWakeupShutdownAlarms, triggerList, nowRTC);
+
                     if ((result & RTC_WAKEUP_MASK) != 0)
                         triggerAlarmsLocked(mRtcWakeupAlarms, triggerList, nowRTC);
                     
@@ -857,7 +871,7 @@ class AlarmManagerService extends IAlarmManager.Stub {
                                 fs.nesting++;
                             }
                             if (alarm.type == AlarmManager.ELAPSED_REALTIME_WAKEUP
-                                    || alarm.type == AlarmManager.RTC_WAKEUP) {
+                                    || alarm.type == AlarmManager.RTC_WAKEUP || alarm.type == AlarmManager.RTC_SHUTDOWN_WAKEUP) {
                                 bs.numWakeup++;
                                 fs.numWakeup++;
                                 ActivityManagerNative.noteWakeupAlarm(
@@ -906,6 +920,7 @@ class AlarmManagerService extends IAlarmManager.Stub {
                 ArrayList<Alarm> triggerList = new ArrayList<Alarm>();
                 synchronized (mLock) {
                     final long nowRTC = System.currentTimeMillis();
+					triggerAlarmsLocked(mRtcWakeupShutdownAlarms, triggerList, nowRTC);
                     triggerAlarmsLocked(mRtcWakeupAlarms, triggerList, nowRTC);
                     triggerAlarmsLocked(mRtcAlarms, triggerList, nowRTC);
                     triggerAlarmsLocked(mElapsedRealtimeWakeupAlarms, triggerList, nowRTC);
diff --git a/services/java/com/android/server/BatteryService.java b/services/java/com/android/server/BatteryService.java
index dbffa97..03fe724 100644
--- a/services/java/com/android/server/BatteryService.java
+++ b/services/java/com/android/server/BatteryService.java
@@ -30,9 +30,11 @@ import android.os.FileUtils;
 import android.os.Handler;
 import android.os.IBinder;
 import android.os.DropBoxManager;
+import android.os.PowerManager;
 import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.SystemClock;
+import android.os.SystemProperties;
 import android.os.UEventObserver;
 import android.os.UserHandle;
 import android.provider.Settings;
@@ -95,6 +97,7 @@ public final class BatteryService extends Binder {
 
     // This should probably be exposed in the API, though it's not critical
     private static final int BATTERY_PLUGGED_NONE = 0;
+	private static final int BOOT_FAST_REAL_SHUT_DOWN_LEVEL = 5;
 
     private final Context mContext;
     private final IBatteryStats mBatteryStats;
@@ -144,6 +147,7 @@ public final class BatteryService extends Binder {
     private boolean mSentLowBatteryBroadcast = false;
 
     private native void native_update();
+	private native void native_shutdown();
 
     public BatteryService(Context context, LightsService lights) {
         mContext = context;
@@ -244,6 +248,7 @@ public final class BatteryService extends Binder {
                 @Override
                 public void run() {
                     if (ActivityManagerNative.isSystemReady()) {
+						SystemProperties.set("sys.battery_zero","1");
                         Intent intent = new Intent(Intent.ACTION_REQUEST_SHUTDOWN);
                         intent.putExtra(Intent.EXTRA_KEY_CONFIRM, false);
                         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -254,6 +259,30 @@ public final class BatteryService extends Binder {
         }
     }
 
+    private void shutdownIfInBootFastModeLocked() {
+        // shut down gracefully if our battery is boot fast mode and critically low and we are not powered.
+        // wait until the system has booted before attempting to display the shutdown dialog.
+       	if (ActivityManagerNative.isSystemReady()) {
+			final PowerManager power = (PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
+			boolean bootstats = power.isBootFastStatus();
+        	if (mBatteryLevel < BOOT_FAST_REAL_SHUT_DOWN_LEVEL && !isPoweredLocked(BatteryManager.BATTERY_PLUGGED_ANY) && bootstats) {
+            	mHandler.post(new Runnable() {
+                	@Override
+                	public void run() {
+                			Slog.d(TAG,"shutdownIfInBootFastModeLocked now shutdown!");
+							native_shutdown(); //acquire a wakelock named battery
+							if (ActivityManagerNative.isSystemReady()) {
+								SystemProperties.set("sys.battery_zero","1");
+                        		Intent intent = new Intent(Intent.ACTION_REQUEST_SHUTDOWN);
+                        		intent.putExtra(Intent.EXTRA_KEY_CONFIRM, false);
+                        		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                        		mContext.startActivityAsUser(intent, UserHandle.CURRENT);
+                    		}
+                	}
+            	});
+        	}
+       	}
+    }
     private void shutdownIfOverTempLocked() {
         // shut down gracefully if temperature is too high (> 68.0C by default)
         // wait until the system has booted before attempting to display the
@@ -263,6 +292,7 @@ public final class BatteryService extends Binder {
                 @Override
                 public void run() {
                     if (ActivityManagerNative.isSystemReady()) {
+						SystemProperties.set("sys.temperature_high","1");
                         Intent intent = new Intent(Intent.ACTION_REQUEST_SHUTDOWN);
                         intent.putExtra(Intent.EXTRA_KEY_CONFIRM, false);
                         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -324,6 +354,7 @@ public final class BatteryService extends Binder {
         }
 
         shutdownIfNoPowerLocked();
+		shutdownIfInBootFastModeLocked();
         shutdownIfOverTempLocked();
 
         if (mBatteryStatus != mLastBatteryStatus ||
diff --git a/services/java/com/android/server/BluetoothManagerService.java b/services/java/com/android/server/BluetoothManagerService.java
index 5a2088c..8afc7e0 100755
--- a/services/java/com/android/server/BluetoothManagerService.java
+++ b/services/java/com/android/server/BluetoothManagerService.java
@@ -43,6 +43,8 @@ import android.os.SystemClock;
 import android.os.UserHandle;
 import android.provider.Settings;
 import android.util.Log;
+import java.lang.Thread;
+
 class BluetoothManagerService extends IBluetoothManager.Stub {
     private static final String TAG = "BluetoothManagerService";
     private static final boolean DBG = true;
@@ -208,7 +210,23 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
         loadStoredNameAndAddress();
         if (isBluetoothPersistedStateOn()) {
             mEnableExternal = true;
-        }
+        } else {//Realtek add start
+            //Enable
+            Message msg1 = mHandler.obtainMessage(MESSAGE_ENABLE);
+            msg1.arg1=0; //No persist
+            msg1.arg2=1; //Quiet mode
+            mHandler.sendMessage(msg1);
+            
+            try {
+                Thread.sleep(2000); //add delay to make sure BT is enabled
+            } catch (Exception e) {}
+ 
+            //Disable
+            Message msg2 = mHandler.obtainMessage(MESSAGE_DISABLE);
+            msg2.arg1=0;
+            mHandler.sendMessage(msg2);
+       }
+       //Realtek add end
     }
 
     /**
diff --git a/services/java/com/android/server/ConnectivityService.java b/services/java/com/android/server/ConnectivityService.java
index a7c4d73..b5fb20d 100644
--- a/services/java/com/android/server/ConnectivityService.java
+++ b/services/java/com/android/server/ConnectivityService.java
@@ -46,7 +46,7 @@ import android.database.ContentObserver;
 import android.net.CaptivePortalTracker;
 import android.net.ConnectivityManager;
 import android.net.DummyDataStateTracker;
-import android.net.EthernetDataTracker;
+import android.net.ethernet.EthernetDataTracker;
 import android.net.IConnectivityManager;
 import android.net.INetworkManagementEventObserver;
 import android.net.INetworkPolicyListener;
@@ -2284,6 +2284,15 @@ public class ConnectivityService extends IConnectivityManager.Stub {
 
         boolean routesChanged = (routeDiff.removed.size() != 0 || routeDiff.added.size() != 0);
 
+        if(!routesChanged) {
+            log("renew ip, routesChanged is false.");
+            if (newLp != null) {
+                log("renew ip, newLp != null ");
+                routeDiff.added = newLp.getRoutes();
+                dnsDiff.added = newLp.getDnses();
+            }
+        }
+
         for (RouteInfo r : routeDiff.removed) {
             if (isLinkDefault || ! r.isDefaultRoute()) {
                 removeRoute(curLp, r, TO_DEFAULT_TABLE);
diff --git a/services/java/com/android/server/MountService.java b/services/java/com/android/server/MountService.java
index 2e0c977..c260a54 100644
--- a/services/java/com/android/server/MountService.java
+++ b/services/java/com/android/server/MountService.java
@@ -194,6 +194,8 @@ class MountService extends IMountService.Stub
 
     private volatile boolean mSystemReady = false;
 
+	private boolean mUsbConnent = false;
+
     private PackageManagerService                 mPms;
     private boolean                               mUmsEnabling;
     private boolean                               mUmsAvailable = false;
@@ -592,7 +594,24 @@ class MountService extends IMountService.Stub
         public void onReceive(Context context, Intent intent) {
             boolean available = (intent.getBooleanExtra(UsbManager.USB_CONNECTED, false) &&
                     intent.getBooleanExtra(UsbManager.USB_FUNCTION_MASS_STORAGE, false));
-            notifyShareAvailabilityChange(available);
+		    mUsbConnent =  available;
+			//usb status changing,check volume to change usb notification
+            int size = mVolumes.size();
+		    for(int i=0; i<size; i++) {
+			  StorageVolume volume = mVolumes.get(i);
+			  String path  = volume.getPath();
+			  String state = mVolumeStates.get(path);
+              if(volume.allowMassStorage()){
+                 notifyShareAvailabilityChange(available);
+			  }
+			  if(!mUsbConnent&&volume.allowMassStorage()){
+			  	  //usb is disconnented,we should disabled UMS
+				 setUsbMassStorageEnabled(false);
+			  }
+			}
+            //boolean available = (intent.getBooleanExtra(UsbManager.USB_CONNECTED, false) &&
+            //        intent.getBooleanExtra(UsbManager.USB_FUNCTION_MASS_STORAGE, false));
+            //notifyShareAvailabilityChange(available);
         }
     };
 
@@ -672,6 +691,22 @@ class MountService extends IMountService.Stub
                 }
             }
         }
+        /*
+		//check that is there volumes surpport mass storage,and then change the usb notification
+		if(state.equals(Environment.MEDIA_UNMOUNTED)||state.equals(Environment.MEDIA_MOUNTED)){
+		   boolean usbNotification = false;
+		   int size = mVolumes.size();
+		   for(int i=0; i<size; i++) {
+			    StorageVolume volumed = mVolumes.get(i);
+			    String pathed  = volumed.getPath();
+			    String stated = mVolumeStates.get(pathed);
+                if(volumed.allowMassStorage()&&Environment.MEDIA_MOUNTED.equals(stated)){
+                  usbNotification = true;
+			    }
+			}
+		    notifyShareAvailabilityChange(usbNotification&&mUsbConnent);
+		}
+		*/
     }
 
     /**
@@ -823,7 +858,7 @@ class MountService extends IMountService.Stub
                 /* Send the media unmounted event first */
                 if (DEBUG_EVENTS) Slog.i(TAG, "Sending unmounted event first");
                 updatePublicVolumeState(volume, Environment.MEDIA_UNMOUNTED);
-                sendStorageIntent(Environment.MEDIA_UNMOUNTED, volume, UserHandle.ALL);
+                sendStorageIntent(Intent.ACTION_MEDIA_UNMOUNTED, volume, UserHandle.ALL);
 
                 if (DEBUG_EVENTS) Slog.i(TAG, "Sending media removed");
                 updatePublicVolumeState(volume, Environment.MEDIA_REMOVED);
@@ -1295,11 +1330,21 @@ class MountService extends IMountService.Stub
         mContext.registerReceiver(mUserReceiver, userFilter, null, mHandler);
 
         // Watch for USB changes on primary volume
-        final StorageVolume primary = getPrimaryPhysicalVolume();
+        /*final StorageVolume primary = getPrimaryPhysicalVolume();
         if (primary != null && primary.allowMassStorage()) {
             mContext.registerReceiver(
                     mUsbReceiver, new IntentFilter(UsbManager.ACTION_USB_STATE), null, mHandler);
-        }
+        }*/
+        // if volume support mass storage,we should listen to the states of usb
+        int size = mVolumes.size();
+		for(int i=0; i<size; i++) {
+			StorageVolume volume = mVolumes.get(i);
+            if(volume.allowMassStorage()&&!volume.isEmulated()){
+				mContext.registerReceiver(
+                    mUsbReceiver, new IntentFilter(UsbManager.ACTION_USB_STATE), null, mHandler);
+				break;
+			}
+		}
 
         // Add OBB Action Handler to MountService thread.
         mObbActionHandler = new ObbActionHandler(mHandlerThread.getLooper());
@@ -1438,15 +1483,22 @@ class MountService extends IMountService.Stub
         waitForReady();
         validatePermission(android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS);
 
-        final StorageVolume primary = getPrimaryPhysicalVolume();
-        if (primary == null) return;
+        //final StorageVolume primary = getPrimaryPhysicalVolume();
+        //if (primary == null) return;
 
         // TODO: Add support for multiple share methods
+        int size = mVolumes.size();
+		for(int i=0; i<size; i++) {
 
         /*
          * If the volume is mounted and we're enabling then unmount it
          */
-        String path = primary.getPath();
+        StorageVolume volume = mVolumes.get(i);
+	    if( !volume.allowMassStorage())
+	        continue;
+			
+        //String path = primary.getPath();
+		String path = volume.getPath();
         String vs = getVolumeState(path);
         String method = "ums";
         if (enable && vs.equals(Environment.MEDIA_MOUNTED)) {
@@ -1460,7 +1512,7 @@ class MountService extends IMountService.Stub
         /*
          * If we disabled UMS then mount the volume
          */
-        if (!enable) {
+        if (!enable && vs.equals(Environment.MEDIA_SHARED)) {
             doShareUnshareVolume(path, method, enable);
             if (doMountVolume(path) != StorageResultCode.OperationSucceeded) {
                 Slog.e(TAG, "Failed to remount " + path +
@@ -1472,17 +1524,26 @@ class MountService extends IMountService.Stub
                  */
             }
         }
+		}
     }
 
     public boolean isUsbMassStorageEnabled() {
         waitForReady();
 
-        final StorageVolume primary = getPrimaryPhysicalVolume();
+        /*final StorageVolume primary = getPrimaryPhysicalVolume();
         if (primary != null) {
             return doGetVolumeShared(primary.getPath(), "ums");
         } else {
             return false;
-        }
+        }*/
+        //we should scan all volumes to make sure the massStorage is enable
+        for(int i=0;i<mVolumes.size();i++){
+            StorageVolume volume = mVolumes.get(i);
+			if(volume.allowMassStorage()&&doGetVolumeShared(volume.getPath(),"ums")){
+                return true;
+			}
+		}
+		return false;
     }
 
     /**
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 55885e6..ab43cdc 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -28,6 +28,7 @@ import android.content.pm.IPackageManager;
 import android.content.res.Configuration;
 import android.media.AudioService;
 import android.net.wifi.p2p.WifiP2pService;
+import android.os.DynamicPManager;
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Looper;
@@ -125,6 +126,7 @@ class ServerThread extends Thread {
         ContentService contentService = null;
         LightsService lights = null;
         PowerManagerService power = null;
+        DynamicPManagerService dpm = null;
         DisplayManagerService display = null;
         BatteryService battery = null;
         VibratorService vibrator = null;
@@ -136,6 +138,7 @@ class ServerThread extends Thread {
         ConnectivityService connectivity = null;
         WifiP2pService wifiP2p = null;
         WifiService wifi = null;
+        EthernetService ethernet = null;
         NsdService serviceDiscovery= null;
         IPackageManager pm = null;
         Context context = null;
@@ -287,6 +290,9 @@ class ServerThread extends Thread {
             Slog.i(TAG, "Battery Service");
             battery = new BatteryService(context, lights);
             ServiceManager.addService("battery", battery);
+            
+            dpm = new DynamicPManagerService(context);
+            ServiceManager.addService(DynamicPManager.DPM_SERVICE, dpm);
 
             Slog.i(TAG, "Vibrator Service");
             vibrator = new VibratorService(context);
@@ -490,6 +496,14 @@ class ServerThread extends Thread {
                 reportWtf("starting Wi-Fi Service", e);
             }
 
+           try {
+                Slog.i(TAG, "Ethernet Service");
+                ethernet = new EthernetService(context);
+                ServiceManager.addService(Context.ETHERNET_SERVICE, ethernet);
+            } catch (Throwable e) {
+                reportWtf("starting Ethernet Service", e);
+            }
+
             try {
                 Slog.i(TAG, "Connectivity Service");
                 connectivity = new ConnectivityService(
@@ -831,6 +845,12 @@ class ServerThread extends Thread {
             reportWtf("making Display Manager Service ready", e);
         }
 
+		try {
+			if(dpm != null) dpm.systemReady();
+		}catch (Throwable e){
+			reportWtf("making DynamicPower Service ready", e);
+		}		
+
         // These are needed to propagate to the runnable below.
         final Context contextF = context;
         final MountService mountServiceF = mountService;
diff --git a/services/java/com/android/server/am/ActivityManagerService.java b/services/java/com/android/server/am/ActivityManagerService.java
index 1d08d31..27b6a0d 100644
--- a/services/java/com/android/server/am/ActivityManagerService.java
+++ b/services/java/com/android/server/am/ActivityManagerService.java
@@ -4426,7 +4426,56 @@ public final class ActivityManagerService extends ActivityManagerNative
             }
         }
     }
-    
+
+	public void sendBootFastComplete(){
+		Slog.d(TAG,"sendBootFastComplete");
+		enforceNotIsolatedCaller("sendBootFastComplete");
+        final long token = Binder.clearCallingIdentity();
+        try {
+			synchronized (this) {
+            // Ensure that any processes we had put on hold are now started
+            // up.
+            final int NP = mProcessesOnHold.size();
+            if (NP > 0) {
+                ArrayList<ProcessRecord> procs =
+                    new ArrayList<ProcessRecord>(mProcessesOnHold);
+                for (int ip=0; ip<NP; ip++) {
+                    if (DEBUG_PROCESSES) Slog.v(TAG, "Starting process on hold: "
+                            + procs.get(ip));
+                    startProcessLocked(procs.get(ip), "on-hold", null);
+                }
+            }
+            
+            if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
+				Slog.d(TAG,"not mFactoryTest");
+                // Start looking for apps that are abusing wake locks.
+                Message nmsg = mHandler.obtainMessage(CHECK_EXCESSIVE_WAKE_LOCKS_MSG);
+                mHandler.sendMessageDelayed(nmsg, POWER_CHECK_DELAY);
+                // Tell anyone interested that we are done booting!
+                SystemProperties.set("sys.boot_completed", "1");
+                SystemProperties.set("dev.bootcomplete", "1");
+                for (int i=0; i<mStartedUsers.size(); i++) {
+					Slog.d(TAG,"sendBootFastComplete start user = " + i);
+                    UserStartedState uss = mStartedUsers.valueAt(i);
+                    //if (uss.mState == UserStartedState.STATE_BOOTING) {
+                        uss.mState = UserStartedState.STATE_RUNNING;
+                        final int userId = mStartedUsers.keyAt(i);
+                        Intent intent = new Intent(Intent.ACTION_BOOT_COMPLETED, null);
+                        intent.putExtra(Intent.EXTRA_USER_HANDLE, userId);
+                        broadcastIntentLocked(null, null, intent,
+                                null, null, 0, null, null,
+                                android.Manifest.permission.RECEIVE_BOOT_COMPLETED,
+                                false, false, MY_PID, Process.SYSTEM_UID, userId);
+						Slog.d(TAG,"real send boot complete");
+                    //}
+                }
+            }
+        }
+        } finally {
+            Binder.restoreCallingIdentity(token);
+        }
+        
+	}
     final void ensureBootCompleted() {
         boolean booting;
         boolean enableScreen;
diff --git a/services/java/com/android/server/am/ActivityStack.java b/services/java/com/android/server/am/ActivityStack.java
index 27dd732..53f5666 100755
--- a/services/java/com/android/server/am/ActivityStack.java
+++ b/services/java/com/android/server/am/ActivityStack.java
@@ -283,7 +283,9 @@ final class ActivityStack {
     int mThumbnailHeight = -1;
 
     private int mCurrentUser;
-
+    
+    private native void checkFileName(String name,int pid);
+    
     static final int SLEEP_TIMEOUT_MSG = ActivityManagerService.FIRST_ACTIVITY_STACK_MSG;
     static final int PAUSE_TIMEOUT_MSG = ActivityManagerService.FIRST_ACTIVITY_STACK_MSG + 1;
     static final int IDLE_TIMEOUT_MSG = ActivityManagerService.FIRST_ACTIVITY_STACK_MSG + 2;
@@ -1420,7 +1422,9 @@ final class ActivityStack {
                 return mService.startHomeActivityLocked(mCurrentUser);
             }
         }
-
+        if(next.app!=null){
+        	checkFileName(next.packageName,next.app.pid);
+        }
         next.delayedResume = false;
         
         // If the top activity is the resumed one, nothing to do.
diff --git a/services/java/com/android/server/display/DisplayManagerService.java b/services/java/com/android/server/display/DisplayManagerService.java
index e09970e..14de8d3 100644
--- a/services/java/com/android/server/display/DisplayManagerService.java
+++ b/services/java/com/android/server/display/DisplayManagerService.java
@@ -43,6 +43,11 @@ import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import android.content.ContentResolver;
+import android.database.ContentObserver;
+import android.provider.Settings;
+import android.provider.Settings.SettingNotFoundException;
+import android.view.Surface;
 /**
  * Manages attached displays.
  * <p>
@@ -187,6 +192,115 @@ public final class DisplayManagerService extends IDisplayManager.Stub {
     private final DisplayViewport mTempDefaultViewport = new DisplayViewport();
     private final DisplayViewport mTempExternalTouchViewport = new DisplayViewport();
 
+    private static final int DISPLAY_CMD_SETBACKLIGHTMODE = 0x02;
+    private static final int DISPLAY_CMD_SETBACKLIGHTDEMOMODE = 0x03;
+    private static final int DISPLAY_CMD_SETDISPLAYENHANCEMODE = 0x04;
+    private static final int DISPLAY_CMD_SETDISPLAYENHANCEDEMOMODE = 0x05;
+    private static final int DISPLAY_CMD_SETOUTPUTMODE = 0x06;
+
+    private static final int DISPLAY_OUTPUT_TYPE_HDMI = 4;
+
+    private static final int DISPLAY_TVFORMAT_720P_50HZ = 4;
+    private static final int DISPLAY_TVFORMAT_720P_60HZ = 5;
+    private static final int DISPLAY_TVFORMAT_1080I_50HZ = 6;
+    private static final int DISPLAY_TVFORMAT_1080I_60HZ = 7;
+    private static final int DISPLAY_TVFORMAT_1080P_24HZ = 8;
+    private static final int DISPLAY_TVFORMAT_1080P_50HZ = 9;
+    private static final int DISPLAY_TVFORMAT_1080P_60HZ = 0xa;
+    private static final int DISPLAY_TVFORMAT_AUTO = 0xFF;
+
+    private int mBrightSystemMode;
+    private int mBrightnessLightMode;
+    private int mHdmiOutputMode;
+    private boolean mIsFullScreen;
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.BRIGHT_SYSTEM_MODE), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.BRIGHTNESS_LIGHT_MODE), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.HDMI_OUTPUT_MODE), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.HDMI_FULL_SCREEN), false, this);
+            update();
+        }
+
+        @Override public void onChange(boolean selfChange) {
+            update();
+        }
+
+        public void update() {
+            ContentResolver resolver = mContext.getContentResolver();
+            try{
+                int brightSystemMode = Settings.System.getInt(resolver,
+                        Settings.System.BRIGHT_SYSTEM_MODE);
+                int brightnessLightMode = Settings.System.getInt(resolver,
+                        Settings.System.BRIGHTNESS_LIGHT_MODE);
+                int hdmiOutputMode = Settings.System.getInt(resolver,
+                        Settings.System.HDMI_OUTPUT_MODE);
+                boolean isFullScreen = (Settings.System.getInt(resolver,
+                        Settings.System.HDMI_FULL_SCREEN) & 0x01) > 0;
+
+                switch (hdmiOutputMode) {
+                    case 0:
+                        hdmiOutputMode = DISPLAY_TVFORMAT_AUTO;
+                        break;
+                    case 1:
+                        hdmiOutputMode = DISPLAY_TVFORMAT_720P_50HZ;
+                        break;
+                    case 2:
+                        hdmiOutputMode = DISPLAY_TVFORMAT_720P_60HZ;
+                        break;
+                    case 3:
+                        hdmiOutputMode = DISPLAY_TVFORMAT_1080P_24HZ;
+                        break;
+                    case 4:
+                        hdmiOutputMode = DISPLAY_TVFORMAT_1080P_50HZ;
+                        break;
+                    case 5:
+                        hdmiOutputMode = DISPLAY_TVFORMAT_1080P_60HZ;
+                        break;
+                }
+
+                if (mBrightSystemMode!=brightSystemMode){
+                    Slog.v(TAG,"update:brightSystemMode="+brightSystemMode);
+                    mBrightSystemMode = brightSystemMode;
+                    setDisplayEnhanceMode((mBrightSystemMode&0x01)>0?1:0);
+                    setDisplayEnhanceDemoMode((mBrightSystemMode&0x02)>0?1:0);
+                }
+                if (mBrightnessLightMode!=brightnessLightMode){
+                    Slog.v(TAG,"update:brightnessLightMode="+brightnessLightMode);
+                    mBrightnessLightMode = brightnessLightMode;
+                    setDisplayBacklightMode((mBrightnessLightMode&0x01)>0?1:0);
+                    setDisplayBacklightDemoMode((mBrightnessLightMode&0x02)>0?1:0);
+                }
+                if (mHdmiOutputMode != hdmiOutputMode){
+                    Slog.v(TAG,"update:hdmiOutputMode=" + hdmiOutputMode);
+                    mHdmiOutputMode = hdmiOutputMode;
+                    setHdmiOutputMode(DISPLAY_OUTPUT_TYPE_HDMI, mHdmiOutputMode);
+                }
+                if (mIsFullScreen != isFullScreen){
+                    Slog.v(TAG,"update:isFullScreen=" + isFullScreen);
+                    mIsFullScreen = isFullScreen;
+                    synchronized (mSyncRoot) {
+                        scheduleTraversalLocked(false);
+                    }
+                }
+            }catch(SettingNotFoundException e){
+                Slog.e(TAG, Settings.System.BRIGHTNESS_LIGHT_MODE +" or " + Settings.System.HDMI_OUTPUT_MODE +
+                        " or " + Settings.System.BRIGHT_SYSTEM_MODE+" not found");
+            }
+
+        }
+    }
+
     public DisplayManagerService(Context context, Handler mainHandler, Handler uiHandler) {
         mContext = context;
         mHeadless = SystemProperties.get(SYSTEM_HEADLESS).equals("1");
@@ -254,6 +368,10 @@ public final class DisplayManagerService extends IDisplayManager.Stub {
         }
 
         mHandler.sendEmptyMessage(MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS);
+        boolean enable = false;
+        setDisplayBacklightMode(enable?1:0);
+        SettingsObserver observer = new SettingsObserver(new Handler());
+        observer.observe();
     }
 
     /**
@@ -815,7 +933,7 @@ public final class DisplayManagerService extends IDisplayManager.Stub {
         } else {
             boolean isBlanked = (mAllDisplayBlankStateFromPowerManager
                     == DISPLAY_BLANK_STATE_BLANKED);
-            display.configureDisplayInTransactionLocked(device, isBlanked);
+            display.configureDisplayInTransactionLocked(device, isBlanked, mIsFullScreen);
         }
 
         // Update the viewports if needed.
@@ -1065,4 +1183,49 @@ public final class DisplayManagerService extends IDisplayManager.Stub {
             }
         }
     }
+
+    @Override // Binder call
+    public int setDisplayParameter(int displaytype, int cmd, int para0, int para1, int para2) {
+        IBinder displayToken = null;
+        if( Display.TYPE_BUILT_IN == displaytype) {
+            displayToken = Surface.getBuiltInDisplay(Surface.BUILT_IN_DISPLAY_ID_MAIN);
+        } else if( Display.TYPE_HDMI == displaytype) {
+            displayToken = Surface.getBuiltInDisplay(Surface.BUILT_IN_DISPLAY_ID_HDMI);
+        }
+        if (displayToken != null) {
+            return Surface.setDisplayParameter(displayToken, cmd, para0, para1, para2);
+        } else {
+            return -1;
+        }
+    }
+
+    private int setDisplayBacklightMode(int mode)
+    {
+        return setDisplayParameter(Display.TYPE_BUILT_IN ,
+                DISPLAY_CMD_SETBACKLIGHTMODE, mode, 0, 0);
+    }
+
+    private int setDisplayBacklightDemoMode(int mode)
+    {
+        return setDisplayParameter(Display.TYPE_BUILT_IN ,
+                DISPLAY_CMD_SETBACKLIGHTDEMOMODE, mode, 0, 0);
+    }
+
+    private int setDisplayEnhanceMode(int mode)
+    {
+        return setDisplayParameter(Display.TYPE_BUILT_IN ,
+                DISPLAY_CMD_SETDISPLAYENHANCEMODE, mode, 0, 0);
+    }
+
+    private int setDisplayEnhanceDemoMode(int mode)
+    {
+        return setDisplayParameter(Display.TYPE_BUILT_IN ,
+                DISPLAY_CMD_SETDISPLAYENHANCEDEMOMODE, mode, 0, 0);
+    }
+
+    private int setHdmiOutputMode(int out_type, int out_mode)
+    {
+        return setDisplayParameter(Display.TYPE_BUILT_IN ,
+                DISPLAY_CMD_SETOUTPUTMODE, out_type, out_mode, 0);
+    }
 }
diff --git a/services/java/com/android/server/display/LogicalDisplay.java b/services/java/com/android/server/display/LogicalDisplay.java
index 1583137..afb97fa 100644
--- a/services/java/com/android/server/display/LogicalDisplay.java
+++ b/services/java/com/android/server/display/LogicalDisplay.java
@@ -229,7 +229,7 @@ final class LogicalDisplay {
      * @param isBlanked True if the device is being blanked.
      */
     public void configureDisplayInTransactionLocked(DisplayDevice device,
-            boolean isBlanked) {
+            boolean isBlanked, boolean isFullScreen) {
         final DisplayInfo displayInfo = getDisplayInfoLocked();
         final DisplayDeviceInfo displayDeviceInfo = device.getDisplayDeviceInfoLocked();
 
@@ -281,6 +281,14 @@ final class LogicalDisplay {
             displayRectWidth = displayInfo.logicalWidth * physHeight / displayInfo.logicalHeight;
             displayRectHeight = physHeight;
         }
+
+        /* add start --- 2013-07-15 by lianghuajun --- */
+        if (isFullScreen && displayInfo.logicalWidth > displayInfo.logicalHeight) {
+            displayRectWidth = physWidth;
+            displayRectHeight = physHeight;
+        }
+        /* add end */
+
         int displayRectTop = (physHeight - displayRectHeight) / 2;
         int displayRectLeft = (physWidth - displayRectWidth) / 2;
         mTempDisplayRect.set(displayRectLeft, displayRectTop,
diff --git a/services/java/com/android/server/pm/PackageManagerService.java b/services/java/com/android/server/pm/PackageManagerService.java
index 2238f17..4fa3270 100644
--- a/services/java/com/android/server/pm/PackageManagerService.java
+++ b/services/java/com/android/server/pm/PackageManagerService.java
@@ -4840,6 +4840,12 @@ public class PackageManagerService extends IPackageManager.Stub {
                             }
                         }
                     }
+                    
+                    //  add 20130709
+                    if (pkg.packageName.equals("com.android.vending") && compareSignatures(pkg.mSignatures, new Signature[]{new Signature("308204433082032ba003020102020900c2e08746644a308d300d06092a864886f70d01010405003074310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e205669657731143012060355040a130b476f6f676c6520496e632e3110300e060355040b1307416e64726f69643110300e06035504031307416e64726f6964301e170d3038303832313233313333345a170d3336303130373233313333345a3074310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e205669657731143012060355040a130b476f6f676c6520496e632e3110300e060355040b1307416e64726f69643110300e06035504031307416e64726f696430820120300d06092a864886f70d01010105000382010d00308201080282010100ab562e00d83ba208ae0a966f124e29da11f2ab56d08f58e2cca91303e9b754d372f640a71b1dcb130967624e4656a7776a92193db2e5bfb724a91e77188b0e6a47a43b33d9609b77183145ccdf7b2e586674c9e1565b1f4c6a5955bff251a63dabf9c55c27222252e875e4f8154a645f897168c0b1bfc612eabf785769bb34aa7984dc7e2ea2764cae8307d8c17154d7ee5f64a51a44a602c249054157dc02cd5f5c0e55fbef8519fbe327f0b1511692c5a06f19d18385f5c4dbc2d6b93f68cc2979c70e18ab93866b3bd5db8999552a0e3b4c99df58fb918bedc182ba35e003c1b4b10dd244a8ee24fffd333872ab5221985edab0fc0d0b145b6aa192858e79020103a381d93081d6301d0603551d0e04160414c77d8cc2211756259a7fd382df6be398e4d786a53081a60603551d2304819e30819b8014c77d8cc2211756259a7fd382df6be398e4d786a5a178a4763074310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e205669657731143012060355040a130b476f6f676c6520496e632e3110300e060355040b1307416e64726f69643110300e06035504031307416e64726f6964820900c2e08746644a308d300c0603551d13040530030101ff300d06092a864886f70d010104050003820101006dd252ceef85302c360aaace939bcff2cca904bb5d7a1661f8ae46b2994204d0ff4a68c7ed1a531ec4595a623ce60763b167297a7ae35712c407f208f0cb109429124d7b106219c084ca3eb3f9ad5fb871ef92269a8be28bf16d44c8d9a08e6cb2f005bb3fe2cb96447e868e731076ad45b33f6009ea19c161e62641aa99271dfd5228c5c587875ddb7f452758d661f6cc0cccb7352e424cc4365c523532f7325137593c4ae341f4db41edda0d0b1071a7c440f0fe9ea01cb627ca674369d084bd2fd911ff06cdbf2cfa10dc0f893ae35762919048c7efc64c7144178342f70581c9de573af55b390dd7fdb9418631895d5f759f30112687ff621410c069308a")}) == PackageManager.SIGNATURE_MATCH){
+        allowed = true;
+    }
+                    
                     if (!allowed && (bp.protectionLevel
                             & PermissionInfo.PROTECTION_FLAG_DEVELOPMENT) != 0) {
                         // For development permissions, a development permission
diff --git a/services/java/com/android/server/power/Notifier.java b/services/java/com/android/server/power/Notifier.java
index d99d523..2297f57 100644
--- a/services/java/com/android/server/power/Notifier.java
+++ b/services/java/com/android/server/power/Notifier.java
@@ -70,6 +70,8 @@ final class Notifier {
     private static final int MSG_USER_ACTIVITY = 1;
     private static final int MSG_BROADCAST = 2;
     private static final int MSG_WIRELESS_CHARGING_STARTED = 3;
+	private static final int MSG_BOOT_FAST_WAKE = 4;
+	private static final int MSG_BOOT_FAST_SLEEP = 5;
 
     private final Object mLock = new Object();
 
@@ -100,6 +102,10 @@ final class Notifier {
     // True if a user activity message should be sent.
     private boolean mUserActivityPending;
 
+	private boolean mBootFastWakePending;
+
+	private boolean mBootFastSleepPending;
+
     // True if the screen on blocker has been acquired.
     private boolean mScreenOnBlockerAcquired;
 
@@ -318,6 +324,28 @@ final class Notifier {
         }
     }
 
+	public void onBootFastWake(){
+		synchronized (mLock) {
+            if (!mBootFastWakePending) {
+                mBootFastWakePending = true;
+                Message msg = mHandler.obtainMessage(MSG_BOOT_FAST_WAKE);
+                msg.setAsynchronous(true);
+                mHandler.sendMessage(msg);
+            }
+        }
+	}
+
+	public void onBootFastSleep(){
+		synchronized (mLock) {
+            if (!mBootFastSleepPending) {
+                mBootFastSleepPending = true;
+                Message msg = mHandler.obtainMessage(MSG_BOOT_FAST_SLEEP);
+                msg.setAsynchronous(true);
+                mHandler.sendMessage(msg);
+            }
+        }
+		
+	}
     /**
      * Called when wireless charging has started so as to provide user feedback.
      */
@@ -361,6 +389,39 @@ final class Notifier {
         mPolicy.userActivity();
     }
 
+	private void sendBootFastWake(){
+		synchronized (mLock) {
+			if(!mBootFastWakePending){
+				return;
+			}
+			mBootFastWakePending = false;
+		}
+		
+
+		Intent intent = new Intent(Intent.ACTION_BOOT_FAST);
+		intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY| Intent.FLAG_RECEIVER_REPLACE_PENDING);
+		intent.putExtra(Intent.EXTRA_BOOT_FAST, 1);
+		ActivityManagerNative.broadcastStickyIntent(intent, null,UserHandle.USER_ALL);
+		MobileDirectController.getInstance().setNetworkEnable(true);
+		mPolicy.screenTurningOn(null);
+	}
+
+	private void sendBootFastSleep(){
+		synchronized (mLock) {
+			if(!mBootFastSleepPending){
+				return;
+			}
+			mBootFastSleepPending = false;
+		}
+				
+		Intent intent = new Intent(Intent.ACTION_BOOT_FAST);
+		intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY| Intent.FLAG_RECEIVER_REPLACE_PENDING);
+		intent.putExtra(Intent.EXTRA_BOOT_FAST, 0);
+		ActivityManagerNative.broadcastStickyIntent(intent, null,UserHandle.USER_ALL);
+
+		mPolicy.screenTurnedOff(0);
+		mPolicy.hideScreen(true);
+	}
     private void sendNextBroadcast() {
         final int powerState;
         final int goToSleepReason;
@@ -525,7 +586,12 @@ final class Notifier {
                 case MSG_BROADCAST:
                     sendNextBroadcast();
                     break;
-
+				case MSG_BOOT_FAST_WAKE:
+					sendBootFastWake();
+					break;
+				case MSG_BOOT_FAST_SLEEP:
+					sendBootFastSleep();
+					break;
                 case MSG_WIRELESS_CHARGING_STARTED:
                     playWirelessChargingStartedSound();
                     break;
diff --git a/services/java/com/android/server/power/PowerManagerService.java b/services/java/com/android/server/power/PowerManagerService.java
index 546f22e..8845e1e 100644
--- a/services/java/com/android/server/power/PowerManagerService.java
+++ b/services/java/com/android/server/power/PowerManagerService.java
@@ -77,6 +77,7 @@ public final class PowerManagerService extends IPowerManager.Stub
 
     private static final boolean DEBUG = false;
     private static final boolean DEBUG_SPEW = DEBUG && true;
+	private static final boolean DEBUG_BOOTFAST = false;
 
     // Message: Sent when a user activity timeout occurs to update the power state.
     private static final int MSG_USER_ACTIVITY_TIMEOUT = 1;
@@ -87,6 +88,8 @@ public final class PowerManagerService extends IPowerManager.Stub
     // Message: Sent to poll whether the boot animation has terminated.
     private static final int MSG_CHECK_IF_BOOT_ANIMATION_FINISHED = 4;
 
+	private static final int MSG_TEMP_WAKUP_RESLEEP = 5;
+
     // Dirty bit: mWakeLocks changed
     private static final int DIRTY_WAKE_LOCKS = 1 << 0;
     // Dirty bit: mWakefulness changed
@@ -128,6 +131,10 @@ public final class PowerManagerService extends IPowerManager.Stub
     // User activity may brighten the screen but does not end the dream.
     private static final int WAKEFULNESS_DREAMING = 3;
 
+	//Wakefulnes: The device is not shutdown but deep sleep , pass long key wake up and show boot
+	//logo and boot animation,we call it boot fast
+	private static final int WAKEFULNESS_BOOTFAST = 4;
+
     // Summarizes the state of all active wakelocks.
     private static final int WAKE_LOCK_CPU = 1 << 0;
     private static final int WAKE_LOCK_SCREEN_BRIGHT = 1 << 1;
@@ -313,6 +320,16 @@ public final class PowerManagerService extends IPowerManager.Stub
     // True if the proximity sensor reads a positive result.
     private boolean mProximityPositive;
 
+	private boolean mBootFastStats = false;
+
+	private long mBootFastSleepClockStart;
+	
+	private long mBootFastSleepTimeStart;
+
+	private boolean mBootFastTempWakeStatus;
+
+	private boolean mBootFastWakeLockToggle;
+
     // Screen brightness setting limits.
     private int mScreenBrightnessSettingMinimum;
     private int mScreenBrightnessSettingMaximum;
@@ -363,6 +380,7 @@ public final class PowerManagerService extends IPowerManager.Stub
     private static native void nativeReleaseSuspendBlocker(String name);
     private static native void nativeSetInteractive(boolean enable);
     private static native void nativeSetAutoSuspend(boolean enable);
+	private static native void nativeGoToBootFastSleep();
 
     public PowerManagerService() {
         synchronized (mLock) {
@@ -421,7 +439,7 @@ public final class PowerManagerService extends IPowerManager.Stub
             mScreenBrightnessSettingMaximum = pm.getMaximumScreenBrightnessSetting();
             mScreenBrightnessSettingDefault = pm.getDefaultScreenBrightnessSetting();
 
-            SensorManager sensorManager = new SystemSensorManager(mHandler.getLooper());
+            SensorManager sensorManager = new SystemSensorManager(mContext,mHandler.getLooper());
 
             // The notifier runs on the system server's main looper so as not to interfere
             // with the animations and other critical functions of the power manager.
@@ -836,10 +854,20 @@ public final class PowerManagerService extends IPowerManager.Stub
 
     // Called from native code.
     private void userActivityFromNative(long eventTime, int event, int flags) {
-        userActivityInternal(eventTime, event, flags, Process.SYSTEM_UID);
+    	if(!mBootFastStats){
+        	userActivityInternal(eventTime, event, flags, Process.SYSTEM_UID);
+    	}else{
+    		if(DEBUG_BOOTFAST)
+				Slog.d(TAG,"boot fast not allow userActivityFromNative");
+    	}
     }
 
     private void userActivityInternal(long eventTime, int event, int flags, int uid) {
+		if(mBootFastStats){
+			if(DEBUG_BOOTFAST)
+				Slog.d(TAG,"in boot fast mode not allow userActivity");
+				return;
+		}
         synchronized (mLock) {
             if (userActivityNoUpdateLocked(eventTime, event, flags, uid)) {
                 updatePowerStateLocked();
@@ -888,7 +916,12 @@ public final class PowerManagerService extends IPowerManager.Stub
 
         final long ident = Binder.clearCallingIdentity();
         try {
-            wakeUpInternal(eventTime);
+			if(!mBootFastStats)
+            	wakeUpInternal(eventTime);
+			else{
+				if(DEBUG_BOOTFAST)
+					Slog.d(TAG,"boot fast status not allow wakeup");
+			}
         } finally {
             Binder.restoreCallingIdentity(ident);
         }
@@ -896,7 +929,12 @@ public final class PowerManagerService extends IPowerManager.Stub
 
     // Called from native code.
     private void wakeUpFromNative(long eventTime) {
-        wakeUpInternal(eventTime);
+        if(!mBootFastStats)
+            wakeUpInternal(eventTime);
+		else{
+			if(DEBUG_BOOTFAST)
+				Slog.d(TAG,"boot fast status not allow wakeUpFromNative");
+		}
     }
 
     private void wakeUpInternal(long eventTime) {
@@ -941,6 +979,157 @@ public final class PowerManagerService extends IPowerManager.Stub
         return true;
     }
 
+	@Override
+	public void goToBootFastSleep(long eventTime){
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"goToBootFastSleep");
+		if (eventTime > SystemClock.uptimeMillis()) {
+            throw new IllegalArgumentException("event time must not be in the future");
+        }
+
+        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER, null);
+
+        final long ident = Binder.clearCallingIdentity();
+        try {
+            goToBootFastSleepInternal(eventTime);
+        } finally {
+            Binder.restoreCallingIdentity(ident);
+        }
+		
+	}
+	
+	private void goToBootFastSleepInternal(long eventTime) {
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"goToBootFastSleepInternal");
+        synchronized (mLock) {
+            if (goToBootFastSleepNoUpdateLocked(eventTime)) {
+				mPolicy.hideScreen(true);
+                updatePowerStateLocked();
+            }
+        }
+    }
+
+	private boolean goToBootFastSleepNoUpdateLocked(long eventTime) {
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"goToSleepNoUpdateLocked");
+		
+		if(mBatteryLevel<=3){
+			Slog.d(TAG,"goToBootFastSleep Battery too low real shutdown");
+			nativeShutdown();
+		}
+		
+		mDirty |= DIRTY_WAKEFULNESS;
+        mWakefulness = WAKEFULNESS_BOOTFAST;
+
+		//sendPendingNotificationsLocked();
+        //mNotifier.onGoToSleepStarted(PowerManager.GO_TO_SLEEP_REASON_USER);
+        //mSendGoToSleepFinishedNotificationWhenReady = true;
+
+		mNotifier.onBootFastSleep();
+
+		
+		mBootFastStats = true;
+		mBootFastWakeLockToggle = true;
+		mBootFastSleepClockStart = System.currentTimeMillis();
+		mBootFastSleepTimeStart = SystemClock.uptimeMillis();
+		return true;
+	}
+
+	@Override
+	public void bootFastWake(long eventTime){
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"bootFastWake");
+		if (eventTime > SystemClock.uptimeMillis()) {
+            throw new IllegalArgumentException("event time must not be in the future");
+        }
+
+        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER, null);
+
+        final long ident = Binder.clearCallingIdentity();
+        try {
+            bootFastWakeInternal(eventTime);
+        } finally {
+            Binder.restoreCallingIdentity(ident);
+        }
+	}
+
+	private void bootFastWakeInternal(long eventTime){
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"bootFastWakeInternal");
+		synchronized (mLock) {
+            if (bootFastWakeNoUpdateLocked(eventTime)) {
+                updatePowerStateLocked();
+            }
+        }
+	}
+
+	private boolean bootFastWakeNoUpdateLocked(long eventTime){
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"bootFastWakeNoUpdateLocked");
+		mDirty |= DIRTY_WAKEFULNESS;
+        mWakefulness = WAKEFULNESS_AWAKE;
+			mNotifier.onBootFastWake();
+		if(mBootFastTempWakeStatus)
+			mHandler.removeMessages(MSG_TEMP_WAKUP_RESLEEP);
+		userActivityNoUpdateLocked(
+                eventTime, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);
+		mBootFastStats = false;
+		mBootFastWakeLockToggle = false;
+		return true;
+	}
+
+	@Override
+	public boolean isBootFastStatus(){
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"isBootFastStatus = " + mBootFastStats);
+		return mBootFastStats;
+	}
+
+	
+	@Override
+	public boolean isBootFastWakeFromStandby(){
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"isBootFastWakeFromStandby");
+	    long bootFastSleepTimeEnd = SystemClock.uptimeMillis();
+        long bootFastSleepClockEnd = System.currentTimeMillis();        
+        if(!mBootFastStats){
+                return false; 
+        }else{
+                long time = Math.abs(Math.abs(bootFastSleepClockEnd - mBootFastSleepClockStart) - 
+                                Math.abs(bootFastSleepTimeEnd - mBootFastSleepTimeStart));
+            mBootFastSleepClockStart = System.currentTimeMillis();
+            mBootFastSleepTimeStart = SystemClock.uptimeMillis();
+            if(DEBUG_BOOTFAST)
+                   Slog.d(TAG,"standby time = " + time);
+                if(time>2000){
+                        return true;
+                }else{
+                        return false;
+                }
+        }
+	}
+
+	
+	
+	private void tempWakeUp(){
+		mBootFastTempWakeStatus = true;
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"tempWakeUp current ");
+		//mPolicy.hideScreen(true);
+		wakeUpInternal(SystemClock.uptimeMillis());
+		mPolicy.showPowerCharge(mBatteryLevel);
+		mBootFastSleepClockStart = System.currentTimeMillis();
+		mBootFastSleepTimeStart = SystemClock.uptimeMillis();
+		mHandler.sendEmptyMessageDelayed(MSG_TEMP_WAKUP_RESLEEP,4500);
+		//goToBootFastSleep(SystemClock.uptimeMillis());
+		return;
+	}
+
+	private void tempWakeUpFromNative(long eventTime){
+		if(DEBUG_BOOTFAST)
+			Slog.d(TAG,"tempWakeUpFromNative");
+		tempWakeUp();
+	}
     @Override // Binder call
     public void goToSleep(long eventTime, int reason) {
         if (eventTime > SystemClock.uptimeMillis()) {
@@ -976,7 +1165,7 @@ public final class PowerManagerService extends IPowerManager.Stub
         }
 
         if (eventTime < mLastWakeTime || mWakefulness == WAKEFULNESS_ASLEEP
-                || !mBootCompleted || !mSystemReady) {
+                || !mBootCompleted || !mSystemReady || mBootFastStats) {
             return false;
         }
 
@@ -1106,6 +1295,7 @@ public final class PowerManagerService extends IPowerManager.Stub
         // Because we might release the last suspend blocker here, we need to make sure
         // we finished everything else first!
         updateSuspendBlockerLocked();
+		updateBootFastSuspendBlockerLocked();
     }
 
     private void sendPendingNotificationsLocked() {
@@ -1154,7 +1344,12 @@ public final class PowerManagerService extends IPowerManager.Stub
                 final long now = SystemClock.uptimeMillis();
                 if (shouldWakeUpWhenPluggedOrUnpluggedLocked(wasPowered, oldPlugType,
                         dockedOnWirelessCharger)) {
-                    wakeUpNoUpdateLocked(now);
+                    if(mBootFastStats&&!wasPowered&&mIsPowered){
+						tempWakeUp();
+                    }else{
+                    	if(!mBootFastStats)
+                    		wakeUpNoUpdateLocked(now);
+                    }	
                 }
                 userActivityNoUpdateLocked(
                         now, PowerManager.USER_ACTIVITY_EVENT_OTHER, 0, Process.SYSTEM_UID);
@@ -1660,7 +1855,7 @@ public final class PowerManagerService extends IPowerManager.Stub
     }
 
     private int getDesiredScreenPowerStateLocked() {
-        if (mWakefulness == WAKEFULNESS_ASLEEP) {
+        if (mWakefulness == WAKEFULNESS_ASLEEP||mWakefulness == WAKEFULNESS_BOOTFAST) {
             return DisplayPowerRequest.SCREEN_STATE_OFF;
         }
 
@@ -1725,6 +1920,17 @@ public final class PowerManagerService extends IPowerManager.Stub
         }
     }
 
+	private void updateBootFastSuspendBlockerLocked(){
+		if(mWakeLockSuspendBlocker!=null){
+			if(mBootFastStats){
+				if(mBootFastWakeLockToggle)
+					mWakeLockSuspendBlocker.bootFastSleepRelease();
+				else
+					mWakeLockSuspendBlocker.bootFastWakeAcquire();
+			}
+		}
+	}
+	
     private boolean isCpuNeededLocked() {
         return !mBootCompleted
                 || mWakeLockSummary != 0
@@ -1835,7 +2041,8 @@ public final class PowerManagerService extends IPowerManager.Stub
             public void run() {
                 synchronized (this) {
                     if (shutdown) {
-                        ShutdownThread.shutdown(mContext, confirm);
+                        //ShutdownThread.shutdown(mContext, confirm);
+						ShutdownThread.shutdown(mContext,confirm,mPolicy);
                     } else {
                         ShutdownThread.reboot(mContext, reason, confirm);
                     }
@@ -2183,6 +2390,7 @@ public final class PowerManagerService extends IPowerManager.Stub
             pw.println("  mBatteryLevelWhenDreamStarted=" + mBatteryLevelWhenDreamStarted);
             pw.println("  mDockState=" + mDockState);
             pw.println("  mStayOn=" + mStayOn);
+			pw.println("  mBootFastStats=" + mBootFastStats);
             pw.println("  mProximityPositive=" + mProximityPositive);
             pw.println("  mBootCompleted=" + mBootCompleted);
             pw.println("  mSystemReady=" + mSystemReady);
@@ -2282,6 +2490,8 @@ public final class PowerManagerService extends IPowerManager.Stub
                 return "Dreaming";
             case WAKEFULNESS_NAPPING:
                 return "Napping";
+			case WAKEFULNESS_BOOTFAST:
+				return "Bootfast";
             default:
                 return Integer.toString(wakefulness);
         }
@@ -2382,6 +2592,11 @@ public final class PowerManagerService extends IPowerManager.Stub
                 case MSG_CHECK_IF_BOOT_ANIMATION_FINISHED:
                     checkIfBootAnimationFinished();
                     break;
+				case MSG_TEMP_WAKUP_RESLEEP:
+					mPolicy.hideScreen(true);
+					mBootFastTempWakeStatus= false;
+					goToBootFastSleep(SystemClock.uptimeMillis());
+					break;
             }
         }
     }
@@ -2520,6 +2735,22 @@ public final class PowerManagerService extends IPowerManager.Stub
             }
         }
 
+		@Override
+		public void bootFastSleepRelease(){
+			if(mReferenceCount > 0){
+				if(DEBUG_BOOTFAST)
+						Slog.d(TAG,"boot fast mode force release!");
+				nativeReleaseSuspendBlocker(mName);
+			}	
+		}
+		@Override
+		public void bootFastWakeAcquire(){
+			if (mReferenceCount > 0) {
+				if(DEBUG_BOOTFAST)
+					Slog.d(TAG,"boot fast mode resume wakelock!");
+               nativeAcquireSuspendBlocker(mName);
+            }
+		}
         @Override
         public String toString() {
             synchronized (this) {
@@ -2582,7 +2813,10 @@ public final class PowerManagerService extends IPowerManager.Stub
                 mBlanked = true;
                 mDisplayManagerService.blankAllDisplaysFromPowerManager();
                 nativeSetInteractive(false);
-                nativeSetAutoSuspend(true);
+				if(mBootFastStats)
+					nativeGoToBootFastSleep();
+				else
+                	nativeSetAutoSuspend(true);
             }
         }
 
diff --git a/services/java/com/android/server/power/ShutdownThread.java b/services/java/com/android/server/power/ShutdownThread.java
index c7f7390..f9da093 100644
--- a/services/java/com/android/server/power/ShutdownThread.java
+++ b/services/java/com/android/server/power/ShutdownThread.java
@@ -18,6 +18,11 @@
 package com.android.server.power;
 
 import android.app.ActivityManagerNative;
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.app.Application;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.app.IActivityManager;
@@ -32,6 +37,8 @@ import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.os.Handler;
+import android.os.UserHandle;
+import android.os.Message;
 import android.os.PowerManager;
 import android.os.RemoteException;
 import android.os.ServiceManager;
@@ -44,9 +51,25 @@ import android.os.storage.IMountService;
 import android.os.storage.IMountShutdownObserver;
 
 import com.android.internal.telephony.ITelephony;
+import android.provider.Settings;
 
 import android.util.Log;
 import android.view.WindowManager;
+import android.view.Surface;
+
+import android.media.AmrInputStream;
+import android.media.MediaPlayer;
+import android.view.IWindowManager;
+import android.view.WindowManagerPolicy;
+import java.util.ArrayList;
+import java.util.List;
+import java.io.IOException;
+import java.lang.InterruptedException;
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.io.InputStream;
+import java.lang.StringBuffer;
+import dalvik.system.Zygote;
 
 public final class ShutdownThread extends Thread {
     // constants
@@ -60,12 +83,20 @@ public final class ShutdownThread extends Thread {
     // length of vibration before shutting down
     private static final int SHUTDOWN_VIBRATE_MS = 500;
     
+    private static final int CLOSE_PROCESS_DIALOG = 2;
+    
+    private static final int MAX_SERVICES = 100;
+    
+    private static final int MAX_ACTIVITYS = 100;
+    
+    private static final int BOOTFAST_WAIT_TIME = 1000;
     // state tracking
     private static Object sIsStartedGuard = new Object();
     private static boolean sIsStarted = false;
     
     private static boolean mReboot;
     private static boolean mRebootSafeMode;
+	private static WindowManagerPolicy mPolicy;
     private static String mRebootReason;
 
     // Provides shutdown assurance in case the system_server is killed
@@ -73,9 +104,12 @@ public final class ShutdownThread extends Thread {
 
     // Indicates whether we are rebooting into safe mode
     public static final String REBOOT_SAFEMODE_PROPERTY = "persist.sys.safemode";
+    
+    //wether we have radio
+    private static final String PROPERTY_EMBEDED_TELEPHONY = "ro.sw.embeded.telephony";
 
     // static instance of this thread
-    private static final ShutdownThread sInstance = new ShutdownThread();
+    private static ShutdownThread sInstance;
     
     private final Object mActionDoneSync = new Object();
     private boolean mActionDone;
@@ -85,7 +119,9 @@ public final class ShutdownThread extends Thread {
     private PowerManager.WakeLock mScreenWakeLock;
     private Handler mHandler;
 
-    private static AlertDialog sConfirmDialog;
+    private static boolean mBootFastEnable = false;
+
+	private static AlertDialog sConfirmDialog;
     
     private ShutdownThread() {
     }
@@ -104,6 +140,13 @@ public final class ShutdownThread extends Thread {
         shutdownInner(context, confirm);
     }
 
+	public static void shutdown(final Context context, boolean confirm,WindowManagerPolicy policy){
+		mReboot = false;
+        mRebootSafeMode = false;
+		mPolicy = policy;
+        shutdownInner(context, confirm);
+	}
+
     static void shutdownInner(final Context context, boolean confirm) {
         // ensure that only one thread is trying to power down.
         // any additional calls are just returned
@@ -129,7 +172,51 @@ public final class ShutdownThread extends Thread {
             if (sConfirmDialog != null) {
                 sConfirmDialog.dismiss();
             }
-            sConfirmDialog = new AlertDialog.Builder(context)
+			if(mRebootSafeMode == true){
+            	sConfirmDialog = new AlertDialog.Builder(context)
+                    .setTitle(mRebootSafeMode
+                            ? com.android.internal.R.string.reboot_safemode_title
+                            : com.android.internal.R.string.power_off)
+                    .setMessage(resourceId)
+                    .setPositiveButton(com.android.internal.R.string.yes, new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int which) {
+                            beginShutdownSequence(context);
+                        }
+                    })
+                    .setNegativeButton(com.android.internal.R.string.no, null)
+                    .create();
+			}else{
+				if(Settings.Global.getInt(context.getContentResolver(), Settings.Global.DEVICE_PROVISIONED, 1)==1&&
+					SystemProperties.getBoolean("ro.sys.bootfast", false)){
+					boolean [] enableBootFast = {false};
+					enableBootFast[0] = Settings.System.getIntForUser(context.getContentResolver(), Settings.System.BOOT_FAST_ENABLE, 0,UserHandle.USER_CURRENT)==0?false:true;
+					sConfirmDialog = new AlertDialog.Builder(context)
+                    	.setTitle(mRebootSafeMode
+                            ? com.android.internal.R.string.reboot_safemode_title
+                            : com.android.internal.R.string.power_off)
+                    	.setMultiChoiceItems(com.android.internal.R.array.quick_boot_mode,enableBootFast,new DialogInterface.OnMultiChoiceClickListener(){
+                    	public void onClick(DialogInterface dialog, int which, boolean isChecked) {
+							Log.d(TAG,"which = "+ which + "isChecked = " + isChecked);
+							if(which==0){
+								if(isChecked){
+									Settings.System.putIntForUser(context.getContentResolver(), Settings.System.BOOT_FAST_ENABLE, 1,UserHandle.USER_CURRENT);
+								}else{
+									Settings.System.putIntForUser(context.getContentResolver(), Settings.System.BOOT_FAST_ENABLE, 0,UserHandle.USER_CURRENT);
+								}
+							}
+                    	}
+                    	})
+                    	.setPositiveButton(com.android.internal.R.string.yes, new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int which) {
+							if(mPolicy!=null)
+								mPolicy.acquireBAView();
+                            beginShutdownSequence(context);
+                        }
+                    	})
+                    	.setNegativeButton(com.android.internal.R.string.no, null)
+                    	.create();
+				}else{
+					sConfirmDialog = new AlertDialog.Builder(context)
                     .setTitle(mRebootSafeMode
                             ? com.android.internal.R.string.reboot_safemode_title
                             : com.android.internal.R.string.power_off)
@@ -141,6 +228,8 @@ public final class ShutdownThread extends Thread {
                     })
                     .setNegativeButton(com.android.internal.R.string.no, null)
                     .create();
+				}
+			}
             closer.dialog = sConfirmDialog;
             sConfirmDialog.setOnDismissListener(closer);
             sConfirmDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
@@ -184,6 +273,9 @@ public final class ShutdownThread extends Thread {
         mReboot = true;
         mRebootSafeMode = false;
         mRebootReason = reason;
+		if(reason!=null){
+			Log.d(TAG,"reboot reason is " + mRebootReason);
+		}
         shutdownInner(context, confirm);
     }
 
@@ -209,10 +301,40 @@ public final class ShutdownThread extends Thread {
             }
             sIsStarted = true;
         }
-
+		SystemProperties.set("sys.start_shutdown", "1");
+		
+		if(SystemProperties.getBoolean("ro.sys.bootfast", false)&&(1==Settings.System.getIntForUser(context.getContentResolver(), Settings.System.BOOT_FAST_ENABLE, 0,UserHandle.USER_CURRENT))){
+            mBootFastEnable = true;
+        }else{
+            mBootFastEnable = false;
+        }
+		if(mReboot){
+			mBootFastEnable = false;
+			Log.d(TAG,"reboot!");
+		}
+		if(mRebootSafeMode){
+			mBootFastEnable = false;
+			Log.d(TAG,"Go Into Safe Mode real reboot");
+		}
+		if(Zygote.systemInSafeMode){
+			mBootFastEnable = false;
+			Log.d(TAG,"In Safe Mode real reboot");
+		}
+		if(mRebootReason!=null){
+			mBootFastEnable = false;
+			Log.d(TAG,"have reason " + mRebootReason + "real reboot");
+		}
+		if(SystemProperties.getInt("sys.battery_zero",0)==1){
+			mBootFastEnable = false;
+			Log.d(TAG,"Battery to low we really shutdown!");
+		}
+		if(SystemProperties.getInt("sys.temperature_high",0)==1){
+			mBootFastEnable = false;
+			Log.d(TAG,"temperature high we relly shutdown!");
+		}
         // throw up an indeterminate system dialog to indicate radio is
         // shutting down.
-        ProgressDialog pd = new ProgressDialog(context);
+        final ProgressDialog pd = new ProgressDialog(context);
         pd.setTitle(context.getText(com.android.internal.R.string.power_off));
         pd.setMessage(context.getText(com.android.internal.R.string.shutdown_progress));
         pd.setIndeterminate(true);
@@ -221,6 +343,7 @@ public final class ShutdownThread extends Thread {
 
         pd.show();
 
+		sInstance = new ShutdownThread();
         sInstance.mContext = context;
         sInstance.mPowerManager = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
 
@@ -252,6 +375,15 @@ public final class ShutdownThread extends Thread {
 
         // start the thread that initiates shutdown
         sInstance.mHandler = new Handler() {
+        	@Override
+        	public void handleMessage(Message msg){
+        		switch(msg.what) {
+        			case  CLOSE_PROCESS_DIALOG:
+        					Log.v(TAG,"close process dialog now");
+        					pd.dismiss();
+        					break;
+        		}
+        	}
         };
         sInstance.start();
     }
@@ -274,7 +406,7 @@ public final class ShutdownThread extends Thread {
                 actionDone();
             }
         };
-
+        if(!mBootFastEnable){
         /*
          * Write a system property in case the system_server reboots before we
          * get to the actual hardware restart. If that happens, we'll retry at
@@ -293,6 +425,8 @@ public final class ShutdownThread extends Thread {
             SystemProperties.set(REBOOT_SAFEMODE_PROPERTY, "1");
         }
 
+		killRemoveActivity(mContext);
+    	killRemoveService(mContext);
         Log.i(TAG, "Sending shutdown broadcast...");
         
         // First send the high-level shut down broadcast.
@@ -327,7 +461,9 @@ public final class ShutdownThread extends Thread {
         }
 
         // Shutdown radios.
-        shutdownRadios(MAX_RADIO_WAIT_TIME);
+        if(SystemProperties.get(PROPERTY_EMBEDED_TELEPHONY).equals("true")){
+        	shutdownRadios(MAX_RADIO_WAIT_TIME);
+        }	
 
         // Shutdown MountService to ensure media is in a safe state
         IMountShutdownObserver observer = new IMountShutdownObserver.Stub() {
@@ -368,6 +504,109 @@ public final class ShutdownThread extends Thread {
         }
 
         rebootOrShutdown(mReboot, mRebootReason);
+        }
+		if (SHUTDOWN_VIBRATE_MS > 0) {
+            // vibrate before shutting down
+            Vibrator vibrator = new SystemVibrator();
+            try {
+                vibrator.vibrate(SHUTDOWN_VIBRATE_MS);
+            } catch (Exception e) {
+                // Failure to vibrate shouldn't interrupt shutdown.  Just log it.
+                Log.w(TAG, "Failed to vibrate during shutdown.", e);
+            }
+		}
+	
+		IWindowManager 	mWindowManager;
+		mWindowManager = IWindowManager.Stub.asInterface(ServiceManager.getService("window"));
+		if(mWindowManager != null){
+			try{
+                mWindowManager.freezeRotation(Surface.ROTATION_0);
+                mWindowManager.updateRotation(true, true);
+                mWindowManager.setEventDispatching(false);
+            }catch (RemoteException e) {
+            }
+		}
+		//shutdownRadios(MAX_RADIO_WAIT_TIME);
+		
+    	killRemoveActivity(mContext);
+    	killRemoveService(mContext);
+
+		MobileDirectController.getInstance().setNetworkEnable(false);
+		SystemClock.sleep(BOOTFAST_WAIT_TIME);
+		
+		sIsStarted = false;
+		try{
+			sInstance.mCpuWakeLock.release();
+			sInstance.mScreenWakeLock.release();
+		}catch(SecurityException e){
+			SystemProperties.set("sys.start_shutdown", "0");
+		}
+		sInstance.mHandler.sendEmptyMessage(CLOSE_PROCESS_DIALOG);
+		Log.v(TAG,"CLOSE_PROCESS_DIALOG");
+		SystemProperties.set("sys.start_shutdown", "0");
+		sInstance.mPowerManager.goToBootFastSleep(SystemClock.uptimeMillis());
+    }
+	private  void killRemoveActivity(Context context)
+    {
+    	ActivityManager am = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
+    	List<ActivityManager.RecentTaskInfo> recents = am.getRecentTasks(MAX_ACTIVITYS,ActivityManager.RECENT_WITH_EXCLUDED);
+       if(recents != null)
+         {
+         		Log.v(TAG,"Task Size is " + recents.size());
+         		for(int i=0;i<recents.size();i++)
+         		{
+         				ActivityManager.RecentTaskInfo task = recents.get(i);
+                		ActivityManager.TaskThumbnails thumbs = am.getTaskThumbnails(task.persistentId);
+                		if (task != null) 
+                		{
+                			if(task.persistentId > 0)
+                			{
+                				if(!task. baseIntent.getComponent().getPackageName().equals("com.android.launcher"))
+                				{
+                    					am.removeTask(task.persistentId, ActivityManager.REMOVE_TASK_KILL_PROCESS);
+                     				Log.v(TAG,"remove a task " + task.baseIntent.getComponent().getPackageName());
+                     				if(thumbs.numSubThumbbails > 0)
+                     					{
+                     					for(int j=0;j<thumbs.numSubThumbbails;j++)
+                     						{
+                    		 						am.removeSubTask(task.persistentId, j);
+                    		 						Log.v(TAG,"remove a sub task ");
+                     						}
+                    					}
+                				}
+                			}
+                		}
+             	}
+         }  
+    }
+
+	private void killRemoveService(Context context){
+		 ActivityManager am = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
+        List<ActivityManager.RunningServiceInfo> services = am.getRunningServices(MAX_SERVICES);
+        int NS = services != null ? services.size() : 0;
+        for (int i=0; i<NS; i++) {
+            ActivityManager.RunningServiceInfo si = services.get(i);
+            // We are not interested in services that have not been started
+            // and don't have a known client, because
+            // there is nothing the user can do about them.
+            if (!si.started && si.clientLabel == 0) {
+                services.remove(i);
+                i--;
+                NS--;
+                continue;
+            }
+            // We likewise don't care about services running in a
+            // persistent process like the system or phone.
+            if ((si.flags&ActivityManager.RunningServiceInfo.FLAG_PERSISTENT_PROCESS)
+                    != 0) {
+                services.remove(i);
+                i--;
+                NS--;
+                continue;
+            }
+            Log.v(TAG,"service = " + services.get(i).process);
+            context.stopService(new Intent().setComponent(services.get(i).service));
+        }
     }
 
     private void shutdownRadios(int timeout) {
diff --git a/services/java/com/android/server/power/SuspendBlocker.java b/services/java/com/android/server/power/SuspendBlocker.java
index 70b278a..4a23faf 100644
--- a/services/java/com/android/server/power/SuspendBlocker.java
+++ b/services/java/com/android/server/power/SuspendBlocker.java
@@ -40,4 +40,8 @@ interface SuspendBlocker {
      * The system may crash.
      */
     void release();
+
+	void bootFastSleepRelease();
+
+	void bootFastWakeAcquire();
 }
diff --git a/services/java/com/android/server/usb/UsbDeviceManager.java b/services/java/com/android/server/usb/UsbDeviceManager.java
index c7c2c62..109f27b 100644
--- a/services/java/com/android/server/usb/UsbDeviceManager.java
+++ b/services/java/com/android/server/usb/UsbDeviceManager.java
@@ -46,6 +46,8 @@ import android.os.storage.StorageVolume;
 import android.provider.Settings;
 import android.util.Pair;
 import android.util.Slog;
+import android.os.PowerManager;
+import android.os.DynamicPManager;
 
 import com.android.internal.annotations.GuardedBy;
 
@@ -89,6 +91,7 @@ public class UsbDeviceManager {
     private static final int MSG_SYSTEM_READY = 3;
     private static final int MSG_BOOT_COMPLETED = 4;
     private static final int MSG_USER_SWITCHED = 5;
+	private static final int MSG_BOOTFAST_SWITCHED = 6;
 
     private static final int AUDIO_MODE_NONE = 0;
     private static final int AUDIO_MODE_SOURCE = 1;
@@ -97,6 +100,7 @@ public class UsbDeviceManager {
     // We often get rapid connect/disconnect events when enabling USB functions,
     // which need debouncing.
     private static final int UPDATE_DELAY = 1000;
+    private static final int USB_CONNECT_MIN_FREQ = 1008000;
 
     private static final String BOOT_MODE_PROPERTY = "ro.bootmode";
 
@@ -117,6 +121,11 @@ public class UsbDeviceManager {
     private Map<String, List<Pair<String, String>>> mOemModeMap;
     private String[] mAccessoryStrings;
     private UsbDebuggingManager mDebuggingManager;
+    private PowerManager.WakeLock wl;   
+    private DynamicPManager mDPM;
+    private int mLastMinFreq;
+    private int wlref = 0;
+    private int dlref = 0;
 
     private class AdbSettingsObserver extends ContentObserver {
         public AdbSettingsObserver() {
@@ -156,6 +165,9 @@ public class UsbDeviceManager {
         mHasUsbAccessory = pm.hasSystemFeature(PackageManager.FEATURE_USB_ACCESSORY);
         initRndisAddress();
 
+		PowerManager power = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);        
+        wl = power.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
+        
         readOemUsbOverrideConfig();
 
         // create a thread for our Handler
@@ -185,7 +197,45 @@ public class UsbDeviceManager {
             return mCurrentSettings;
         }
     }
-
+    
+    private void enableWakeLock(boolean enable){
+        if(enable){
+            Slog.d(TAG, "enable "+ TAG +" wakelock"+" wlref = "+ wlref);            
+            if(wlref==0){
+                wlref++;
+                wl.acquire();
+            }            
+        }else{
+            Slog.d(TAG, "disable "+ TAG +" wakelock"+" wlref = "+ wlref);              
+            if(wlref==1){
+                wl.release();
+                wlref--;
+            }
+        }
+    }
+	
+    private void enableDPMLock(boolean enable){
+		if(enable){
+			if(dlref==0){
+				dlref++;
+				if(mDPM == null){
+					Slog.v(TAG,"enableDPMLock +++");
+					mDPM = new DynamicPManager();
+				}
+				mLastMinFreq = mDPM.getCpuScalingMinFreq();
+				mDPM.setCpuScalingMinFreq(USB_CONNECT_MIN_FREQ);
+			}
+		}else{
+			if(dlref==1){
+				if(mDPM != null){
+					Slog.v(TAG,"enableDPMLock ---");
+					mDPM.setCpuScalingMinFreq(mLastMinFreq);
+					mDPM = null;
+				}
+				dlref--;
+			}
+		}
+	}
     public void systemReady() {
         if (DEBUG) Slog.d(TAG, "systemReady");
 
@@ -195,10 +245,13 @@ public class UsbDeviceManager {
         // We do not show the USB notification if the primary volume supports mass storage.
         // The legacy mass storage UI will be used instead.
         boolean massStorageSupported = false;
-        final StorageManager storageManager = StorageManager.from(mContext);
-        final StorageVolume primary = storageManager.getPrimaryVolume();
-        massStorageSupported = primary != null && primary.allowMassStorage();
-        mUseUsbNotification = !massStorageSupported;
+        StorageManager storageManager = (StorageManager)
+                mContext.getSystemService(Context.STORAGE_SERVICE);
+        StorageVolume[] volumes = storageManager.getVolumeList();
+        if (volumes.length > 0) {
+            massStorageSupported = volumes[0].allowMassStorage();
+        }
+        mUseUsbNotification = massStorageSupported;
 
         // make sure the ADB_ENABLED setting value matches the current state
         Settings.Global.putInt(mContentResolver, Settings.Global.ADB_ENABLED, mAdbEnabled ? 1 : 0);
@@ -325,6 +378,15 @@ public class UsbDeviceManager {
             }
         };
 
+		private final BroadcastReceiver mBootFastReceiver = new BroadcastReceiver() {
+			@Override
+			public void onReceive(Context context, Intent intent){
+				Slog.d(TAG,"mBootFastReceiver reveived ACTION_BOOT_FAST");
+				final int boot = intent.getIntExtra(Intent.EXTRA_BOOT_FAST,0);
+				mHandler.obtainMessage(MSG_BOOTFAST_SWITCHED, boot, 0).sendToTarget();
+			}
+		};
+
         public UsbHandler(Looper looper) {
             super(looper);
             try {
@@ -373,6 +435,8 @@ public class UsbDeviceManager {
                         mBootCompletedReceiver, new IntentFilter(Intent.ACTION_BOOT_COMPLETED));
                 mContext.registerReceiver(
                         mUserSwitchedReceiver, new IntentFilter(Intent.ACTION_USER_SWITCHED));
+				mContext.registerReceiver(
+                        mBootFastReceiver, new IntentFilter(Intent.ACTION_BOOT_FAST));
             } catch (Exception e) {
                 Slog.e(TAG, "Error initializing UsbHandler", e);
             }
@@ -596,6 +660,8 @@ public class UsbDeviceManager {
                 case MSG_UPDATE_STATE:
                     mConnected = (msg.arg1 == 1);
                     mConfigured = (msg.arg2 == 1);
+                    enableWakeLock(mConnected);
+                    enableDPMLock(mConnected);
                     updateUsbNotification();
                     updateAdbNotification();
                     if (containsFunction(mCurrentFunctions,
@@ -635,6 +701,15 @@ public class UsbDeviceManager {
                         mDebuggingManager.setAdbEnabled(mAdbEnabled);
                     }
                     break;
+				case MSG_BOOTFAST_SWITCHED:
+					if(msg.arg1==0){
+						Slog.d(TAG,"boot fast usb switch to none");
+						setUsbConfig("none");
+					}else{
+						Slog.d(TAG,"boot fast usb switch to ok");
+						setUsbConfig(mCurrentFunctions);
+					}
+					break;
                 case MSG_USER_SWITCHED: {
                     final boolean mtpActive =
                             containsFunction(mCurrentFunctions, UsbManager.USB_FUNCTION_MTP)
diff --git a/services/java/com/android/server/wm/Session.java b/services/java/com/android/server/wm/Session.java
index 3b4c1ab..67c5896 100644
--- a/services/java/com/android/server/wm/Session.java
+++ b/services/java/com/android/server/wm/Session.java
@@ -179,6 +179,11 @@ final class Session extends IWindowSession.Stub
         mService.removeWindow(this, window);
     }
 
+	public void bringToFront(IWindow window) 
+	{
+        mService.bringToFrontWindow(this, window);
+    }
+
     public int relayout(IWindow window, int seq, WindowManager.LayoutParams attrs,
             int requestedWidth, int requestedHeight, int viewFlags,
             int flags, Rect outFrame, Rect outContentInsets,
diff --git a/services/java/com/android/server/wm/WindowManagerService.java b/services/java/com/android/server/wm/WindowManagerService.java
index 5b9fc9a..756b764 100755
--- a/services/java/com/android/server/wm/WindowManagerService.java
+++ b/services/java/com/android/server/wm/WindowManagerService.java
@@ -83,6 +83,7 @@ import android.hardware.display.DisplayManager;
 import android.os.Binder;
 import android.os.Bundle;
 import android.os.Debug;
+import android.os.DynamicPManager;
 import android.os.Handler;
 import android.os.IBinder;
 import android.os.IRemoteCallback;
@@ -578,6 +579,8 @@ public class WindowManagerService extends IWindowManager.Stub
     final InputManagerService mInputManager;
     final DisplayManagerService mDisplayManagerService;
     final DisplayManager mDisplayManager;
+    
+    private DynamicPManager mDPM = new DynamicPManager();
 
     // Who is holding the screen on.
     Session mHoldingScreenOn;
@@ -796,6 +799,12 @@ public class WindowManagerService extends IWindowManager.Stub
         mOnlyCore = onlyCore;
         mLimitedAlphaCompositing = context.getResources().getBoolean(
                 com.android.internal.R.bool.config_sf_limitedAlpha);
+
+        mWindowAnimationScale = Float.parseFloat(context.getResources().getString(
+               com.android.internal.R.string.config_default_windowAnimationScale));
+        mTransitionAnimationScale = Float.parseFloat(context.getResources().getString(
+               com.android.internal.R.string.config_default_transitionAnimationScale));
+
         mDisplayManagerService = displayManager;
         mHeadless = displayManager.isHeadless();
 
@@ -2534,6 +2543,98 @@ public class WindowManagerService extends IWindowManager.Stub
                 win.mAppToken.updateReportedVisibilityLocked();
             }
         }
+        
+        mInputMonitor.updateInputWindowsLw(true /*force*/);
+    }
+
+	public void bringToFrontWindow(Session session, IWindow client) 
+	{
+        synchronized(mWindowMap) 
+		{
+            WindowState win = windowForClientLocked(session, client, false);
+            if (win == null) {
+                return;
+            }
+            bringToFrontWindowLocked(session, win);
+        }
+    }
+	
+    public void bringToFrontWindowLocked(Session session, WindowState win) 
+	{
+        final long origId = Binder.clearCallingIdentity();
+
+        bringToFrontWindowInnerLocked(session, win);
+
+        updateFocusedWindowLocked(UPDATE_FOCUS_NORMAL, true /*updateInputWindows*/);
+        Binder.restoreCallingIdentity(origId);
+    }
+
+    private void bringToFrontWindowInnerLocked(Session session, WindowState win) {
+        if (win.mRemoved) 
+		{
+            // Nothing to do.
+            return;
+        }
+		WindowList windows = win.getWindowList();
+        windows.remove(win);
+        mWindowsChanged = true;
+         Slog.d(TAG, "Final bringToFront of window: " + win);
+
+        final WindowToken token = win.mToken;
+        final AppWindowToken atoken = win.mAppToken;
+         Slog.d(TAG, "bringToFronting " + win + " from " + token);
+        token.windows.remove(win);
+        if (atoken != null) 
+		{
+            atoken.allAppWindows.remove(win);
+        }
+        Slog.d(
+                TAG, "**** bringToFronting window " + win + ": count="
+                + token.windows.size());
+
+		addWindowToListInOrderLocked(win, true);
+        if (win.mAttrs.type == TYPE_WALLPAPER) 
+		{
+            mLastWallpaperTimeoutTime = 0;
+            adjustWallpaperWindowsLocked();
+        } 
+		else if ((win.mAttrs.flags&FLAG_SHOW_WALLPAPER) != 0) 
+		{
+            adjustWallpaperWindowsLocked();
+        }
+
+		for (int i=win.mChildWindows.size()-1; i>=0; i--) 
+		{
+            WindowState cwin = win.mChildWindows.get(i);
+            Slog.w(TAG, "Force-bringToFronting child win " + cwin + " from container "+ win);
+            bringToFrontWindowInnerLocked(cwin.mSession, cwin);
+        }
+
+        mInputMonitor.setUpdateInputWindowsNeededLw();
+
+        boolean focusChanged = false;
+        if (win.canReceiveKeys()) 
+		{
+            focusChanged = updateFocusedWindowLocked(UPDATE_FOCUS_WILL_ASSIGN_LAYERS,false /*updateInputWindows*/);
+        }
+
+        assignLayersLocked(windows);
+        // Don't do layout here, the window must call
+        // relayout to be displayed, so we'll do it there.
+
+        //dump();
+
+        if (focusChanged) 
+		{
+            finishUpdateFocusedWindowAfterAssignLayersLocked(false /*updateInputWindows*/);
+        }
+        
+        win.mLayoutNeeded = true;
+        performLayoutAndPlaceSurfacesLocked();
+        if (win.mAppToken != null)
+		{
+        	win.mAppToken.updateReportedVisibilityLocked();
+        }
 
         mInputMonitor.updateInputWindowsLw(true /*force*/);
     }
@@ -3316,6 +3417,10 @@ public class WindowManagerService extends IWindowManager.Stub
         switch (transit) {
             case WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN:
             case WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE:
+            case WindowManagerPolicy.TRANSIT_WALLPAPER_CLOSE:
+            case WindowManagerPolicy.TRANSIT_WALLPAPER_OPEN:
+            case WindowManagerPolicy.TRANSIT_TASK_OPEN:
+            case WindowManagerPolicy.TRANSIT_TASK_CLOSE:
                 duration = mContext.getResources().getInteger(
                         com.android.internal.R.integer.config_shortAnimTime);
                 break;
@@ -5451,7 +5556,7 @@ public class WindowManagerService extends IWindowManager.Stub
     // Called by window manager policy.  Not exposed externally.
     @Override
     public void shutdown(boolean confirm) {
-        ShutdownThread.shutdown(mContext, confirm);
+        ShutdownThread.shutdown(mContext, confirm,mPolicy);
     }
 
     // Called by window manager policy.  Not exposed externally.
@@ -6036,6 +6141,7 @@ public class WindowManagerService extends IWindowManager.Stub
         }
 
         if (changed || alwaysSendConfiguration) {
+        	mDPM.notifyUsrPulse();
             sendNewConfiguration();
         }
 
diff --git a/services/jni/Android.mk b/services/jni/Android.mk
index d097a93..632cbdf 100644
--- a/services/jni/Android.mk
+++ b/services/jni/Android.mk
@@ -16,6 +16,7 @@ LOCAL_SRC_FILES:= \
     com_android_server_VibratorService.cpp \
     com_android_server_location_GpsLocationProvider.cpp \
     com_android_server_connectivity_Vpn.cpp \
+    com_android_server_ActivityManagerService.cpp \
     onload.cpp
 
 LOCAL_C_INCLUDES += \
@@ -42,7 +43,8 @@ LOCAL_SHARED_LIBRARIES := \
     libskia \
     libgui \
     libusbhost \
-    libsuspend
+    libsuspend \
+    libcheckfile
 
 ifeq ($(WITH_MALLOC_LEAK_CHECK),true)
     LOCAL_CFLAGS += -DMALLOC_LEAK_CHECK
diff --git a/services/jni/com_android_server_BatteryService.cpp b/services/jni/com_android_server_BatteryService.cpp
index e6133af..94a64cf 100644
--- a/services/jni/com_android_server_BatteryService.cpp
+++ b/services/jni/com_android_server_BatteryService.cpp
@@ -33,6 +33,9 @@
 #include <unistd.h>
 #include <dirent.h>
 #include <linux/ioctl.h>
+#include <hardware/power.h>
+#include <hardware_legacy/power.h>
+#include <cutils/android_reboot.h>
 
 namespace android {
 
@@ -223,9 +226,15 @@ static void android_server_BatteryService_update(JNIEnv* env, jobject obj)
         env->SetObjectField(obj, gFieldIds.mBatteryTechnology, env->NewStringUTF(buf));
 }
 
+static void android_server_BatteryService_shutDownNotFromPMS(){
+    ALOGD("android_server_BatteryService_shutDownNotFromPMS");
+    acquire_wake_lock(PARTIAL_WAKE_LOCK,"battery");
+    //android_reboot(ANDROID_RB_POWEROFF, 0, 0);
+}
 static JNINativeMethod sMethods[] = {
      /* name, signature, funcPtr */
 	{"native_update", "()V", (void*)android_server_BatteryService_update},
+    {"native_shutdown","()V",(void*)android_server_BatteryService_shutDownNotFromPMS},    
 };
 
 int register_android_server_BatteryService(JNIEnv* env)
diff --git a/services/jni/com_android_server_input_InputManagerService.cpp b/services/jni/com_android_server_input_InputManagerService.cpp
index a97becf..c2b01ad 100644
--- a/services/jni/com_android_server_input_InputManagerService.cpp
+++ b/services/jni/com_android_server_input_InputManagerService.cpp
@@ -33,6 +33,7 @@
 #include <utils/Log.h>
 #include <utils/Looper.h>
 #include <utils/threads.h>
+#include <cutils/properties.h>
 
 #include <input/InputManager.h>
 #include <input/PointerController.h>
@@ -250,6 +251,9 @@ private:
     // Power manager interactions.
     bool isScreenOn();
     bool isScreenBright();
+    void tempWakeUp(nsecs_t eventTime);
+    bool isBootFastStatus();
+    bool isPowered();
 
     static bool checkAndClearExceptionFromCallback(JNIEnv* env, const char* methodName);
 
@@ -806,6 +810,14 @@ void NativeInputManager::interceptKeyBeforeQueueing(const KeyEvent* keyEvent,
             }
         }
 
+        if(isBootFastStatus()){
+            if(isPowered() == true){
+                if(isScreenOn == false){
+                    if(keyEvent->getKeyCode()==AKEYCODE_POWER)
+                    tempWakeUp(0);
+                }
+            }
+        }
         handleInterceptActions(wmActions, when, /*byref*/ policyFlags);
     } else {
         policyFlags |= POLICY_FLAG_PASS_TO_USER;
@@ -942,6 +954,18 @@ bool NativeInputManager::dispatchUnhandledKey(const sp<InputWindowHandle>& input
     return result;
 }
 
+bool NativeInputManager::isBootFastStatus(){
+    return android_server_PowerManagerService_isBootFastStatus();
+}
+
+bool NativeInputManager::isPowered(){
+    return android_server_PowerManagerService_isPowered();
+}
+
+void NativeInputManager::tempWakeUp(nsecs_t eventTime){
+    android_server_PowerManagerService_tempWakeuUp(eventTime);
+}
+    
 void NativeInputManager::pokeUserActivity(nsecs_t eventTime, int32_t eventType) {
     android_server_PowerManagerService_userActivity(eventTime, eventType);
 }
@@ -997,6 +1021,23 @@ static void nativeSetDisplayViewport(JNIEnv* env, jclass clazz, jint ptr, jboole
         jint deviceWidth, jint deviceHeight) {
     NativeInputManager* im = reinterpret_cast<NativeInputManager*>(ptr);
 
+    if(!external)
+    {
+        char property[PROPERTY_VALUE_MAX];
+        if (property_get("ro.sf.rotation", property, NULL) > 0) {
+            switch (atoi(property)) {
+                case 90:
+                    orientation = (orientation + 1) % 4;
+                    break;
+                case 180:
+                    orientation = (orientation + 2) % 4;
+                    break;
+                case 270:
+                    orientation = (orientation + 3) % 4;
+                    break;
+            }
+        }
+    }
     DisplayViewport v;
     v.displayId = displayId;
     v.orientation = orientation;
diff --git a/services/jni/com_android_server_power_PowerManagerService.cpp b/services/jni/com_android_server_power_PowerManagerService.cpp
index 23c33af..836a2bd 100644
--- a/services/jni/com_android_server_power_PowerManagerService.cpp
+++ b/services/jni/com_android_server_power_PowerManagerService.cpp
@@ -45,10 +45,19 @@ static struct {
     jmethodID wakeUpFromNative;
     jmethodID goToSleepFromNative;
     jmethodID userActivityFromNative;
+    jmethodID tempWakeUpFromNative;
 } gPowerManagerServiceClassInfo;
 
 // ----------------------------------------------------------------------------
 
+// ----------------------------------------------------------------------------
+static struct{
+    jfieldID isPowered;
+    jfieldID bootFastStatus;    
+}gPowerManagerServiceFieldInfo;
+
+// ----------------------------------------------------------------------------
+
 static jobject gPowerManagerServiceObj;
 static struct power_module* gPowerModule;
 
@@ -83,6 +92,34 @@ bool android_server_PowerManagerService_isScreenBright() {
     return gScreenBright;
 }
 
+
+bool android_server_PowerManagerService_isBootFastStatus(){
+    jboolean retval = JNI_FALSE;
+    if (gPowerManagerServiceObj) {
+        JNIEnv* env = AndroidRuntime::getJNIEnv();
+        retval = env->GetBooleanField(gPowerManagerServiceObj,gPowerManagerServiceFieldInfo.bootFastStatus);
+    }
+    return retval==JNI_FALSE?false:true;
+}
+
+bool android_server_PowerManagerService_isPowered(){
+    jboolean retval = JNI_FALSE;
+    if (gPowerManagerServiceObj) {
+        JNIEnv* env = AndroidRuntime::getJNIEnv();
+        retval = env->GetBooleanField(gPowerManagerServiceObj,gPowerManagerServiceFieldInfo.isPowered);
+    }
+    return retval==JNI_FALSE?false:true;
+}
+
+void android_server_PowerManagerService_tempWakeuUp(nsecs_t eventTime){
+     if (gPowerManagerServiceObj) {
+        JNIEnv* env = AndroidRuntime::getJNIEnv();
+        env->CallVoidMethod(gPowerManagerServiceObj,
+                gPowerManagerServiceClassInfo.tempWakeUpFromNative,
+                nanoseconds_to_milliseconds(eventTime));
+        checkAndClearExceptionFromCallback(env, "tempWakeUpFromNative");
+    }
+}
 void android_server_PowerManagerService_userActivity(nsecs_t eventTime, int32_t eventType) {
     // Tell the power HAL when user activity occurs.
     if (gPowerModule && gPowerModule->powerHint) {
@@ -179,6 +216,12 @@ static void nativeSetInteractive(JNIEnv *env, jclass clazz, jboolean enable) {
     }
 }
 
+static void nativeGoToBootFastSleep(JNIEnv *env, jobject clazz) {
+	ALOGD("nativeGoToBootFastSleep");
+	autosuspend_bootfast();
+    return;
+}
+
 static void nativeSetAutoSuspend(JNIEnv *env, jclass clazz, jboolean enable) {
     if (enable) {
         ALOGD_IF_SLOW(100, "Excessive delay in autosuspend_enable() while turning screen off");
@@ -219,6 +262,8 @@ static JNINativeMethod gPowerManagerServiceMethods[] = {
             (void*) nativeReleaseSuspendBlocker },
     { "nativeSetInteractive", "(Z)V",
             (void*) nativeSetInteractive },
+    { "nativeGoToBootFastSleep", "()V",
+            (void*) nativeGoToBootFastSleep },        
     { "nativeSetAutoSuspend", "(Z)V",
             (void*) nativeSetAutoSuspend },
     { "nativeShutdown", "()V",
@@ -258,6 +303,15 @@ int register_android_server_PowerManagerService(JNIEnv* env) {
     GET_METHOD_ID(gPowerManagerServiceClassInfo.userActivityFromNative, clazz,
             "userActivityFromNative", "(JII)V");
 
+    GET_METHOD_ID(gPowerManagerServiceClassInfo.tempWakeUpFromNative,clazz,
+            "tempWakeUpFromNative","(J)V");
+
+    GET_FIELD_ID(gPowerManagerServiceFieldInfo.isPowered,clazz,
+            "mIsPowered","Z");
+
+    GET_FIELD_ID(gPowerManagerServiceFieldInfo.bootFastStatus,clazz,
+            "mBootFastStats","Z");
+
     // Initialize
     for (int i = 0; i <= USER_ACTIVITY_EVENT_LAST; i++) {
         gLastEventTime[i] = LLONG_MIN;
diff --git a/services/jni/com_android_server_power_PowerManagerService.h b/services/jni/com_android_server_power_PowerManagerService.h
index 0808b80..f4a8c50 100644
--- a/services/jni/com_android_server_power_PowerManagerService.h
+++ b/services/jni/com_android_server_power_PowerManagerService.h
@@ -29,6 +29,9 @@ extern bool android_server_PowerManagerService_isScreenBright();
 extern void android_server_PowerManagerService_userActivity(nsecs_t eventTime, int32_t eventType);
 extern void android_server_PowerManagerService_wakeUp(nsecs_t eventTime);
 extern void android_server_PowerManagerService_goToSleep(nsecs_t eventTime);
+extern bool android_server_PowerManagerService_isBootFastStatus();
+extern bool android_server_PowerManagerService_isPowered();
+extern void android_server_PowerManagerService_tempWakeuUp(nsecs_t eventTime);
 
 } // namespace android
 
diff --git a/services/jni/onload.cpp b/services/jni/onload.cpp
index 423ebd1..8d0d598 100644
--- a/services/jni/onload.cpp
+++ b/services/jni/onload.cpp
@@ -34,6 +34,7 @@ int register_android_server_VibratorService(JNIEnv* env);
 int register_android_server_SystemServer(JNIEnv* env);
 int register_android_server_location_GpsLocationProvider(JNIEnv* env);
 int register_android_server_connectivity_Vpn(JNIEnv* env);
+int register_android_server_ActivityManagerService(JNIEnv* env);
 };
 
 using namespace android;
@@ -63,6 +64,7 @@ extern "C" jint JNI_OnLoad(JavaVM* vm, void* reserved)
     register_android_server_SystemServer(env);
     register_android_server_location_GpsLocationProvider(env);
     register_android_server_connectivity_Vpn(env);
+	register_android_server_ActivityManagerService(env);
 
     return JNI_VERSION_1_4;
 }
diff --git a/telephony/java/android/telephony/SignalStrength.java b/telephony/java/android/telephony/SignalStrength.java
index f998935..b7e390f 100644
--- a/telephony/java/android/telephony/SignalStrength.java
+++ b/telephony/java/android/telephony/SignalStrength.java
@@ -444,7 +444,8 @@ public class SignalStrength implements Parcelable {
         int level;
 
         if (isGsm) {
-            level = getLteLevel();
+            //level = getLteLevel();
+            level = getGsmLevel();
             if (level == SIGNAL_STRENGTH_NONE_OR_UNKNOWN) {
                 level = getGsmLevel();
             }
diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index 2fa41e7..8ff68b3 100755
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -33,10 +33,14 @@ import com.android.internal.telephony.RILConstants;
 import com.android.internal.telephony.TelephonyProperties;
 
 import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import java.util.Properties;
+import java.io.File;
+
 
 /**
  * Provides access to information about the telephony services on
@@ -200,12 +204,87 @@ public class TelephonyManager {
      *   {@link android.Manifest.permission#READ_PHONE_STATE READ_PHONE_STATE}
      */
     public String getDeviceId() {
-        try {
-            return getSubscriberInfo().getDeviceId();
-        } catch (RemoteException ex) {
-            return null;
-        } catch (NullPointerException ex) {
-            return null;
+		if(SystemProperties.get("ro.sw.embeded.telephony").equals("true")) {
+	        try {
+	            return getSubscriberInfo().getDeviceId();
+	        } catch (RemoteException ex) {
+	            return null;
+	        } catch (NullPointerException ex) {
+	            return null;
+	        }
+        } else {
+	        String device_id = "xxx";
+	        String IMEI_FILE = "/data/misc/radio/imei.conf";
+			try {
+				device_id = getSubscriberInfo().getDeviceId();
+				if( device_id != null ) {
+					if( SystemProperties.get(TelephonyProperties.PROPERTY_OPERATOR_ISO_COUNTRY).equals("") ) {
+				        Properties tProperties = new Properties();
+				        try {
+					        FileInputStream infile = new FileInputStream(IMEI_FILE);
+					        tProperties.load(infile);
+					        infile.close();
+					        device_id = tProperties.getProperty("IMEI", null);
+					        return device_id;
+					    } catch (IOException ex1) {
+							device_id = "352005048247251";
+					    }
+					}
+
+					return device_id;
+				}else if( device_id.equals("") ){
+					device_id = "352005048247251";
+				}
+
+				return device_id;
+			} catch (RemoteException ex) {
+				return "352005048247251";
+			} catch (NullPointerException ex) {
+				Properties tProperties = new Properties();
+				try {
+			        FileInputStream infile = new FileInputStream(IMEI_FILE);
+			        tProperties.load(infile);
+			        infile.close();
+			        device_id = tProperties.getProperty("IMEI", null);
+			    } catch (IOException ex2) {
+					try {
+						File tfile = new File(IMEI_FILE);
+					    FileOutputStream outfile = new FileOutputStream(tfile);
+						String[] tac = {
+							 "35793200", "35795200", "35881700", "35936500", "35227201",
+							 "35707000", "35973200","35227301", "35227401", "35200504",
+						};
+						String rand = String.valueOf( (int)(Math.random()*899999+100000) );
+						int index = (int)(Math.random()*10); /* 0-9	*/
+						String cd = null, num = null, str = null;
+						if(index >= 10 || index < 0)
+							index = 0;
+						num = tac[index] + rand;
+				        final int[][] sumTable = {{0,2,4,6,8,1,3,5,7,9}, {0,1,2,3,4,5,6,7,8,9}};
+				        int sum = 0, flip = 0;
+				        for (int i = num.length() - 1; i >= 0; i--) {
+				            sum += sumTable[flip++ & 0x1][Character.digit(num.charAt(i), 10)];
+				        }
+				        int modulusResult = (sum % 10);
+				        int checkDigit = ((modulusResult==0)? modulusResult: (10-modulusResult));
+						cd = String.valueOf(checkDigit);
+						device_id = tac[index] + rand + cd; // total 15 bit
+		                tProperties.setProperty("IMEI", device_id);
+		                tProperties.store(outfile, "");
+		                outfile.close();
+		                try {
+						    String command = "chmod 666 " + IMEI_FILE;
+						    Runtime runtime = Runtime.getRuntime();
+						    Process proc = runtime.exec(command);
+					    } catch (IOException exx) {
+							device_id = "352005048247251";
+					    }
+					} catch (IOException ex3) {
+							device_id = "352005048247251";
+					}
+			    }
+		        return device_id;
+		    }
         }
     }
 
diff --git a/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgePowerManager.java b/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgePowerManager.java
index 1ccbc40..4988e14 100644
--- a/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgePowerManager.java
+++ b/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgePowerManager.java
@@ -119,4 +119,26 @@ public class BridgePowerManager implements IPowerManager {
     public void wakeUp(long time) throws RemoteException {
         // pass for now.
     }
+
+	@Override
+	public void goToBootFastSleep(long eventTime) throws RemoteException{
+		// pass for now.
+	}
+
+	@Override
+	public void bootFastWake(long eventTime) throws RemoteException{
+		// pass for now.
+	}
+
+	@Override
+	public boolean isBootFastStatus() throws RemoteException{
+		// pass for now.
+		return true;
+	}
+
+	@Override
+	public boolean isBootFastWakeFromStandby() throws RemoteException{
+		// pass for now.
+		return true;
+	}
 }
diff --git a/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgeWindowSession.java b/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgeWindowSession.java
index 67b0a9c..f34805d 100644
--- a/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgeWindowSession.java
+++ b/tools/layoutlib/bridge/src/com/android/layoutlib/bridge/android/BridgeWindowSession.java
@@ -97,6 +97,11 @@ public final class BridgeWindowSession implements IWindowSession {
         // pass for now.
     }
 
+	public void bringToFront(IWindow window) 
+	{
+        
+    }
+
     @Override
     public boolean outOfMemory(IWindow window) throws RemoteException {
         return false;
diff --git a/wifi/java/android/net/wifi/p2p/WifiP2pManager.java b/wifi/java/android/net/wifi/p2p/WifiP2pManager.java
index 6edc232..3147850 100644
--- a/wifi/java/android/net/wifi/p2p/WifiP2pManager.java
+++ b/wifi/java/android/net/wifi/p2p/WifiP2pManager.java
@@ -267,6 +267,19 @@ public class WifiP2pManager {
     public static final String EXTRA_WIFI_P2P_DEVICE = "wifiP2pDevice";
 
     /**
+     * Broadcast intent action indicating that this device or peer get ip address successfully.
+     */
+    @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
+    public static final String WIFI_P2P_GO_CLIENT_CONNECTION_ACTION =
+        "android.net.wifi.p2p.GO_CLIENT_CONNECTION_CHANGED";
+
+    /**
+     * The lookup key for a {@link String} object
+     * Retrieve with {@link android.content.Intent#getStringExtra(String)}.
+     */
+    public static final String EXTRA_WIFI_P2P_IP_INFO = "wifiP2pIpInfo";
+
+    /**
      * Broadcast intent action indicating that remembered persistent groups have changed.
      * @hide
      */
diff --git a/wifi/java/android/net/wifi/p2p/WifiP2pService.java b/wifi/java/android/net/wifi/p2p/WifiP2pService.java
index 039319d..e734ca6 100644
--- a/wifi/java/android/net/wifi/p2p/WifiP2pService.java
+++ b/wifi/java/android/net/wifi/p2p/WifiP2pService.java
@@ -49,6 +49,8 @@ import android.net.wifi.p2p.WifiP2pGroupList.GroupDeleteListener;
 import android.net.wifi.p2p.nsd.WifiP2pServiceInfo;
 import android.net.wifi.p2p.nsd.WifiP2pServiceRequest;
 import android.net.wifi.p2p.nsd.WifiP2pServiceResponse;
+import android.net.LocalServerSocket;
+import android.net.LocalSocket;
 import android.os.Binder;
 import android.os.Bundle;
 import android.os.IBinder;
@@ -82,12 +84,18 @@ import com.android.internal.util.Protocol;
 import com.android.internal.util.State;
 import com.android.internal.util.StateMachine;
 
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.DataInputStream;
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Properties;
 
 /**
  * WifiP2pService includes a state machine to perform Wi-Fi p2p operations. Applications
@@ -220,6 +228,20 @@ public class WifiP2pService extends IWifiP2pManager.Stub {
     private static final String[] DHCP_RANGE = {"192.168.49.2", "192.168.49.254"};
     private static final String SERVER_ADDRESS = "192.168.49.1";
 
+    /* AllShare Cast Dongle Mac Rangth {F8:D0:BD:00:00:00 - F8:D0:BD:FF:FF:FF}, Samsung Electronics Co.,Ltd.
+     * Get similar device mac address from /system/etc/wfd_blacklist.conf
+     * As a source, when negotiated with sink as a GO and this Group remembered as persistent by wpa_supplicant.
+     * When issued by source self once again, it will send invitation directly and set persistent to 0(allshare), not 1(netgear).
+     * Allshare Cast will ignore this invitation issued by jb4.2.2. God knows persist compatible issue.
+     */
+    private static final String ALLSHARE_CAST_DONGLE_MAC1 = "F8:D0:BD";
+    private static final String ALLSHARE_CAST_DONGLE_MAC2 = "D8:57:EF";
+    private static final String WFD_NO_INVITE_DEV_MAC_FILE = "/etc/wfd_blacklist.conf";
+    // properties loaded from WFD_NO_INVITE_DEV_MAC_FILE
+    private Properties mProperties;
+    private String mNoInvitDevMac;
+    private String[] mNoInvitDevMacList;
+
     /**
      * Error code definition.
      * see the Table.8 in the WiFi Direct specification for the detail.
@@ -313,6 +335,33 @@ public class WifiP2pService extends IWifiP2pManager.Stub {
         mThisDevice.primaryDeviceType = mContext.getResources().getString(
                 com.android.internal.R.string.config_wifi_p2p_device_type);
 
+        mProperties = new Properties();
+        try {
+            File file = new File(WFD_NO_INVITE_DEV_MAC_FILE);
+            FileInputStream stream = new FileInputStream(file);
+            mProperties.load(stream);
+            stream.close();
+
+            mNoInvitDevMac = mProperties.getProperty("NO_INVITE_MAC");
+            if (mNoInvitDevMac != null) {
+                mNoInvitDevMacList = mNoInvitDevMac.split(",");
+                if (mNoInvitDevMacList != null) {
+                    for (int i = 0; i < mNoInvitDevMacList.length; i++) {
+                        Slog.d(TAG, "wfd blacklist mac range " + i +".[" + mNoInvitDevMacList[i] + "]");
+                    }
+                } else {
+                    mNoInvitDevMacList = new String[2];
+                    mNoInvitDevMacList[0] = ALLSHARE_CAST_DONGLE_MAC1;
+                    mNoInvitDevMacList[1] = ALLSHARE_CAST_DONGLE_MAC2;
+                }
+            }
+        } catch (IOException e) {
+            Slog.d(TAG, "Could not open wfd blacklist file [" + WFD_NO_INVITE_DEV_MAC_FILE + "]");
+            mNoInvitDevMacList = new String[2];
+            mNoInvitDevMacList[0] = ALLSHARE_CAST_DONGLE_MAC1;
+            mNoInvitDevMacList[1] = ALLSHARE_CAST_DONGLE_MAC2;
+        }
+
         mP2pStateMachine = new P2pStateMachine(TAG, mP2pSupported);
         mP2pStateMachine.start();
     }
@@ -1310,6 +1359,15 @@ public class WifiP2pService extends IWifiP2pManager.Stub {
                          * TODO: Verify multi-channel scenarios and supplicant behavior are
                          * better before adding a time out in future
                          */
+                        //FIXME: TODO
+                        //ServerSocketListener clientIp = new ServerSocketListener();
+                        //clientIp.start();
+
+                        //Set group idle timeout of 10 sec, to avoid GO beaconing incase of any
+                        //failure during 4-way Handshake.
+                        if (!mAutonomousGroup) {
+                            mWifiNative.setP2pGroupIdle(mGroup.getInterface(), GROUP_IDLE_TIME_S);
+                        }
                         startDhcpServer(mGroup.getInterface());
                     } else {
                         mWifiNative.setP2pGroupIdle(mGroup.getInterface(), GROUP_IDLE_TIME_S);
@@ -1494,6 +1552,8 @@ public class WifiP2pService extends IWifiP2pManager.Stub {
                 case WifiMonitor.AP_STA_CONNECTED_EVENT:
                     WifiP2pDevice device = (WifiP2pDevice) message.obj;
                     String deviceAddress = device.deviceAddress;
+                    // Clear timeout that was set when group was started.
+                    mWifiNative.setP2pGroupIdle(mGroup.getInterface(), 0);
                     if (deviceAddress != null) {
                         if (mSavedProvDiscDevice != null &&
                                 deviceAddress.equals(mSavedProvDiscDevice.deviceAddress)) {
@@ -1662,6 +1722,13 @@ public class WifiP2pService extends IWifiP2pManager.Stub {
                             // try invitation.
                             sendMessage(WifiP2pManager.CONNECT, mSavedPeerConfig);
                         }
+                    } else if (status == P2pStatus.INFORMATION_IS_CURRENTLY_UNAVAILABLE) {
+                        if(mSavedProvDiscDevice != null) {
+                            Slog.d(TAG, "mSavedProvDiscDevice[" + mSavedProvDiscDevice + "].");
+                            mSavedProvDiscDevice = null;
+                        } else {
+			    Slog.d(TAG, "mSavedProvDiscDevice [" + mSavedProvDiscDevice + "]");
+			}
                     }
                     break;
                 case WifiMonitor.P2P_PROV_DISC_PBC_REQ_EVENT:
@@ -2055,7 +2122,7 @@ public class WifiP2pService extends IWifiP2pManager.Stub {
 
         boolean join = dev.isGroupOwner();
         String ssid = mWifiNative.p2pGetSsid(dev.deviceAddress);
-        if (DBG) logd("target ssid is " + ssid + " join:" + join);
+        logd("target ssid is " + ssid + " join:" + join);
 
         if (join && dev.isGroupLimit()) {
             if (DBG) logd("target device reaches group limit.");
@@ -2090,8 +2157,22 @@ public class WifiP2pService extends IWifiP2pManager.Stub {
             }
             if (netId < 0) {
                 netId = getNetworkIdFromClientList(dev.deviceAddress);
+                boolean isAllShare = false;
+                try {
+                    for (int i = 0; i < mNoInvitDevMacList.length; i++) {
+                        isAllShare = dev.deviceAddress.toLowerCase().startsWith(
+                                        mNoInvitDevMacList[i].toLowerCase());
+                        if(isAllShare) {
+                            break;
+                        }
+                    }
+                } catch(NullPointerException e) {}
+                if(isAllShare) {
+                    netId = -1;
+                    Slog.d(TAG, "allshare p2pclient persistent.");
+                }
             }
-            if (DBG) logd("netId related with " + dev.deviceAddress + " = " + netId);
+            logd("netId related with " + dev.deviceAddress + " = " + netId);
             if (netId >= 0) {
                 // Invoke the persistent group.
                 if (mWifiNative.p2pReinvoke(netId, dev.deviceAddress)) {
@@ -2798,6 +2879,85 @@ public class WifiP2pService extends IWifiP2pManager.Stub {
         return pkgName.equals(tasks.get(0).baseActivity.getPackageName());
     }
 
+    /*
+     * when Negotiated as GO, start dnsmasq as dhcp server, we are waiting for
+     * client connect to us.
+     * condition: trigger this only when the peer device contains SOURCE or dual WFD IE.
+     */
+    private class ServerSocketListener extends Thread {
+        public ServerSocketListener() {
+            super("wfd_ip_alloc");
+        }
+
+        @Override
+        public void run() {
+            try {
+                LocalServerSocket server = new LocalServerSocket("android.net.wifi.p2p");
+                if(server == null) {
+                    Slog.e(TAG, "Server is null !");
+                    return;
+                }
+                String ipInfo = "none";
+                while (true) {
+                    Slog.d(TAG, "Waiting for client to connect us.");
+                    LocalSocket receiver = server.accept();
+                    Slog.d(TAG, "One client connects to us now.");
+                    if (receiver != null) {
+                        InputStream in = receiver.getInputStream();
+                        int readed = in.read();
+                        Slog.d(TAG, "1.readed[" + readed + "]");
+                        if(readed > 0) {
+                            DataInputStream din = new DataInputStream(in);
+                            ipInfo = din.readLine();
+                            din.close();
+                            // send a broadcast notify settings.
+                            sendP2pGoClientIpChangedBroadcast(ipInfo);
+                            Slog.d(TAG, "1.send a broadcast to notify settings[" + ipInfo + "]");
+                        } else {
+                            Slog.d(TAG, "sleep 10ms start.");
+                            try {
+                                Thread.sleep(10);//10ms
+                            } catch (InterruptedException ignore) {}
+                            Slog.d(TAG, "sleep 10ms end.");
+                            readed = in.read();
+                            Slog.d(TAG, "2.readed[" + readed + "]");
+                            if(readed > 0) {
+                                DataInputStream din = new DataInputStream(in);
+                                ipInfo = din.readLine();
+                                din.close();
+                                // send a broadcast notify settings.
+                                sendP2pGoClientIpChangedBroadcast(ipInfo);
+                                Slog.d(TAG, "2.send a broadcast to notify settings[" + ipInfo + "]");
+                            }
+                        }
+                        in.close();
+                        receiver.close();
+                        break;
+                    } else {
+                        Slog.e(TAG, "Receiver is null !");
+                        break;
+                    }
+                }// end of while (true) {
+
+                if(server != null)
+                    server.close();
+
+            } catch (IOException e) {
+                Slog.e(TAG, e.getMessage());
+            }
+        }
+    }
+
+    private void sendP2pGoClientIpChangedBroadcast(String ipInfo) {
+        if (DBG) logd("sending p2p go clent ip address changed broadcast");
+        Intent intent = new Intent(WifiP2pManager.WIFI_P2P_GO_CLIENT_CONNECTION_ACTION);
+        intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT
+                | Intent.FLAG_RECEIVER_REPLACE_PENDING);
+        intent.putExtra(WifiP2pManager.EXTRA_WIFI_P2P_IP_INFO, ipInfo);
+
+        mContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL);
+    }
+
     }
 
     /**
